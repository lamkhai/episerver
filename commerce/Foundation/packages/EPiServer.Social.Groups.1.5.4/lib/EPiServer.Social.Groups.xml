<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Social.Groups</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Social.Groups.DefaultAssociationServiceFactory">
            <summary>
            The DefaultAssociationServiceFactory class encapsulates the platform's 
            default construction of an IAssociationService implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultAssociationServiceFactory.Create">
            <summary>
            Creates a new group association service according to 
            platform defaults.
            </summary>
            <returns>New association service</returns>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultAssociationServiceFactory.GetRepository">
            <summary>
            Gets an instance of the repository intended to support the service
            constructed by this factory. Override this method to introduce
            a custom repository.
            </summary>
            <returns>Repository intended to support this service</returns>
        </member>
        <member name="T:EPiServer.Social.Groups.DefaultGroupServiceFactory">
            <summary>
            The DefaultGroupServiceFactory class encapsulates the platform's 
            default construction of an IGroupService implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultGroupServiceFactory.Create">
            <summary>
            Creates a new group service according to platform defaults.
            </summary>
            <returns>New group service</returns>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultGroupServiceFactory.GetRepository">
            <summary>
            Gets an instance of the repository intended to support the service
            constructed by this factory. Override this method to introduce
            a custom repository.
            </summary>
            <returns>Repository intended to support this service</returns>
        </member>
        <member name="T:EPiServer.Social.Groups.DefaultMemberServiceFactory">
            <summary>
            The DefaultMemberServiceFactory class encapsulates the platform's 
            default construction of an IMemberService implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultMemberServiceFactory.Create">
            <summary>
            Creates a new group member service according to 
            platform defaults.
            </summary>
            <returns>New member service</returns>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultMemberServiceFactory.GetRepository">
            <summary>
            Gets an instance of the repository intended to support the service
            constructed by this factory. Override this method to introduce
            a custom repository.
            </summary>
            <returns>Repository intended to support this service</returns>
        </member>
        <member name="T:EPiServer.Social.Groups.DefaultRoleServiceFactory">
            <summary>
            The DefaultRoleServiceFactory class encapsulates the platform's 
            default construction of an IRoleService implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultRoleServiceFactory.Create">
            <summary>
            Creates a new role service according to platform defaults.
            </summary>
            <returns>New role service</returns>
        </member>
        <member name="M:EPiServer.Social.Groups.DefaultRoleServiceFactory.GetRepository">
            <summary>
            Gets an instance of the repository intended to support the service
            constructed by this factory. Override this method to introduce
            a custom repository.
            </summary>
            <returns>Repository intended to support this service</returns>
        </member>
        <member name="T:EPiServer.Social.Groups.GroupService">
            <summary>
            The GroupService class is responsible for facilitating the creation,
            update, deletion, and retrieval of social groups.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.#ctor(EPiServer.Social.Groups.Core.IGroupRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">Repository supporting operations on group data</param>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Add(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Adds a new group.
            </summary>
            <param name="group">Group to be added</param>
            <returns>Group which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter passed in is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AddAsync(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Asynchronously adds a new group.
            </summary>
            <param name="group">Group to be added</param>
            <returns>Group which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter passed in is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Add``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Adds a new group.
            </summary>
            <param name="group">Group to be added</param>
            <param name="extension">Extension data to be added</param>
            <returns>Group which was just added with extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AddAsync``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Asynchronously adds a new group.
            </summary>
            <param name="group">Group to be added</param>
            <param name="extension">Extension data to be created</param>
            <returns>Group which was just added with extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter passed in is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Update(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Saves an update to an existing group.
            </summary>
            <param name="group">Group information to be updated</param>
            <returns>Group which was just updated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.UpdateAsync(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Asynchronously saves an update to an existing group.
            </summary>
            <param name="group">Group information to be updated</param>
            <returns>Group which was just updated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Update``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Saves an update to an existing group.
            </summary>
            <param name="group">Group information to be updated</param>
            <param name="extension">Extension Data to be updated</param>
            <returns>Group which was just updated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.UpdateAsync``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Asynchronously saves an update to an existing group.
            </summary>
            <param name="group">Group information to be updated</param>
            <param name="extension">Extension Data to be updated</param>
            <returns>Group which was just updated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Remove(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Removes an existing group from the system.
            </summary>
            <param name="id">ID of the group to be removed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberStillExistsException">Thrown when members still exist in the system for the group being deleted.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationStillExistsException">Thrown when content associations still exist in the system for the group being deleted.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.RemoveAsync(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Asynchronously removes an existing group from the system.
            </summary>
            <param name="id">ID of the group to be removed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberStillExistsException">Thrown when members still exist in the system for the group being deleted.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationStillExistsException">Thrown when content associations still exist in the system for the group being deleted.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Get(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Gets a group by its ID.
            </summary>
            <param name="id">ID of group to be retrieved</param>
            <returns>Group identified by the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.GetAsync(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Asynchronously gets a group as identified  by the specified ID.
            </summary>
            <param name="id">Group identifier</param>
            <returns>Group corresponding to the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Get``1(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Gets a group as identfied by the specified ID.
            </summary>
            <param name="id">Group identifier</param>
            <returns>Composite of  a group and its extension data corresponding to the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.GetAsync``1(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Asynchronously gets a group as identified by the specified ID.
            </summary>
            <param name="id">Group identifier</param>
            <returns>Composite of  a group and its extension data corresponding to the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the identified group document does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.GroupFilter})">
            <summary>
            Retrieves a page of groups as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of groups</param>
            <returns>Page of groups filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.GroupFilter})">
            <summary>
            Asynchronously retrieves a page of groups as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of groups</param>
            <returns>Page of groups filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.GroupFilter,``0})">
            <summary>
            Retrieves a result page of composites. Each composite contains a group and its extension data, as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of groups and the extension data</param>
            <returns>Page of groups filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.GroupFilter,``0})">
            <summary>
            Asynchronously retrieves a result page of composites. Each composite contains a group and its extension data, as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of groups and the extension data</param>
            <returns>Page of composites that contain groups and their extension data filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForCreate(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Ensures that the specified group is sufficient to commit
            for creation. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="group">Group to be created</param>
            <exception cref="T:System.ArgumentException">Group is insufficient for creation</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForCreate``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Ensures that the specified group is sufficient to commit
            for creation. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="group">Group to be created</param>
            <param name="extension">Extension data to be added</param>
            <exception cref="T:System.ArgumentException">Group is insufficient for creation</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForUpdate(EPiServer.Social.Groups.Core.Group)">
            <summary>
            Ensures that the specified group is sufficient to commit
            for an update. An exception is thrown if the data is
            insufficient for an update.
            </summary>
            <param name="group">Group to be updated</param>
            <exception cref="T:System.ArgumentException">Group data is insufficient for an update</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForUpdate``1(EPiServer.Social.Groups.Core.Group,``0)">
            <summary>
            Ensures that the specified group is sufficient to commit
            for an update. An exception is thrown if the data is
            insufficient for an update.
            </summary>
            <param name="group">Group to be updated</param>
            <param name="extension">Extension data to be updated</param>
            <exception cref="T:System.ArgumentException">Group data is insufficient for an update</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForDelete(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Ensures that the specified group ID is sufficient to delete a group. 
            An exception is thrown if the data is found to be insufficient.
            </summary>
            <param name="id">Group to be deleted</param>
            <exception cref="T:System.ArgumentException">ID is insufficient for a delete</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForGet(EPiServer.Social.Groups.Core.GroupId)">
            <summary>
            Ensures that the specified group ID is sufficient to retrieve a group. 
            An exception is thrown if the data is found to be insufficient.
            </summary>
            <param name="id">Group to be retrieved</param>
            <exception cref="T:System.ArgumentNullException">ID is insufficient for retrieval</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.GroupService.AssertForGet(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.GroupFilter})">
            <summary>
            Ensures that the specified criteria is sufficient to retreive groups.
            An exception is thrown if the criteria is found to be insufficient.
            </summary>
            <param name="criteria">Criteria to filter result set</param>
        </member>
        <member name="T:EPiServer.Social.Groups.AssociationService">
            <summary>
            The AssociationService class is responsible for facilitating the assignment,
            removal, and retrieval of associations within social groups.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.#ctor(EPiServer.Social.Groups.Core.IAssociationRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">Repository supporting operations on associationship data</param>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Add(EPiServer.Social.Groups.Core.Association)">
            <summary>
            Adds a resource as an association of an existing group.
            </summary>
            <param name="association">Association to be added</param>
            <returns>Association of the group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateAssociationException">Thrown when an association already exists between the resource and the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.AddAsync(EPiServer.Social.Groups.Core.Association)">
            <summary>
            Asynchronously adds an association between a resource and an existing group.
            </summary>
            <param name="association">Association to be added</param>
            <returns>Association of the group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateAssociationException">Thrown when an association already exists between the resource and the group.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateAssociationException">Thrown when an association already exists between the resource and the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Add``1(EPiServer.Social.Groups.Core.Association,``0)">
            <summary>
            Adds a resource as an association of an existing group with extension data.
            </summary>
            <param name="association">Association to be added</param>
            <param name="extension">extension data  to be added</param>
            <returns>composite of an Association of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateAssociationException">Thrown when an association already exists between the resource and the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.AddAsync``1(EPiServer.Social.Groups.Core.Association,``0)">
            <summary>
             Asynchronously adds an association between a resource with extension data and an existing group.
            </summary>
            <param name="association">Association to be added</param>
            <param name="extension">Extension data to be added</param>
            <returns>Composite of Association and extension data which was added </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateAssociationException">Thrown when an association already exists between the resource and the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Update``1(EPiServer.Social.Groups.Core.AssociationId,``0)">
            <summary>
            Update an association in the repository with new extension data
            </summary>
            <param name="associationId">AssociationId used to filter collection with</param>
            <param name="extension">extension data to be added</param>
            <returns>Composite of Member of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the specified association identifier does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.UpdateAsync``1(EPiServer.Social.Groups.Core.AssociationId,``0)">
            <summary>
            Asynchronously update an association in the repository with new extension data
            </summary>
            <param name="associationId">AssociationId used to filter collection with</param>
            <param name="extension">Extension data to be added</param>
            <returns>Composite of Member of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the specified association identifier does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Remove(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Removes an association from an existing group.
            </summary>
            <param name="id">ID of the association to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.RemoveAsync(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Asynchronously removes an association from an existing group.
            </summary>
            <param name="id">ID of the association to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.IsAssociated(EPiServer.Social.Groups.Core.GroupId,EPiServer.Social.Common.Reference)">
            <summary>
            Returns true if the specified resource is an association of the specified group,
            false otherwise.
            </summary>
            <param name="group">Group in which the specified resource may be an association</param>
            <param name="resource">Identifies the resource for whom associationship should be verified</param>
            <returns>True if the specified resource is an association of the specified group, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.IsAssociatedAsync(EPiServer.Social.Groups.Core.GroupId,EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously determines if the specified resource is associated with the specified group,
            and returns true if the association exists, false otherwise.
            </summary>
            <param name="group">Group with which the resource may be associated</param>
            <param name="resource">Identifies the resource whose association should be verified</param>
            <returns>True if the specified resource is associated with the specified group, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.AssociationFilter})">
            <summary>
            Retrieves a page of associations assigned to the specified group.
            </summary>
            <param name="criteria">Filters the result set of associations</param>
            <returns>Page of associations of the specified group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.AssociationFilter})">
            <summary>
            Asynchronously retrieves a page of associations assigned to the specified group.
            </summary>
            <param name="criteria">Filters the result set of associations</param>
            <returns>Page of associations for the specified group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.AssociationFilter,``0})">
            <summary>
            Retrieves a result page of associations assigned to the specified group and extension data.
            </summary>
            <param name="criteria">Filters the result set of associations and their extension data</param>
            <returns>Result Page of composites of associations of the specified group and the corresponding extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.AssociationFilter,``0})">
            <summary>
            Asynchronously retrieves a page of group associations and extension data assigned to the specified group,
            as described by the specified criteria.
            </summary>
            <typeparam name="TExtension"></typeparam>
            <param name="criteria"></param>
            <returns>A result page of type composite of type group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Get(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Retrieves a Association by a Association Id
            </summary>
            <param name="id">An Association Id signifying which Association the user wishes to have returned</param>
            <returns>The Association that matches the AssociationId provided</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the identified association does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.GetAsync(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Asynchronously retrieves a single Assocation based upon an AssociationId
            </summary>
            <param name="id">association id of the desired association</param>
            <returns>The requested association</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the identified association does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.Get``1(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Retrieves a Association by a Association Id
            </summary>
            <param name="id">An Association Id signifying which Association the user wishes to have returned</param>
            <returns>The Association that matches the AssociationId provided</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the identified association does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.GetAsync``1(EPiServer.Social.Groups.Core.AssociationId)">
            <summary>
            Asynchronously gets an association composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the association </typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A association composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.AssociationDoesNotExistException">Thrown when the identified association does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.AssociationService.AssertForUpdate``1(EPiServer.Social.Groups.Core.AssociationId,``0)">
            <summary>
            Throws an exception if the specified Id is found
            to be insufficient for update to the database.
            </summary>
            <param name="associationId">associationId to be verified</param>
            <param name="extension">Extension data to be updated</param>
        </member>
        <member name="T:EPiServer.Social.Groups.MemberService">
            <summary>
            The MemberService class is responsible for facilitating the assignment,
            removal, and retrieval of members within social groups.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.#ctor(EPiServer.Social.Groups.Core.IMemberRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">Repository supporting operations on member data</param>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Add(EPiServer.Social.Groups.Core.Member)">
            <summary>
            Adds a user as a member of an existing group.
            </summary>
            <param name="member">Member to be added</param>
            <returns>Member of the group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateMemberException">Thrown when the user is already a member of the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.AddAsync(EPiServer.Social.Groups.Core.Member)">
            <summary>
            Adds a user as a member to the repository.
            </summary>
            <param name="member">Member to be added</param>
            <returns>Member of the group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateMemberException">Thrown when the user is already a member of the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Add``1(EPiServer.Social.Groups.Core.Member,``0)">
            <summary>
            Adds a user as a member of an existing group with its extension data.
            </summary>
            <param name="member">Member to be added</param>      
            <param name="extension">extension data to be added</param>
            <returns>Member of the group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateMemberException">Thrown when the user is already a member of the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.AddAsync``1(EPiServer.Social.Groups.Core.Member,``0)">
            <summary>
            Adds a user as a member and its corresponding extension data to the repository.
            </summary>
            <param name="member">Member to be added</param>
            <param name="extension">extension data to be added</param>
            <returns>Composite of Member of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.GroupDoesNotExistException">Thrown when the group specified for association being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.DuplicateMemberException">Thrown when the user is already a member of the group.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Update``1(EPiServer.Social.Groups.Core.MemberId,``0)">
            <summary>
            Update a member in the repository with new extension data
            </summary>
            <param name="memberId">MemberId used to filter collection with</param>
            <param name="extension">extension data to be added</param>
            <returns>Composite of Member of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.UpdateAsync``1(EPiServer.Social.Groups.Core.MemberId,``0)">
            <summary>
            Update a member in the repository with new extension data
            </summary>
            <param name="memberId">MemberId used to filter collection with</param>
            <param name="extension">Extension data to be added</param>
            <returns>Composite of Member of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Remove(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Removes a member from an existing group.
            </summary>
            <param name="member">ID of the member to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.RemoveAsync(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Removes a member from an existing group.
            </summary>
            <param name="member">ID of the member to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.IsMember(EPiServer.Social.Groups.Core.GroupId,EPiServer.Social.Common.Reference)">
            <summary>
            Returns true if the specified user is a member of the specified group,
            false otherwise.
            </summary>
            <param name="group">Group in which the specified user may be a member</param>
            <param name="user">Identifies the user for whom membership should be verified</param>
            <returns>True if the specified user is a member of the specified group, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.IsMemberAsync(EPiServer.Social.Groups.Core.GroupId,EPiServer.Social.Common.Reference)">
            <summary>
            Returns true if the specified user is a member of the specified group,
            false otherwise.
            </summary>
            <param name="group">Group in which the specified user may be a member</param>
            <param name="user">Identifies the user for whom membership should be verified</param>
            <returns>True if the specified user is a member of the specified group, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Get(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Gets a member of an existing group.
            </summary>
            <param name="memberId">ID of the member to be retrieved</param>
            <returns>Member with the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.GetAsync(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Gets a member of an existing group.
            </summary>
            <param name="memberId">ID of the member to be retrieved</param>
            <returns>Member with the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Get``1(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Gets a member of an existing group.
            </summary>
            <param name="memberId">ID of the member to be retrieved</param>
            <returns>Composite of member and extension data with the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.GetAsync``1(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Gets a member of an existing group and its corresponding extension data.
            </summary>
            <param name="memberId">ID of the member to be retrieved</param>
            <returns>Composite of member and extension data for the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.MemberFilter})">
            <summary>
            Retrieves a page of members assigned to the specified group.
            </summary>
            <param name="criteria">Filters the result set of members</param>
            <returns>Page of members of the specified group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.MemberFilter})">
            <summary>
            Retrieves a result page of members assigned to the specified group.
            </summary>
            <param name="criteria">Filters the result set of members</param>
            <returns>Page of members of the specified group</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.MemberFilter,``0})">
            <summary>
            Retrieves a result page of members assigned to the specified group and extension data.
            </summary>
            <param name="criteria">Filters the result set of associations and their extension data</param>
            <returns>Result Page of composites of associations of the specified group and the corresponding extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.MemberFilter,``0})">
            <summary>
            Retrieves a result page of members assigned to the specified group and their extension data.
            </summary>
            <param name="criteria">Composite Criteria that contains Filters for the result set of members and extension</param>
            <returns>Page of members of the specified group and their corresponding extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.AssertForUpdate(EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Throws an exception if the specified Id  is found
            to be insufficient for updating to the database.
            </summary>
            <param name="memberId">memberId to be verified</param>
        </member>
        <member name="M:EPiServer.Social.Groups.MemberService.AssertForUpdate``1(EPiServer.Social.Groups.Core.MemberId,``0)">
            <summary>
            Throws an exception if the specified Id  is found
            to be insufficient for updating to the database.
            </summary>
            <param name="memberId">memberId to be verified</param>
            <param name="extension">Extension data to be updated</param>
        </member>
        <member name="T:EPiServer.Social.Groups.RoleService">
            <summary>
            The RoleService class is responsible for facilitating 
            the creation, deletion, and retrieval of roles for social groups.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.#ctor(EPiServer.Social.Groups.Core.IRoleRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">Repository supporting operations on role data</param>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Add(EPiServer.Social.Groups.Core.Role)">
            <summary>
            Adds a new role for a group.
            </summary>
            <param name="role">Role to be added for a group</param>
            <returns>Role which has been added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AddAsync(EPiServer.Social.Groups.Core.Role)">
            <summary>
            Asynchronously adds a new role for a group.
            </summary>
            <param name="role">Role to be added for a group</param>
            <returns>Role which has been added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Add``1(EPiServer.Social.Groups.Core.Role,``0)">
            <summary>
            Adds a new role with associated extension data.
            </summary>
            <param name="role">Role to be added</param>
            <param name="extension">extension to be added </param>
            <returns>Role which has been added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AddAsync``1(EPiServer.Social.Groups.Core.Role,``0)">
            <summary>
            Asynchronously adds a role and its corresponding extension data 
            </summary>
            <param name="role">Role to be added</param>
            <param name="extension">extension data to be added</param>
            <returns>Composite of Role and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Update``1(EPiServer.Social.Groups.Core.RoleId,``0)">
            <summary>
            Update a role in the repository with new extension data
            </summary>
            <param name="roleId">RoleId used to filter collection with</param>
            <param name="extension">extension data to be added</param>
            <returns>Composite of role of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.UpdateAsync``1(EPiServer.Social.Groups.Core.RoleId,``0)">
            <summary>
            Asynchronously updates the extension data corresponding to a role
            </summary>
            <param name="roleId">RoleId used to filter collection with</param>
            <param name="extension">Extension data to be added</param>
            <returns>Composite of Role of the group and extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Remove(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Removes an existing role from the system.
            </summary>
            <param name="roleId">ID of the role to remove</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.RemoveAsync(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Asynchronously removes an existing role from the system.
            </summary>
            <param name="roleId">ID of the role to remove</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.RoleFilter})">
            <summary>
            Retrieves a result page of roles as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of roles</param>
            <returns>Result Page of roles filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.RoleFilter})">
            <summary>
            Asynchronously retrieves a page of roles as described 
            by the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter roles</param>
            <returns>Page of roles</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.RoleFilter,``0})">
            <summary>
            Retrieves a result page of composites that contain roles and their corresponding extension data as specified by the provided criteria.
            </summary>
            <param name="criteria">Composite Filters for roles and extension data</param>
            <returns>Result page of composites that contain roles and their corresponding extension data filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Groups.Core.RoleFilter,``0})">
            <summary>
            Asynchronously retrieves a result page of role and their extension data 
            </summary>
            <param name="criteria">Composite Criteria that contains Filters for the result set of roles and extension</param>
            <returns>Page of roles and their corresponding extension data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Get(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Retrieves a role by its ID.
            </summary>
            <param name="roleId">ID of role to be retrieved</param>
            <returns>Role identified by the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.GetAsync(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Asynchronously retrieves a role by its ID.
            </summary>
            <param name="roleId">ID of role to be retrieved</param>
            <returns>Role identified by the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Get``1(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Retrieves a role and it extension data by its ID.
            </summary>
            <param name="roleId">ID of role to be retrieved</param>
            <returns>Role identified by the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.GetAsync``1(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Asynchronously gets a role and its corresponding extension data 
            </summary>
            <param name="roleId">ID of the role to be retrieved</param>
            <returns>Composite of role and extension data for the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Assign(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Assigns a group member to a particular role.
            </summary>
            <param name="assignment">Associate a role with a particular member</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssignAsync(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Asynchronously assigns a role to a particular group member.
            </summary>
            <param name="assignment">Describes the assignment of a role to a member</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.RoleDoesNotExistException">Thrown when the identified role does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.Unassign(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Removes the assignment of a role from a particular group member.
            </summary>
            <param name="assignment">Describes the assignment of a role to a member</param>
            <exception cref="T:System.ArgumentNullException">Role assignment data is null</exception>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.UnassignAsync(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Asynchronously removes the assignment of a role from a particular group member.
            </summary>
            <param name="assignment">Describes the assignment of a role to a member</param>
            <exception cref="T:System.ArgumentNullException">Role assignment data is null</exception>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
            <exception cref="T:EPiServer.Social.Groups.Core.MemberDoesNotExistException">Thrown when the identified member does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.IsAssigned(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Returns a boolean indicating whether a member has been assigned
            to a particular role.
            </summary>
            <param name="assignment">Identifies the role assigment, which is to be verified</param>
            <returns>True if the member has been assigned the role, false otherwise</returns>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.IsAssignedAsync(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Asynchronously returns a boolean indicating whether a member has been assigned
            to a particular role.
            </summary>
            <param name="assignment">Identifies the role assigment, which is to be verified</param>
            <returns>True if the member has been assigned the role, false otherwise</returns>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForCreate(EPiServer.Social.Groups.Core.Role)">
            <summary>
            Ensures that the specified role is sufficient to commit
            for creation. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="role">Role to be created</param>
            <exception cref="T:System.ArgumentException">Role is insufficient for creation</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForCreate``1(EPiServer.Social.Groups.Core.Role,``0)">
            <summary>
            Ensures that the specified role is sufficient to commit
            for creation. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="role">Role to be created</param>
            <param name="extension">Extension data to be added</param>
            <exception cref="T:System.ArgumentException">Role is insufficient for creation</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForUpdate``1(EPiServer.Social.Groups.Core.RoleId,``0)">
            <summary>
            Throws an exception if the specified Id  is found
            to be insufficient for updating to the database.
            </summary>
            <param name="memberId">memberId to be verified</param>
            <param name="extension">Extension data to be updated</param>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForUpdate(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Throws an exception if the specified Id  is found
            to be insufficient for updating to the database.
            </summary>
            <param name="roleId">roleId to be verified</param>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForDelete(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Ensures that the specified role ID is sufficient to
            for deletion. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="roleId">ID of role to be deleted</param>
            <exception cref="T:System.ArgumentException">Role ID is insufficient for deletion</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForGet(EPiServer.Social.Groups.Core.RoleId)">
            <summary>
            Ensures that the specified role ID is sufficient to
            to retrieve a role. An exception is thrown if the data is
            found to be insufficient.
            </summary>
            <param name="roleId">ID of role to retrieve</param>
            <exception cref="T:System.ArgumentException">Role ID is insufficient for retrieval</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForGet(EPiServer.Social.Common.Criteria{EPiServer.Social.Groups.Core.RoleFilter})">
            <summary>
            Ensures that the specified criteria is sufficient
            for retrieval of roles. An exception is thrown if 
            the data is found to be insufficient.
            </summary>        
            <param name="criteria">Criteria describing roles to be retrieved</param>
            <exception cref="T:System.ArgumentException">Input data is insufficient</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForUnassign(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Ensures that the specified role assignment data is sufficient
            to unassign a role. An exception is thrown if the data is found
            to be insufficient.
            </summary>
            <param name="assignment">Assignment data to verify</param>        
            <exception cref="T:System.ArgumentNullException">Role assignment data is null</exception>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForAssign(EPiServer.Social.Groups.Core.RoleAssignment)">
            <summary>
            Ensures that the specified role assignment data is sufficient
            to assign a role. An exception is thrown if the data is found
            to be insufficient.
            </summary>
            <param name="assignment">Assignment data to verify</param>        
            <exception cref="T:System.ArgumentNullException">Role assignment data is null</exception>
            <exception cref="T:System.ArgumentException">Role assignment is insufficient</exception>
        </member>
        <member name="M:EPiServer.Social.Groups.RoleService.AssertForIsAssigned(EPiServer.Social.Groups.Core.RoleId,EPiServer.Social.Groups.Core.MemberId)">
            <summary>
            Ensures that the specified role and member are sufficient
            to confirm assignment of a role. An exception is thrown if 
            the data is found to be insufficient.
            </summary>
            <param name="roleId">Role to verify for assignment</param>        
            <param name="memberId">Member to verify for assignment</param>
            <exception cref="T:System.ArgumentException">Input data is insufficient</exception>
        </member>
    </members>
</doc>
