<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Forms.Core</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Forms.Core.BlockBase">
            <summary>
            Block base for all Block in EPiServer Forms, which will be rendered to HTML control
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.BlockBase.Description">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.BlockBase.Content">
            <summary>
            The associate <see cref="T:EPiServer.Core.IContent"/>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.BlockBase.AvailableInEditView">
            <inheritdoc />
            Block always is available in EditView
        </member>
        <member name="P:EPiServer.Forms.Core.BlockBase.EditViewFriendlyTitle">
            <inheritdoc />
            Return the name of block content type
        </member>
        <member name="M:EPiServer.Forms.Core.BlockBase.GetAttributes">
            <summary>
            Return a Dictionary. This Dictionary will be rendered as Html attributes of the Block.
            <remarks>By default, Block's description will be added as "title"</remarks>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.BlockBase.AttributesString">
            <summary>
            Render the (extra) Attributes to html-attributes-string
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.AesCrypto.Encrypt(System.String)">
            <summary>
            Within this function, you can choose a SymmetricAlgorithm to encrypt data,
            and then, call the encryption function of base class for data encryption
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.AesCrypto.Decrypt(System.String)">
            <summary>
            We use AesManaged as the default algorithm to decrypt the data
            The algorithm in decrypt function must be the same as that of encrypt function.
            </summary>
            <param name="ciphertext"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Crypto.Internal.CryptoEngineFactory">
            <summary>
            Create SecurityEngine instance base on input params.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.CryptoEngineFactory.GetCryptoEngine(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Using reflection to create an instance of SecurityEngine.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase">
            <summary>
            Default base implementation for encrypting FormSubmission using the combination of RSA and AES.
            Use an AES key to encrypt the FormSubmission and then that AES key is encrypted by RSA.
            Encrypted FormSubmission and the encrypted AES key are returned back to clients (e.g. DdsEncryptedPermanentStorage).
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.ColumnEncryptedKey">
            <summary>
            Columnname (in Submission record) for holding encrypted key of the submission record
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.Initialize(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.EncryptSubmission(EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Encrypt submission. 
            </summary>
            <param name="submission"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.DecryptSubmission(EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Not support data decryption by default
            </summary>
            <param name="submission"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.GenerateRandomSymmetricKey">
            <summary>
            Randomly generate a new symmetric key
            There are 3 key sizes allowed for symmetric algorithm "128", "192", and "256" bit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.FormCryptoEngineBase.GetEncryptedSymmetricKey(System.Byte[])">
            <summary>
            This function encrypts (use RSA) the symmetric key and returns it to clients. 
            </summary>
            <param name="keyBytes"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Crypto.Internal.ICrypto">
            <summary>
            Cryptography contract for encrypting arbitrary data. 
            This assumes to use UTF8 for encoding string to bytes, and use Base64 to serialize bytes to string.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Crypto.Internal.IFormCryptoEngine">
            <summary>
            CryptoEngine is used for encrypt and decrypt submission.
            This interface provides the contract for third parties' crypto engine associated with Forms.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.IFormCryptoEngine.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize crypto engine
            </summary>
            <param name="initParams"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.IFormCryptoEngine.EncryptSubmission(EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Encrypt submission
            </summary>
            <param name="submission"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.IFormCryptoEngine.DecryptSubmission(EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Decrypt submission
            </summary>
            <param name="submission"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:EPiServer.Forms.Core.Crypto.Internal.RsaCrypto" -->
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.RsaCrypto.SetKey(System.Object)">
            <summary>
            This function set the key for RSA.         
            </summary>
            <param name="input">You must pass either a standard XmlString containing the key information or a RSAParameters</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.RsaCrypto.Encrypt(System.Byte[])">
            <summary>
            Encrypt byte[] formatted data 
            Clients use this class are required to set key before using this function.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.RsaCrypto.Encrypt(System.String)">
            <summary>
            Encrypt string formatted data 
            Clients use this class are required to set key before using this function.
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.RsaCrypto.Decrypt(System.String)">
            <summary>
            We do not support decrypt in this context
            </summary>
            <param name="ciphertext"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase">
            <summary>
            This is the base class for data encryption with Symmetric algorithms.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase.SetKey(System.Byte[])">
            <summary>
            Set key for encryption.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase.Encrypt(System.String)">
            <summary>
            Concrete class need to implement this method to provide its encryption functionality.
            Clients use this class are required to set key before using this function.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase.Decrypt(System.String)">
            <summary>
            If not support decrypt, this method should return the <paramref name="ciphertext"/>        
            </summary>
            <param name="ciphertext"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase.Encrypt``1(System.Byte[])">
            <summary>
            Encrypt data with specified algorithm in <typeparamref name="TAlgorithm"/>
            </summary>
            <typeparam name="TAlgorithm"></typeparam>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Crypto.Internal.SymmetricCryptoBase.Decrypt``1(System.Byte[])">
            <summary>
                Decrypt data with a specified algorithm. 
            </summary>
            <typeparam name="TAlgorithm"></typeparam>
            <param name="ciphertext"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.DdsPermanentStorage">
            <summary>
            Storing/loading form submission data from DDS.
            
            Create/obtain instances of the DynamicDataStore on the stack, use them and then discard them. Note that the Dynamic Data Store is not thread safe and if an instance is used and shared between multiple threads it should be protected with thread locking techniques.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.UpdateToStorage(System.Guid,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.GetStoreDefinitionParams">
            <summary>
            Get store definition parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.SaveToStorage(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.LoadPartialSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime)">
            <summary>
            Loads list of partial submission from storage. Ordered by submit time DESC.
            </summary>
            <param name="formIden">Form identifier</param>
            <param name="beginDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,EPiServer.Forms.Core.Models.SubmissionType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Loads list of submission from storage. Ordered by submit time DESC.
            </summary>
            <param name="formIden">Form identifier</param>
            <param name="submissionIds">List of submission's Ids.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.Delete(EPiServer.Forms.Core.Models.FormIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.EnsureFormFieldsExistInPostData(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Data.Dynamic.PropertyBag@,System.Collections.Generic.IDictionary{System.String,System.Type}@)">
            <summary>
            Make the form fields exist in post data.
            This will make sure the DDS always represents all form fields,
            including the case that a field is contained in Personalize Content and not being posted by user.
            This also make sure that all SYSTEMCOLUMN existed in the record.
            SYSTEMCOLUMN_SubmitTime always be set to DateTime.Now, regardless value of postData
            </summary>
            <param name="formIden">The form unique identifier.</param>
            <param name="postData">The post data.</param>
            <param name="typesBag"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.EnsureColumnDataType(EPiServer.Data.Dynamic.PropertyBag,System.String,System.Type,System.Object)">
            <summary>
            Ensure that in <paramref name="postData"/>, column <paramref name="columnName"/> have same type as <paramref name="expectedType"/>.
            If that column exists with a difference type, try to convert it to <paramref name="expectedType"/>, if fail return  <paramref name="defaultValue" />
            </summary>
            <param name="postData"></param>
            <param name="columnName"></param>
            <param name="expectedType"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.RemapStore(EPiServer.Forms.Core.Models.FormIdentity,System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters)">
            <summary>
            Remapping store.
            Handle if store format has changed - prepare to remap.
            If the store is existing then remapping in case the Form has any structure change.
            </summary>
            <param name="formId">Form unique identifier.</param>
            <param name="typesBag"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.GetCurrentStoreDefinitionTypesBag(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Get types from Store Definition
            </summary>
            <param name="formIden"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.DdsPermanentStorage.GetTypesBagFromPostData(EPiServer.Data.Dynamic.PropertyBag)">
            <summary>
            Get types bag from the post data.
            </summary>
            <param name="propertyBag"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.IFormDataRepository">
            <summary>
            Provide service for accessing form submission data.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.FormDataRepository">
            <summary>
            Take data from DataStorage and expose to other service layers.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionDataCount(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get number of submission in specified period.
            </summary>
            <param name="formIden"></param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="finalizedOnly">The form identity.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionDataCount(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get number of submission in specified period.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="finalizedOnly">The form identity.</param>
            <param name="submissionStorage">The storage for loading data.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get list of submission in specified period.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="finalizedOnly">Filter for finalized records.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},EPiServer.Shell.Services.Rest.ItemRange,EPiServer.Shell.Services.Rest.ItemRange@,System.Boolean)">
            <summary>
            Get list of submission in specified period.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="finalizedOnly">Filter for finalized records.</param>
            <param name="submissionStorage">The storage for loading data.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},EPiServer.Shell.Services.Rest.ItemRange,EPiServer.Shell.Services.Rest.ItemRange@,EPiServer.Forms.Core.Models.SubmissionType)">
            <summary>
            Get list of submission in specified period.
            </summary>
            <param name="submissionStorage">The storage for loading data.</param>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="sortColumns"></param>
            <param name="requestRange"></param>
            <param name="actualRange"></param>
            <param name="submissionType">Type of submission to get.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Get list of submission for list of specified Id.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="submissionIds">List of submission Id.</param>
            <param name="submissionStorage">The storage for loading data.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},EPiServer.Shell.Services.Rest.ItemRange,EPiServer.Shell.Services.Rest.ItemRange@,System.Boolean)">
            <summary>
            Get list of submission in specified period.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="finalizedOnly">Filter for finalized records.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},EPiServer.Shell.Services.Rest.ItemRange,EPiServer.Shell.Services.Rest.ItemRange@,EPiServer.Forms.Core.Models.SubmissionType)">
            <summary>
            Get list of submission in specified period.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <param name="sortColumns"></param>
            <param name="requestRange"></param>
            <param name="actualRange"></param>
            <param name="submissionType">Type of submission to get.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionData(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Get list of submission for list of specified Id.
            </summary>
            <param name="formIden">The form identity.</param>
            <param name="submissionIds">List of submission Id.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetSubmissionDataFieldValue(System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo,System.Boolean)">
            <summary>
            Gets submission data from given field mapping object by field mapping name.
            </summary>
            <param name="friendlyName">friendly Name object.</param>
            <param name="performHtmlEncode">Perform HTML encode for field mapping data or not.</param>
            <returns>Field mapping data in string format.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.DeleteSubmissionData(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Delete a list of post data.
            </summary>
            <param name="formIden">The Form's Id of deleting data.</param>
            <param name="submissionIds">List of submission Id.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.DeleteSubmissionData(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Delete a list of post data.
            </summary>
            <param name="formIden">The Form's Id of deleting data.</param>
            <param name="submissionIds">List of submission Id.</param>
            <param name="submissionStorage">The storage for deleting data from.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.DeleteUploadFile(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.String)">
            <summary>
            Delete uploaded file(s)
            </summary>
            <param name="submissionStorage"></param>
            <param name="formIden"></param>
            <param name="submissionId"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.TransformSubmissionDataWithFriendlyName(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo},System.Boolean)">
            <summary>
            Transform the submission data, so it has friendly name for each Field
            </summary>
            <param name="submissionData"></param>
            <param name="friendlyNames"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetPostedFilesInPlainTextFormat(System.Web.HttpRequestBase,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets collection of link in plain text format.
            </summary>
            <remarks>
            Raw link format:
                /contentassets/6d9eaf57417a401589667c48a99490de/635792917322218073_episerver.forms.sln#@EPiServer.Forms.sln
            Returns link format:
                {baseUrl}/contentassets/6d9eaf57417a401589667c48a99490de/635792917322218073_episerver.forms.sln
            </remarks>
            <returns>A plain text string.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetPostedFilesInHtmlFormat(System.Web.HttpRequestBase,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets collection of link in HTML format.
            </summary>
            <param name="rawData"></param>
            <remarks>
            Raw link format:
                /contentassets/6d9eaf57417a401589667c48a99490de/635792917322218073_episerver.forms.sln#@EPiServer.Forms.sln
            Returns link format:
                <a href="{baseUrl}/contentassets/6d9eaf57417a401589667c48a99490de/635792917322218073_episerver.forms.sln">EPiServer.Forms.sln</a>
            </remarks>
            <returns>An HTML string.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.FormDataRepository.GetPostedFiles(System.String)">
            <summary>
            Gets posted files from raw data. This will return the the Dictionary where key is linkUrl, and value is link Name
            </summary>
            <param name="rawData">field value (of the input file element)</param>
            <returns>Posted file collection</returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.IFormDataStoreDefinitionService">
            <summary>
            Provide method(s) to work with <see cref="T:EPiServer.Data.Dynamic.StoreDefinition"/> of Form data.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.IFormDataStoreDefinitionService.GetActiveMappings(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Get name and type of active mapping fields from <see cref="P:EPiServer.Data.Dynamic.StoreDefinition.ActiveMappings"/>.
            Active mapping fields are represented fields of Form which already has value in the store and has not been removed.
            Ex:...{"SYSTEMCOLUMN_FinalizedSubmission", typeof(bool)},
                  {"__field_278", typeof(string)}...
            </summary>
            <param name="formIden"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage">
            <summary>
            Encrypt data before storing info into DDS.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage.SaveToStorage(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            If form is not finalized, submission is stored in ProgressiveSubmitStorage
            Otherwise, it will be encrypted and then, saved into database.
            for this storage, we create a random form submission id for the submission.
            </summary>
            <param name="formIden"></param>
            <param name="submission"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage.UpdateToStorage(System.Guid,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            First, we update form submission data in progressive submit storage.
            Next, we check if form is finalized. If yes, data is updated in database.
            Otherwise, form submission id is returned.
            </summary>
            <param name="formSubmissionId"></param>
            <param name="formIden"></param>
            <param name="submission"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            If the progressive submit storage contains submission data, we return it to clients.
            Otherwise, we load data from database using LoadSubmissionFromStorage as normal and return it to clients.
            </summary>
            <param name="formIden"></param>
            <param name="submissionIds"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage.GetCurrentStoreDefinitionTypesBag(EPiServer.Forms.Core.Models.FormIdentity)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.DdsStructureStorage">
            <summary>
            Handle DDS store for FormStructure
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsStructureStorage.GetStructure(System.Guid)">
            <summary>
            Get structure of a form which specified by formGuid.
            </summary>
            <param name="formGuid">The form unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DdsStructureStorage.MergeFormStructure(System.Guid,System.String[])">
            <summary>
            Merge existing structure with input array of fields.
            </summary>
            <param name="formGuid">The form unique identifier.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.DefaultFormDataStoreDefinitionService">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.DefaultFormDataStoreDefinitionService.GetActiveMappings(EPiServer.Forms.Core.Models.FormIdentity)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.FormSession">
            <summary>
            This class plays a role as an adapter for Session to encapsulate the Session intrinsic object. 
            Form.Core use this abstraction to manipulate with Session.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Data.Internal.FormSession.Item(System.String)">
            <summary>
            Add a pair of key and values to Session.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.FormSession.Remove(System.String)">
            <summary>
            Remove a key from Session
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.FormSessionFactory">
            <summary>
            This factory will return a FormSession for clients.
            This is used to support clients for session management. 
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.FormSessionFactory.GetCurrentFormSession">
            <summary>
            Get current session of an user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.FormSessionFactory.GetHttpContext">
            <summary>
            Return the current http context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.ProgressiveSubmitStorage">
            <summary>
            This storage is used to temporary store submission data until users finalize form data submission.
            It is associated with <see cref="T:EPiServer.Forms.Core.Data.Internal.DdsEncryptedPermanentStorage"/> for data encryption.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.ProgressiveSubmitStorage.SaveToStorage(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Temporary store submission data into Session.
            </summary>
            <param name="formIden"></param>
            <param name="submission"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.ProgressiveSubmitStorage.UpdateToStorage(System.Guid,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            This function updates data stored in Session after an user submits the next form step. 
            1. Data of the current form step is merged with that of previous ones.
            2. Session's form submission data is replaced by the he merged data. 
            </summary>
            <param name="formSubmissionId"></param>
            <param name="formIden"></param>
            <param name="submission"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.ProgressiveSubmitStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.ProgressiveSubmitStorage.Delete(EPiServer.Forms.Core.Models.FormIdentity,System.String)">
            <summary>
            Delete submission data from Session.
            </summary>
            <param name="formIden"></param>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.Internal.SubmissionStorageFactory">
            <summary>
            Base on configuration (Database.ReadOnly, allow store submission in database or not, ...) this factory selects appropriate storage for storing and manipulating submission data
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.SubmissionStorageFactory.GetStorage(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            This take "Database mode" and "form's setting to allow to store submission" into account to get the appropriate storage.
            </summary>
            <param name="formIden">The form identity.</param>
            <returns>ISubmissionStorage object.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.Internal.SubmissionStorageFactory.GetStorage``1">
            <summary>
            Gets the specified type storage.
            </summary>
            <typeparam name="TStorage">The type of the storage.</typeparam>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.ISubmissionStorage">
            <summary>
            Storage keeps visitor's submission data
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.ISubmissionStorage.Delete(EPiServer.Forms.Core.Models.FormIdentity,System.String)">
            <summary>
            Delete a submission.
            </summary>
            <param name="submissionId">The submission's Id.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.ISubmissionStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Loads the submission from storage.
            </summary>
            <param name="beginDate">The begin date.</param>
            <param name="endDate">The end date.</param>
            <returns>An list of form submission data.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.ISubmissionStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <summary>
            Loads list of submission from storage.
            </summary>
            <param name="submissionIds">List of submission's Ids.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.ISubmissionStorage.SaveToStorage(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Save a submission to permanent storage
            </summary>
            <param name="submission">The data.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.ISubmissionStorage.UpdateToStorage(System.Guid,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Update a submission data to permanent storage
            </summary>
            <param name="formSubmissionId">The form submission identifier.</param>
            <param name="formIden">The form unique identifier.</param>
            <param name="submission">The submission data.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.PermanentStorage">
            <summary>
            Base class to write/read EPiForm object to a permanent storage (SQL DB or File, ...)
            Concrete class of this PermanentStorage must mark [ServiceConfiguration(ServiceType = typeof(IPermanentStorage))]
            </summary>    
        </member>
        <member name="M:EPiServer.Forms.Core.Data.PermanentStorage.GetFormDbName(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Gets name of the form database.
            </summary>
            <returns>DB name for storing form post data.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.PermanentStorage.GetFormStore(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Return the DDS Store for this formIden
            </summary>
            <param name="formIden"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Data.SessionStorage">
            <summary>
            Storing/loading form submission data from Session.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Data.SessionStorage.UpdateToStorage(System.Guid,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.SessionStorage.SaveToStorage(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.SessionStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.DateTime,System.DateTime,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.SessionStorage.LoadSubmissionFromStorage(EPiServer.Forms.Core.Models.FormIdentity,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Data.SessionStorage.Delete(EPiServer.Forms.Core.Models.FormIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.DependCondition">
            <summary>
            enum represent a dependent condition Operator (in the Rule to evaluate depend value).
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Core.DependCondition.NotApplicable">
            <summary>
            If Editor does not choose anything, this will be default value.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.ElementBlockBase">
            <summary>
            Element is Block (in EditView). This is base class for all ElementBlock of Forms
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.ElementBlockBase.Label">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.ElementBlockBase.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <inheritdoc />
            <summary>Auto assign default name for newly created element.
            Set label for this element based on its content type (except CaptchaBlock and FormStepBlock, they have their own default label text)</summary>
        </member>
        <member name="M:EPiServer.Forms.Core.ElementBlockBase.GetElementInfo">
            <summary>
            This function will return the information of an element which can be used for rendering and data processing at client side.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.ElementBlockBase.op_Explicit(EPiServer.Core.ContentAreaItem)~EPiServer.Forms.Core.ElementBlockBase">
            <summary>
            helper cast function to convert ContentAreaItem into this ElementBlockBase
            </summary>
            <param name="contentAreaItem"></param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Forms.Core.ElementBlockBase.FormElement">
            <summary>
            Link to the FormElement model
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.ElementBlockBase.IsElementValidToSubmit">
            <summary>
            Indicates this element is valid to stored as submit data
            </summary>
            <returns>TRUE, this element is valid for storing to submitted data</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.ElementBlockBase.FindOwnerForm">
            <summary>
            Find form container block which contains this element.
            <remarks>This function works because we have assumption that FormElement is direct child of FormContainer,
            FormElementBlock is stored inside LocalFolder of FormContainerBlock</remarks>
            </summary>
            <param name="element">The FormEchwslement.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Events.FormsEventArgs">
            <summary>
            Event argument, will be passed to all Forms' events
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.FormsEventArgs.FormsContent">
            <summary>
            This can be casted to <see cref="T:EPiServer.Forms.Core.BlockBase"/>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.FormsEventArgs.Data">
            <summary>
            Additional arbitrary data of the event.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Events.FormsSubmittingEventArgs">
            <summary>
            Event argument of submitting process
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.FormsSubmittingEventArgs.CancelAction">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Events.FormsSubmittingEventArgs.CancelReason">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Events.FormsSubmittedEventArgs">
            <summary>
            Event argument of submission process
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Events.FormsEvents">
            <summary>
            Factory for all Event emitting of Forms
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.FormsEvents.Instance">
            <summary>
            Convenience access to the instance in the IOC container.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Events.FormsEvents.GetEventKey(System.String)">
            <summary>
            Return an unique object for <paramref name="stringKey"/>. This object will be the key of EventHandlerList Events
            </summary>
            <param name="stringKey"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Events.FormsEvents.GetEventHandler(System.String)">
            <summary>
            Get the handler from event key
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="E:EPiServer.Forms.Core.Events.FormsEvents.FormsStructureChange">
            <summary>
            Occur when FormStructure is subjected to change (new Element is added/removed to the FormContainer, and the Element or Published).
            newStructure of Forms will be passed via EventArg.Data
            </summary>
        </member>
        <member name="E:EPiServer.Forms.Core.Events.FormsEvents.FormsSubmitting">
            <summary>
            Occur when Visitor submitting data.
            The EventArgs can be cast to <see cref="T:EPiServer.Forms.Core.Events.FormsSubmittingEventArgs"/>
            </summary>
        </member>
        <member name="E:EPiServer.Forms.Core.Events.FormsEvents.FormsStepSubmitted">
            <summary>
            Occur when a FormStep is submitted and saved to database.
            The EventArgs can be cast to <see cref="T:EPiServer.Forms.Core.Events.FormsSubmittedEventArgs"/>
            </summary>
        </member>
        <member name="E:EPiServer.Forms.Core.Events.FormsEvents.FormsSubmissionFinalized">
            <summary>
            Occur when a Form is submitted (click on Submit button) and saved to database. This will only happen on last step submission.
            The EventArgs can be cast to <see cref="T:EPiServer.Forms.Core.Events.FormsSubmittedEventArgs"/>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Events.FormsEvents.RaiseEvent(System.String,EPiServer.Forms.Core.Events.FormsEventArgs)">
            <summary>
            Raises the specified forms event.
            </summary>
            <remarks>Currently, Forms do not support cancel event</remarks>
            <param name="eventKey">The event identifier.</param>
            <param name="eventArgs">The instance containing the event data.</param>
            <returns>True if the event did not cancel.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Events.FormsEvents.Dispose">
            <summary>
            Implemenation of <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Events.FormsEvents.Dispose(System.Boolean)">
            <summary>
            Actual implementation of Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:EPiServer.Forms.Core.Events.ICancellableEventArgs">
            <summary>
            Cancellable event will throw this kind of eventArgs
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.ICancellableEventArgs.CancelAction">
            <summary>
            Set value to abort the current event handling
            </summary>
            <remarks>Changing this value may not always change the behavior, see the specific event for details.</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Events.ICancellableEventArgs.CancelReason">
            <summary>
            Gets or sets the reason for cancel.
            </summary>
            <value>The cancel reason.</value>
        </member>
        <member name="T:EPiServer.Forms.Core.Feed.Internal.IFeed">
            <summary>    
            Represent a feed of key/value entries.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.Feed.Internal.IFeedItem">
            <summary>
            Represent one item of a Feed
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.Feed.Internal.IFeedProvider">
            <summary>    
            Provide Feeds for Forms. Forms will use Feed to display in EditView, or render list of options.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.IFormRepository">
            <summary>
            Provide service for accessing form objects, form infos (friendlyname, systemfield, ...)
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.IFormRepository.GetFormsInfo(System.String)">
            <summary>
            Get basic information of forms existing in the system.
            We ONLY find form in the root folder which designed for holding EPiServer Form.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.IFormRepository.GetDataFriendlyNameInfos(EPiServer.Forms.Core.Models.FormIdentity,System.Type[])">
            <summary>
            Get friendly name of form element name store in DDS.
            <remarks>This will also including SYSTEMCOLUMN_xxx because they are DATA field as well.</remarks>
            </summary>
            <param name="formIden"></param>
            <param name="formGuid">The form unique identity.</param>
            <param name="excludedElementBlockTypes">ElementBlock types we want to filter out from result. This can be an interface or Base class of ElementBlock</param>
            <returns>friendly name collection</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.IFormRepository.GetFriendlyNameInfos(EPiServer.Forms.Core.Models.FormIdentity,System.Type[])">
            <summary>
            This will inspect the Form's structure (GetAllInnerFormElementBlocks) and get information 
            of field name of elements in Form and its friendly name (BlockContent's name).
            <remarks>This should not include SYSTEMCOLUMN_xxx</remarks>
            </summary>
            <param name="formGuid">The form unique identity.</param>
            <param name="excludedElementBlockTypes">ElementBlock types we want to filter out from result. This can be an interface or Base class of ElementBlock</param>
            <returns>friendly name collection</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.IFormRepository.GetSystemFriendlyNameInfos">
            <summary>
            Get friendly name of Form's system elements.
            This returns friendly name for SYSTEMCOLUMN_xxx columns, they are DATA field as well.
            </summary>
            <returns>friendly name collection</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetFormsInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetDataFriendlyNameInfos(EPiServer.Forms.Core.Models.FormIdentity,System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetFriendlyNameInfos(EPiServer.Forms.Core.Models.FormIdentity,System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetFriendlyNameInfos(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Type[])">
            <summary>
            Get friendly name infomation of specified FormContainerBlock.
            </summary>
            <param name="container"></param>
            <param name="excludedElementBlockTypes"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetSystemFriendlyNameInfos">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.FormRepository.GetContentRecursive(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Get child contents which belong to a parent folder recursively.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="language">The language.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.IAppendExtraInfoToRedirection">
            <summary>
            Implement this interface for adding information to redirect URL after submission.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.Forms.Core.IAppendExtraInfoToRedirection.GetExtraInfo(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)" -->
        <member name="T:EPiServer.Forms.Core.IFormContainerBlock">
            <summary>
            Interface in Core, define some very basic rule for a FormContainerBlock
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IElementBlock">
            <summary>
            Interface in Core, define some very basic rule for a FormElementBlock
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IFormStepBlock">
            <summary>
            Interface to indicate a special block, the form step, separator of a form
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.ICaptchaElementBlock">
            <summary>
            Interface to indicate a special block, captcha, which will use to prevent Visitor from abusing the submission process
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IFileUploadElementBlock">
            <summary>
            Interface to indicate a special block, File upload, which accept binary data from Visitor
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.ISubmitButtonElementBlock">
            <summary>
            Interface to indicate a special block, Submit button, which send submission from Visitor to Server-side Controller
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.ISubmitButtonElementBlock.FinalizeForm">
            <summary>
            Determine this button will finalize the form or not.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.ISubmitButtonElementBlock.RedirectToPage">
            <summary>
            The content/page permanent Url this Form redirects to after submit.
            </summary>
            <remarks>For support redirecting to Commerce catalog.</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.ICustomFormatTypeElementBlock">
            <summary>
            Interface to indicate a special block should have different FormatType, so its data in FormSubmissionView can be rendered different
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.ICustomFormatTypeElementBlock.FormatType">
            <summary>
            What format (to render in FormSubmissionView) of this elementBlock's value
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IElementCustomFormatValue">
            <summary>
            FormElement implements this interface when you need to format submitted value before saving to PermanentStorage
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.IElementCustomFormatValue.GetFormattedValue">
            <summary>
            Get formatted value for saving into PermanentStorage
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IElementDependant">
            <summary>
            <see cref="T:EPiServer.Forms.Core.Models.IFormElement"/> implements this interface can be show/hide depend on the value of <see cref="T:EPiServer.Forms.Core.IElementDependee"/>.
            <example>FormStep is an example, it depends on TextBox (IElementDependee) </example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IElementDependant.DependField">
            <summary>
            Which other element this should depend on
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IElementDependant.DependCondition">
            <summary>
            Type of dependency.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IElementDependant.DependValue">
            <summary>
            If DependRule is Value, we should compare the value with this property
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IElementDependee">
            <summary>
            Element with this interface can be set as dependee (it will be displayed in the SelectDependentField dialog in EditView).
            <example><see cref="!:TextboxElementBlock"/> is one kind of IElementDependee. FormStep can be shown/hide depend on TextBox's value</example>
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.IElementRequireClientResources">
            <summary>
            FormElement implements this interface has chance to register itself extra resources (JS and CSS)
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.IElementRequireClientResources.GetExtraResources">
            <summary>
            Extra resources for this FormElement. These resources will be registered along with Form's resources
             arrRes.Add(new Tuple{string, string}("script", publicVirtualPath + "/ClientResources/ViewMode/jquery-ui.min.js"));
             arrRes.Add(new Tuple{string, string}("css", publicVirtualPath + "/ClientResources/ViewMode/jquery-ui.min.css"));
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Autofill.AutofillService">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Autofill.AutofillService.GetSuggestedValues(EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo},EPiServer.Forms.Core.ElementBlockBase,EPiServer.Forms.Core.IFormContainerBlock,System.Web.HttpContextBase)">
            <summary>
            Gets all suggested values by the given field mapping key from registered external system
            </summary>
            <param name="externalSystemCode">External system code</param>
            <param name="fieldMappingKey">Field mapping key</param>
            <returns>Collection of suggested string</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Autofill.AutofillService.GetAllAutofillProviders">
            <summary>
            Activate all IAutofillProvider
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Autofill.IAutofillElement">
            <summary>
            Form Element implement this interface should have default value automatically filled by result of method GetAutofillValues()
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Autofill.IAutofillProvider">
            <summary>    
            This provider should provide suggestion base on input (which is datasource, columnIds, mapping information of FormElement)
            The suggestion will be bound to the FormElement in ViewMode.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Autofill.IAutofillProvider.GetSuggestedValues(EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo},EPiServer.Forms.Core.ElementBlockBase,EPiServer.Forms.Core.IFormContainerBlock,System.Web.HttpContextBase)">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            Returns a list of suggested values by field mapping key collection
            </summary>
            <param name="remoteFieldInfos">Collection of column ids</param>
            <returns>Collection of suggested value</returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ContentLoaderService">
            <summary>
            Serves as an abstraction layer on top of content repositories.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ContentLoaderService.Get(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the content from ContentReference. Try to get the localized one if possible, can fallback to master language if not found.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.DataSubmissionService">
            <summary>    
            Class for performing data submit.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.PerformDataSubmit(System.Collections.Specialized.NameValueCollection,System.Web.HttpContextBase,System.Web.Mvc.ControllerBase)">
            <summary>
            Perform data submit
            </summary>
            <param name="rawSubmittedData">The raw submitted data.</param>
            <param name="httpContext">The HTTP context.</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.RemoveUploadedFilesInStep(EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Core.Models.IFormStep)">
            <summary>
                Remove uploaded files in specific step when validation fails
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.RemoveUploadedFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                 Remove specific upload files with given paths
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.RemoveRedundantData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Remove the redundant data bases on the field's dependencies
            </summary>
            <param name="fullFormData"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.RemoveDataElementOfInactiveSteps(EPiServer.Forms.Core.Models.Submission@,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
                The values of elements in inactive steps are considered null. Those values are removed from submission data.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetValidatableElementsData(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Get validatable elements' data from the validation data based on dependencies.
            </summary>
            <param name="validationData">validationData</param>
            <param name="submissionDataFullForm"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.BuildReturnResultForSubmitAction(System.Boolean,System.Boolean,System.String,System.Web.HttpContextBase,EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Collections.Generic.Dictionary{System.String,System.Object},EPiServer.Forms.Core.Models.Internal.SubmissionInfo,EPiServer.Forms.Core.Models.Submission,System.Boolean,System.String)">
            <summary>
            Depend on <paramref name="isJavaScriptSupport"/>, we know client browser support JavaScript or not.
            If browser having JS, we return the JsonResult.
            Without JS, we tell non-JS-browser to redirect to desire page.
            </summary>
            <param name="isJavaScriptSupport"></param>
            <param name="isSuccess"></param>
            <param name="message"></param>
            <param name="httpContext"></param>
            <param name="formContainer"></param>
            <param name="additionalParams">additional params to append to the <paramref name="redirectUrl"/></param>
            <param name="submissionInfo"></param>
            <param name="submission"></param>
            <param name="isProgressiveSubmit"></param>
            <param name="redirectUrl"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.BuildReturnResultForSubmitAction(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Web.HttpContextBase,EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Collections.Generic.Dictionary{System.String,System.Object},EPiServer.Forms.Core.Models.Internal.SubmissionInfo,EPiServer.Forms.Core.Models.Submission,System.Boolean,System.String)">
            <summary>
            Depend on <paramref name="isJavaScriptSupport"/>, we know client browser support JavaScript or not.
            If browser having JS, we return the JsonResult.
            Without JS, we tell non-JS-browser to redirect to desire page.
            build single message by joining messages with <![CDATA[<br/>]]> 
            </summary>
            <param name="isJavaScriptSupport"></param>
            <param name="isSuccess"></param>
            <param name="messages"></param>
            <param name="httpContext"></param>
            <param name="formContainer"></param>
            <param name="additionalParams">additional params to append to the <paramref name="redirectUrl"/></param>
            <param name="submissionInfo"></param>
            <param name="submission"></param>
            <param name="isProgressiveSubmit"></param>
            <param name="redirectUrl"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.BuildSubmissionResultData(System.Boolean,System.String,EPiServer.Forms.Core.Models.Internal.SubmissionInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.String,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Setting up data needed for generating forms and processing user requests in FormContainerBlockController.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetSimplifiedUrlReferrer(System.Web.HttpRequestBase)">
            <summary>
            Get simplified Url Referrer from given request, add FormCurrentStepIndex and FormSubmissionId to it.
            </summary>
            <returns>a string of UrlReferrer has query string of <see cref="F:EPiServer.Forms.Constants.FormCurrentStepIndex"/> and <see cref="F:EPiServer.Forms.Constants.FormSubmissionId"/>.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetSubmissionData(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Web.HttpContextBase,System.Boolean)">
            <summary>
            Convert submitted raw data from client side to Submission object.
            All SYSTEMCOLUMNs are calculated and added to the Submission
            </summary>
            <param name="rawSubmittedData">Submitted data collection.</param>
            <param name="formContainer">Form object.</param>
            <param name="httpContext">The HttpContext where the form presents..</param>
            <param name="isFinalized">The submitted data.</param>
            <returns>Data represented a post.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.AddSystemFieldsToSubmission(EPiServer.Forms.Core.Models.Submission@,EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Web.HttpContextBase,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Adding system fields to the submission.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.IsFirstStep(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Verify the current step is the first one or not.
            </summary>
            <param name="rawSubmittedData">Submitted data collection.</param>
            <param name="formContainer">Form object.</param>
            <returns>True if the current step is the first, otherwise False.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetCurrentStep(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Gets current form step object.
            </summary>
            <param name="rawSubmittedData">Submitted data collection.</param>
            <param name="formContainer">Form object.</param>
            <returns>Form step object.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetCurrentStepIndex(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Base on raw data from client, gets current form step index. This is zero-base.
            </summary>
            <param name="rawSubmittedData">Submitted data collection.</param>
            <param name="formContainer">Form object</param>
            <returns>Zero-base step index of the form. If data in <paramref name="rawSubmittedData"/> is malform (negative number, or bigger then total steps count), return -1</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.StorePostedFile(System.Int64,System.Web.HttpPostedFileBase,EPiServer.Core.ContentReference)">
            <summary>
            Store posted file as <see cref="T:EPiServer.Core.IContentMedia"/>.
            </summary>
            <param name="postId">The post's Id for separating files between posts.</param>
            <param name="postedFile">The posted file for storing.</param>
            <param name="folderLink">The folder's contentLink to store the file in.</param>
            <returns>The information of stored file.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.InsertPostedFilesToSubmittedData(System.Collections.Generic.IEnumerable{System.Tuple{System.String,EPiServer.Core.ContentReference,System.Web.HttpPostedFileBase}},System.Web.HttpContextBase,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            Gets posted files
            </summary>
            <param name="elementFiles">File collection</param>
            <param name="httpContext">The HttpContext where the form presents.</param>
            <param name="submittedData">Submitted data</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetOrCreateFolderForStoringFiles(EPiServer.Core.ContentReference)">
            <summary>
            Return folder for storing upload files. If the folder does not exist, create new one
            and remove Read access right of Every One role.
            See the security issue: https://jira.ep.se/browse/AFORM-1312
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetValidationData(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Get form elements data to validate.
            </summary>
            <param name="submittedData">Submission data collection.</param>
            <param name="formContainer">Form object.</param>
            <returns>Form elements data in the given step.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.UpdateVisitorData(EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.Submission@)">
            <summary>
            Update visitor data for submission on server side if its value does not fill on client side
            </summary>
            <param name="formContainer">Current form container block element</param>
            <param name="submissionData">Current submission</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.StoreSubmissionData(System.String,EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Store (Update or save new) submission data to permanent Storage
            </summary>
            <param name="sFormSubmissionId"></param>
            <param name="formIden"></param>
            <param name="submission"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.RemoveOverlappingFilesBeforeUpdate(EPiServer.Forms.Core.Data.ISubmissionStorage,EPiServer.Forms.Core.Models.FormIdentity,System.String,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Remove uploaded file(s) before updating data to avoid file overlapping.
            </summary>
            <param name="submissionStorage"></param>
            <param name="formIden"></param>
            <param name="submissionId"></param>
            <param name="submissionData"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.IsLatestStep(System.Collections.Specialized.NameValueCollection,EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Verify the current step is latest or not.
            </summary>
            <param name="rawSubmittedData">Submitted data collection.</param>
            <param name="formContainer">Form object.</param>
            <returns>True if the current step is latest, otherwise False.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.MappingElementPostedFiles(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Web.HttpContextBase)">
            <summary>
            Mapping element with posted file
            </summary>
            <param name="formContainer">The form block which has the upload elements.</param>
            <param name="httpContext">The HttpContext where the form presents.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.IsAllStepsAreNotLinked(EPiServer.Forms.Core.Models.IForm)">
            <summary>
            Verify this Form has all steps not attached to any page.
            </summary>
            <returns>true if no steps attached to any page.</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.IsMalFormSteps(EPiServer.Forms.Core.Models.IForm)">
            <summary>
            Check whether a Form has steps each attached to a page.
            </summary>
            <remarks>true if there is a step does not attach to any page but others do.</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetSubmittableStatus(EPiServer.Forms.Core.Models.IForm,System.Web.HttpContextBase)">
            <summary>
            Returns status whether the Form can be submitted or not bases on its settings
            </summary>
            <param name="form">The form with its settings.</param>
            <param name="context">The HttpContext where the form presents.</param>
            <returns>A json object contains status info e.g. {"Submittable": false, "Message": "You must be logged in to submit the form."}</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.GetReadOnlyModeMessage">
            <summary>
            Get message when database mode is read only.
            We will change this method in the near future, to be able to handle messages for Forms better in a bigger picture.
            This is just a quick fix for one problem we are facing up with. So it is highly recommended that you should not override this method
            and/or restrict the use of this method.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.HasAlreadyPosted(System.Guid,System.Web.HttpContextBase)">
            <summary>
            Indicates if the Visitor already has submitted data to a Form.
            If Visitor posted for <paramref name="formId"/> once AND finalized the submission, this function will return true
            </summary>
            <param name="formId">The id of the Form</param>        
            <param name="httpContext">The HttpContext where the form presents.</param>
            <returns>True if the user already has posted/finalized the specific Form</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DataSubmissionService.IsAnonymousAccess(System.Web.HttpContextBase)">
            <summary>
            Checks if the current access is anonymous
            </summary>
            <param name="httpContext"></param>
            <returns>
            true if the current access is anonymous; otherwise, false.
            </returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.ConditionCombination">
            <summary>
            How to combine conditions of IEnumerable <see cref="T:EPiServer.Forms.Core.Internal.Dependency.ICondition"/>
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Core.Internal.Dependency.ConditionCombination.All">
            <summary>
            Condition considered met when all conditions are satisfied
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Core.Internal.Dependency.ConditionCombination.Any">
            <summary>
            Condition considered met when any condition is satisfied
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions">
            <summary>
            Extensions for form's dependency
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.IsValid(EPiServer.Forms.Core.Internal.Dependency.ICondition)">
            <summary>
            Return true if FieldName is not null or empty and Operator is not NotApplicable
            Used to filter out wasted conditions
            </summary>
            <param name="condition">Condition to be checked</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.GetValidDependencies(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant)">
            <summary>
             Get all valid dependencies. Dependencies considered invalid are:
            	- Dependency whose conditions' elements are deleted
            	- Dependency whose DependCondition type is <see cref="F:EPiServer.Forms.Core.DependCondition.NotApplicable"/>
            	- Dependency which is neither in current step nor previous steps
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.IsExistedInFormContainer(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.IFormElement})">
            <summary>
            Check if an element existed in a form container
            </summary>
            <param name="contentLink"></param>
            <param name="allFormElements">all element presented in form</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.GetAction(System.String)">
            <summary>
            Get implementation of dependency action based on action name
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.GetStepIndex(EPiServer.Forms.Core.ElementBlockBase,System.Collections.Generic.List{EPiServer.Forms.Core.Models.IFormStep})">
            <summary>
            Get step index of element in a form container
            </summary>
            <param name="element">element to find step index</param>
            <param name="formSteps">all forms step in form container</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.HasAnyValidDependency(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant)">
            <summary>
            Return true if having any valid dependency configuration
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyExtensions.HasDependency(EPiServer.Forms.Core.ElementBlockBase)">
            <summary>
            Check whether an element has dependency settings regardless of being valid or not.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.ShouldValidate(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
            Check if the field should be validated or not while depending on others
             </summary>
             <param name="fieldDependency">form element</param>
             <param name="fullFormData">full form submission data</param>
             <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.ShouldSubmitData(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check if the field should be submitted or not while depending on others
            </summary>
            <param name="fieldDependency">form element</param>
            <param name="fullFormData">full form submission data</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.IsDependencyRuleSatisfied(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check if the submission data is satisfied with list of conditions or not
            </summary>
            <param name="dependency">form field dependency</param>
            <param name="formData">form submission data</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.HasCircularDependency(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant)">
            <summary>
            Check if an element having circular dependency
            </summary>
            <param name="fieldDependency">current editing element</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.BuildDependencyList(EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant,System.Collections.Generic.List{EPiServer.Forms.Core.Internal.Dependency.ICondition}@)">
            <summary>
            Get all (both direct and indirect) dependencies for IMultipleConditionsElementDependant
            </summary>
            <param name="dependency"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.DependencyService.AddElementsInStepToDependeesList(EPiServer.Forms.Core.Models.IFormStep,System.Collections.Generic.List{EPiServer.Forms.Core.Models.IFormElement}@,EPiServer.Core.IContent)">
            <summary>
            Add elements in step to dependees list, avoiding self reference and circular reference
            </summary>
            <param name="step"></param>
            <param name="elements"></param>
            <param name="excludeContent"></param>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.ICondition">
            <summary>
            Interface for the Dependency Condition. A Dependant can have multiple conditions.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ICondition.Field">
            <summary>
            The dependee element
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ICondition.Operator">
            <summary>
            Condition name such as 'Equals', 'NotEquals', 'Contains' etc.. 
            Convert from enum <see cref="T:EPiServer.Forms.Core.DependCondition"/> to text
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ICondition.FieldValue">
            <summary>
            Value to compare
            </summary>        
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.Condition">
            <summary>
            The model of a Dependency Condition.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.Condition.Field">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.Condition.Operator">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.Condition.FieldValue">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.IValidatableDependencyAction">
            <summary>
            Implementing actions will determine if a dependent element should be validated or not when its dependency rules are met
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.IValidatableDependencyAction.ShouldPerformValidation(System.Boolean)">
            <summary>
            Determine whether or not a dependent element is validatable.
            For example, if a TextboxElementBlock (named Element_1) is configured to only Show when condition is met and Element_1 is only accepted email format (Email validator)
            	When dependency condition is met, Element_1 is shown and validation for email is then performed.
            	When dependency condition is NOT met, Element_1 is hidden and validation for email is not performed.
            </summary>
            <param name="isDependencySatisfied"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.ISubmittableDependencyAction">
            <summary>
            Implementing actions will determine if a dependent element should be included in submission when dependency rules are met 
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.ISubmittableDependencyAction.ShouldSubmitData(System.Boolean)">
            <summary>
            Determine whether or not a dependent element is submittable based on state of dependency. 
            For example:
            	With built-in ShowAction, data is not submitted to server when dependency condition is NOT met (field is not shown in form).
            	With built-in HideAction, data is not submitted to server when dependency condition is met (field is not shown in form).
            </summary>
            <param name="isDependencySatisfied"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction">
            <summary>
            An interface for actions of dependency. An action must have a corresponding method at clientside, which will be executed when the dependency state changed
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction.DisplayName">
            <summary>
            Display name of the action, show to Editor
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction.Order">
            <summary>
            Order in which the action will be listed in the dropdown for Editor
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction.Name">
            <summary>
            Name of the action. This should be unique among others
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction.ClientsideAction">
            <summary>
            Name of the method at clientside, which will be called when dependency state changes.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.ShowAction">
            <summary>
            If conditions is satisfied, show the dependant, validate it normally, include the dependant in the submission
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ShowAction.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ShowAction.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ShowAction.Order">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.ShowAction.ClientsideAction">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.ShowAction.ShouldSubmitData(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.ShowAction.ShouldPerformValidation(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.HideAction">
            <summary>
            If conditions is satisfied, hide the dependant, does not include in submission, does not validate it
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.HideAction.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.HideAction.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.HideAction.Order">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.HideAction.ClientsideAction">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.HideAction.ShouldSubmitData(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.Dependency.HideAction.ShouldPerformValidation(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.IDependOnPreviousSteps">
            <summary>
            Interface to indicate a special block that depends on value of elements in previous steps (like step, paragraph blocks)
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant">
            <summary>
            Dependant condition for form's field.
            Each element of form can be set to show/hide (or perform other action) based on list of conditions (multi-dependencies)
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant.Conditions">
            <summary>
            List of dependee elements along with conditions
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant.ConditionCombination">
            <summary>
            <see cref="T:EPiServer.Forms.Core.Internal.Dependency.ConditionCombination"/>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.Dependency.IMultipleConditionsElementDependant.SatisfiedAction">
            <summary>
            Action will be taken when dependency changed. This should be full name of class (including namespace) inherited from <see cref="T:EPiServer.Forms.Core.Internal.Dependency.IDependencyAction"/>
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService">
            <summary>
            Service for working with ExternalSystem (register, activate, check if existing).
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.WorkingExternalSystems">
            <summary>
            Return all activated, registered external systems.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.HasExternalSystem">
            <summary>
            Check if there is an implement of IExternalSystem.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.ActivateFromTypes">
            <summary>
            Create instances of IExternalSystem by using reflection.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.RegisterExternalSystem(EPiServer.Forms.Core.Internal.ExternalSystem.IExternalSystem)">
            <summary>
            Explicitly register an external system.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.UnregisterExternalSystem(EPiServer.Forms.Core.Internal.ExternalSystem.IExternalSystem)">
            <summary>
            Remove an external system from working context.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.GetExternalSystem(System.String)">
            <summary>
            Get an IExternalSystem (registered, activated) by id.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.ExternalSystemService.GetAllExternalSystems">
            <summary>
            Get all working ExternalSystem (activated, registered).
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource">
            <summary>    
            Represent a table in external system.
            <example>Silverpop Database, Marketo Datasource is a table</example>
            Table has columns (<seealso cref="P:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource.Columns"/>)
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource.OwnerSystem">
            <summary>
            Which ExternalSystem this Datasource belong to
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource.Id">
            <summary>
            Unique identifier of this data source
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource.Name">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource.Columns">
            <summary>
            Dictionary of column id, column friendlyname
            This will be a list of fields (in external system) that a FormElement can be mapped to.
            <example>This will return a list, that has items 
            [{Key="democonnector_email", Value="Email"}, 
            {Key="democonnector_firstname", Value="First name"}].
            That feed will be used to bind to the UI to configure field mapping of each FormElement
            </example>
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.Datasource">
            <summary>    
            Default class for a Datasource
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.Datasource.OwnerSystem">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.Datasource.Id">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.Datasource.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.Datasource.Columns">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService">
            <summary>
            External FieldMapping Service
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetActiveFieldMappingTable(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Inspect the Form's Elements, extract mapping information for the current active Datasource.
            <example>
                [   
                    {"__field_100", { "System", "Datasource", "ExtSystemEmail" } },
                    {"__field_101", { "System", "Datasource", "ExtSystemPhone" } },
                ] 
            </example>
            </summary>
            <param name="formIden"></param>                
            <returns>mapping of FormElement (fieldcode) to ExternalSystem's columnId</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetActiveRemoteFieldInfo(EPiServer.Forms.Core.Models.IFormElement,EPiServer.Forms.Core.Internal.ExternalSystem.IDatasource)">
            <summary>
            get all active columnIds, which is mapped with a input form element.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetAllExternalSystems">
            <summary>
            Get all ExternalSystem which are registered, activated.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetAllExternalSystemsDatasources">
            <summary>
            Return all datasource of all registered external systems
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetDatasource(System.String,System.String)">
            <summary>
            Get datasource by systemId and datasourceId
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalFieldMappingService.GetSelectedDatasource(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Get connected data source, field mappings data that stored in Form container and Form element
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalSystem">
            <summary>    
            Customer's module implement this interface to represent a System which Form should connect to.
            An ExternalSystem provides alien remote fields for mapping with FormElement, alien datasource for mapping with FormContainer.    
            <example>Marketing Automation Silverpop is a system</example>
            <example>MAI has a MAISystem implemented this interface.
            MAI will have ability to map a field of Forms (let say "email") to MA provider field (let say Silverpop's "SYS_EMAIL").
            Later on, when a Submission is created, Visitor put "example@ep.se" to Forms's "email", 
            MAI's Actor can use the ExternalFieldMappingTable and the Submission.Data to set Silverpop["SYS_EMAIL"] = "example@ep.se"</example>
            FormsCore injects a configurable UI element (a special property) into each FormContainer and FormElement UI in EditView.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalSystem.Id">
            <summary>
            An unique identifier for this module mapping. This should be unique and not a collision between modules
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.ExternalSystem.IExternalSystem.Datasources">
            <summary>
            Returns a list of data source entries (MAI databases (tables) for example)
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo">
            <summary>    
            This class represents a field in a remote system.
            De/Serialize from/to rawstring "Silverpop$$$SilverpopTable###email" to object.
            An example is a field name "email", in the datasource Silverpop (data table), in the Silverpop system.
            The rawstring is used to store in Episerver PropertyString.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo.FromStringToArray(System.String)">
            <summary>
            Parse this string "HardcodeSystem$$$HardcodeSystemDS###alwaysHardcode|||StaticAutofillSystem$$$StaticAutofillDatasource1###staticds1email|||StaticAutofillSystem$$$StaticAutofillDatasource2###staticds2bio"
            to array of <see cref="T:EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo"/> object
            </summary>
            <param name="rawDataStringOfArray"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.FormBusinessService">
            <summary>    
            Validate/Calculate step for display
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.ReCalculateStepIndexIfNeeded(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.Submission,System.Int32,System.Guid,System.Boolean)">
            <summary>
                Re-calculate step index if needed based on step dependency satisfaction
            </summary>
            <param name="formIdentity">The form identity.</param>
            <param name="formContainer">The form container.</param>
            <param name="submissionData">The submission data.</param>
            <param name="stepIndex">Index of the step.</param>
            <param name="formSubmissionId">The form submission identifier.</param>
            <param name="nextOrPrevious">if set to <c>true</c> calculate for next step, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.ReCalculateStepIndexIfNeeded(EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.Submission,System.Int32,System.Boolean)">
            <summary>
               Re-calculate step index if needed based on step dependency satisfaction
            </summary>
            <param name="formContainer">The form block container</param>
            <param name="submissionData">The full form submission data</param>
            <param name="stepIndex">Index of the step</param>
            <param name="nextOrPrevious">if set to <c>true</c> calculate for next step, otherwise false.</param>
            <returns>The proper step index after re-calculating</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetInactiveSteps(System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
                Return a list of inactive steps
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.IsStepValidToDisplay(EPiServer.Forms.Core.Models.FormIdentity,EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Int32,System.String)">
            <summary>
            Determines whether the step is valid to display or not.
            </summary>
            <param name="formIdentity">The form identity.</param>
            <param name="formContainer">The form container.</param>
            <param name="stepIndex">Index of the step.</param>
            <param name="formSubmissionId">The form submission identifier.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.NeedCheckDependCondition(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Int32,EPiServer.Forms.Core.IElementDependant@)">
            <summary>
            Whether need to check depend condition or not.
            </summary>
            <param name="formContainer">The form container.</param>
            <param name="stepIndex">An in-range step index.</param>
            <param name="dependentObj">The dependent object.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.IsMatchDependCondition(EPiServer.Forms.Core.IElementDependant,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check the prior steps data matches with given condition.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.IsConditionMatched(EPiServer.Forms.Core.IElementDependant,System.Object)">
            <summary>
                Check the dependency with actual submitted value.
                Return true if dependency condition is satisfied. Otherwise false.
            </summary>
            <param name="singleDependant">The dependency configuration</param>
            <param name="submittedFieldValue">The submitted value of depdend field.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.IsConditionMatched(EPiServer.Forms.Core.Internal.Dependency.ICondition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check the prior steps data matchs given condition.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetAllDependees(EPiServer.Core.ContentReference)">
            <summary>
            Get all element dependees by the given content link.
            If the given <paramref name="editingContentLink"/> is an instance of FormStepBlock, return all elements (dependees) from previous steps only.
            </summary>
            <param name="editingContentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetPlaceholders(EPiServer.Core.ContentReference)">
            <summary>
            Get all placeholder by the given content link
            </summary>
            <param name="editingContentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetOwnerForm(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Find form container block which contains this element.
            <remarks>This function works because we have assumtion that FormElement is direct child of FormContainer,
            FormElementBlock is stored inside LocalFolder of FormContainerBlock</remarks>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetFormElementBlock(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Find element block from metadata.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.BuildFormModel(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Boolean)">
            <summary>
            TECHNOTE: This is current LIMITATION, we need to call this method before accessing Form property
            Build the IForm model from Form block
            </summary>
            <param name="formContainerBlock"></param>
            <param name="buildForAllElements">put TRUE to build for all elements, regardless publish visibility or personalization content condition. By default, only displayable elements of form are process</param>
            <remarks>This should be implemented by a FormBuilder</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.BuildStepsAndElements(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Boolean)">
            <summary>
            Iterating item blocks and pupulating the form' steps and elements
            </summary>
            <param name="formContainerBlock"></param>
            <param name="buildForAllElements">put TRUE to build for all elements, regardless publish visibility or personalization content condition. By default, only displayable elements of form are process</param>
            <remarks>Suppose that each FormStep groups all the elements below it but still above the next down FormStep.
            There is a case that no FormStep exists then adding a fake one. Elements become orphan if no FormStep stands above them.</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.CreateVirtualStep(System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.IFormElement})">
            <summary>
            Create a virtual step which contains specified elements.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.LinkStepAndItsElements(EPiServer.Forms.Core.Models.IFormStep,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.IFormElement})">
            <summary>
            Link elements and step together, assign elements belong to the step
            </summary>
            <param name="step"></param>
            <param name="elements"></param>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetDisplayableFormElementBlocks(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Return all Published, visible (match current Personalization Content condition) FormElementBlock of this FomrContainer
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetAllInnerFormElementBlocks(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Return all FormElementBlock of this FomrContainer, regardless the publish, visibility status or personalization content condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetElementContentReferenceFromName(System.String)">
            <summary>
            Gets FormElement's ContentReference from field name.
            </summary>
            <param name="fieldName">Name of the field. This used to use in clientside DOM rendering</param>
            <returns>ContentReference associated with the fieldName</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetFormElementBlocks(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Boolean)">
            <summary>
            Get Form element blocks
            </summary>
            <param name="formContainerBlock"></param>
            <param name="getAllElements">Get all items in the ElementsArea or not, default is false</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetFormElementExtraResources(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Get extra resources for elements in the form
             arrRes.Add(new Tuple{string, string}("script", publicVirtualPath + "/ClientResources/ViewMode/jquery-ui.min.js"));
             arrRes.Add(new Tuple{string, string}("css", publicVirtualPath + "/ClientResources/ViewMode/jquery-ui.min.css"));
            </summary>
            <param name="formContainerBlock"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.ToHtmlStringWithFriendlyUrls(EPiServer.Core.XhtmlString)">
            <summary>
            Convert UrlFragment to friendly url and return a HTML-encoded string
            </summary>
            <param name="xhtmlString"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetFileUploadElementNames(EPiServer.Forms.Core.Models.FormIdentity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find Fileupload element in <param name="elementNames"></param> and return their name.
            </summary>
            <param name="formIden"></param>
            <param name="elementNames"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.GetSearchableElementNames(EPiServer.Forms.Core.Models.FormIdentity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Check <param name="elementNames"></param> and return searchable element name.
            </summary>
            <param name="formIden"></param>
            <param name="elementNames"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.FormBusinessService.MoveFormElementIntoFormAssetFolder(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Check form items in ElementsArea, if an item is not in Form's asset folder then move it into that folder.
            </summary>
            <param name="formContainerBlock">The Form block for checking.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.JsonObjectConverter">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            Convert object as List of KeyValuePair&lt;string, object&gt; to single JSON object
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.PlaceHolder">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            Internal DTO object for replacing text holder with actual value.
            <example>In text template, we have "Hello #email#". Using a placeholder (Key=email, value=lockevn@ep.se), we can render a text with #email# replaced by lockevn@ep.se, result in "Hello lockevn@ep.se"</example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.PlaceHolder.Key">
            <summary>
            Placeholder key
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.PlaceHolder.Value">
            <summary>
            Placeholder value
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.IPlaceHolderProvider">
            <summary>
            Provider implement this interface have chance to take part in processing PlaceHolders
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.IPlaceHolderProvider.Order">
            <summary>
            Priority of the PlaceHolderProvider to process AvailablePlaceHolders
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.IPlaceHolderProvider.ExtraPlaceHolders">
            <summary>
            custom PlaceHolders will be merged into AvailablePlaceholders
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.IPlaceHolderProvider.ProcessPlaceHolders(System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Internal.PlaceHolder},EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.Boolean)">
            <summary>
            Process the placeHolder on demand. Normally, provider implementation should process its own ExtraPlaceHolders only.
            </summary>
            <param name="availablePlaceHolders"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider">
            <summary>
            Bind values for PlaceHolder.
            PlaceHolder_for_FormElement will be replaced with field value.
            Provide one more calculated Extra PlaceHolder: "summary"
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider.ExtraPlaceHolders">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider.Order">
            <summary>
            Default Order is 1000
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider.ProcessPlaceHolders(System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Internal.PlaceHolder},EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider.GetFriendlySummaryText(System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo},System.String,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission)">
            <summary>
            Provide a summary text of
            key1: value2 _separator_
            key2: value2 _separator_
            </summary>
            <param name="friendlyNames"></param>
            <param name="lineSeparator">to separate each line. Default is Environment.NewLine</param>
            <param name="requestBase"></param>
            <param name="submissionData">to take value from</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.DefaultPlaceHolderProvider.GetFriendlySummaryText(System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo},System.Boolean,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.String)">
            <summary>
            Provide a summary text of
            key1: value2 _separator_
            key2: value2 _separator_
            </summary>
            <param name="friendlyNames"></param>
            <param name="performHtmlEncode">Perform HTML encode for field mapping data or not.</param>
            <param name="requestBase"></param>
            <param name="submissionData">to take value from</param>
            <param name="lineSeparator"><optional> to separate each line </optional></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.PlaceHolderService">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetExtraPlaceHolders">
            <summary>
            Gets list of extra placeholders (which are not tranformed from FormElements)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetFormElementsPlaceHolders(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Get PlaceHolders from all FormElements of a specific Form
            </summary>
            <param name="formIden"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetFormElementsPlaceHolders(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Get PlaceHolders from all FormElements of a specific Form
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetAllPlaceHolderProviders">
            <summary>
            Get all classes implement IPlaceHolderProvider in this runtime, and order by its Order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetAllAvailablePlaceHolders(EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.Boolean,System.Boolean)">
            <summary>
            Get all PlaceHolders that can be replace for a Form (including predefined, custom from 3rd party, and from FormElements)
            </summary>
            <param name="formIden"></param>
            <param name="requestBase"></param>
            <param name="submissionData"></param>
            <param name="calculatePlaceHolderValue"></param>
            <param name="performHtmlEncode"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetAllAvailablePlaceHolders(EPiServer.Forms.Implementation.Elements.FormContainerBlock,System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.Boolean,System.Boolean)">
            <summary>
            Get all PlaceHolders that can be replace for a Form (including predefined, custom from 3rd party, and from FormElements)
            </summary>
            <param name="container"></param>
            <param name="requestBase"></param>
            <param name="submissionData"></param>
            <param name="calculatePlaceHolderValue"></param>
            <param name="performHtmlEncode"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.Replace(System.String,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Internal.PlaceHolder},System.Boolean)">
            <summary>
            Replace all of the placeholder key occurences inside the specified template text with corresponded placeholder values
            </summary>
            <param name="template">The template with placeholder keys inside</param>
            <param name="placeHolders">The sequence of placeholders (with values) to use</param>
            <param name="performHtmlEncode">The value indicating whether placeholders should be HTML encoded</param>
            <returns>Text with all placeholder keys replaces by placeholder value</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.PlaceHolderService.GetFriendlyNamePlaceHolders(System.Web.HttpRequestBase,EPiServer.Forms.Core.Models.Submission,System.Collections.Generic.IEnumerable{EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo},System.Boolean)">
            <summary>
            Build collection of placeholder. Key is the <paramref name="friendlyNames"/> of the formElement. Value of the placeholder will be taken from <paramref name="submissionData"/>
            </summary>
            <param name="requestBase"></param>
            <param name="submissionData"></param>        
            <param name="friendlyNames">Collection of form element with friendly name.</param>        
            <param name="performHtmlEncode"></param>        
            <returns>Collection of placeholder, with value filled from <paramref name="submissionData"/></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.ProgressiveSubmitInfoService">
            <summary>
            Internal use only
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ProgressiveSubmitInfoService.GetProgressiveSubmitInfo(System.Guid,System.Web.HttpContextBase)">
            <summary>
            Get progressive submit information.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ProgressiveSubmitInfoService.SetProgressiveSubmitInfo(System.Guid,System.Web.HttpContextBase,EPiServer.Forms.Core.Models.Internal.ProgressiveSubmitInfo)">
            <summary>
            Set progressive submit information for the form.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.ProgressiveSubmitInfoService.GetProgressiveSubmitCookieKey(System.Guid,System.String)">
            <summary>
            Get progressive submit cookie key. This Cookie is used to keep track Form-Visitor relation (submit or not, progressive in progress, is finalized)
            </summary>
            <param name="formContentGuid"></param>
            <param name="visitorIdentifier"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider">
            <summary>    
            Default class for identifying a visitor.
            Have a simple Identifying visitor mechanism: set a simple cookie to identify visitor for Forms.
            Cookie lasts for 1 year.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.SEPARATOR">
            <summary>
            Separator for BrowserID and UserID
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.Id">
            <summary>
            "Default". Unique identifier of this provider.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.Order">
            <summary>
            Default Order is 1000
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.Context">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.GetVisitorIdentifier">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.SetVisitorIdentifier(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.BuildVisitorIdentifier(System.String,System.String)">
            <inheritdoc />
            <summary>
            Visitor identifier is a "string".
            Anonymous visitor: it will be a GUID (so can be said == BrowserID)
            Logined user: it will be a GUID:username (so can be said == User_on_BrowserID)
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.DefaultVisitorIdentifyProvider.GetCurrentUserID">
            <summary>
            Return current Episerver username, if visitor logged in as an User
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider">
            <summary>    
            This provider inspects visitor information (via HttpContext) to identify him, then provides that identity to other service.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.Id">
            <summary>
            Unique identifier of this provider
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.Order">
            <summary>
            Order of the VisitorIdentifyProvider.
            The minimum order will be the "MAIN/DEFAULT" one to provide visitor identity information to other service.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.Context">
            <summary>
            Identifying visitor is heavily depend on Request and Response. This property keeps the working context for this provider.
            This property is set whenever a provider is created via VisitorIdentifyService (Factory)
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.GetVisitorIdentifier">
            <summary>
            Get the current visitor Identifier.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.SetVisitorIdentifier(System.String)">
            <summary>
            Set the current visitor Identifier.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.IVisitorIdentifyProvider.BuildVisitorIdentifier(System.String,System.String)">
            <summary>
            Build the Visitor identifier, (built with a specific format, depend on the Provider).
            Basically, we can identify Visitor from his "browserID" (it used to be a random cookie), and his userID (his username with the current website) if possible
            </summary>
            <param name="browserID">This should be an unique string for each browser</param>
            <param name="userID">This used to be username, userid or some identity that unique with an user</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Internal.VisitorIdentify.VisitorIdentifyService">
            <summary>    
            Provide services for identifying visitor.
            Forms always has default provider (with a simple mechanism) to identify Visitor (so Forms knows which one post to which form).
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.VisitorIdentifyService.GetAllVisitorIdentifyProviders">
            <summary>
            Activate all IVisitorIdentifyProvider, cache it. The list is ordered by "Order" property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Internal.VisitorIdentify.VisitorIdentifyService.GetVisitorIdentifyProvider(System.Web.HttpContextBase,System.String)">
            <summary>
            Get the provider by Id.
            If Id is null, the first provider will be returned (there is always one built-in default provider of Forms.Core).
            </summary>
            <param name="httpContext">provided context for target provider</param>
            <param name="id">put null will return the first provider</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.IElementTitle">
            <summary>
            Element implement this interface can be decorated with tooltip or inline instruction when rendering in EditView/ViewMode.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IElementTitle.Description">
            <summary>
            Description for this FormElement. It can be shown as tooltip or inline instruction.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IEPiServerFormsCoreConfig">
            <summary>
            Interface for configuration of Forms Core
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IEPiServerFormsCoreConfig.VisitorSubmitTimeout">
            <summary>
            Max timeout to track a visitor identity. This should be in "day" unit.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IEPiServerFormsCoreConfig.RootFolderName">
            <summary>
            Folder name to store all formblock created by Forms
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IEPiServerFormsCoreConfig.RootFolder">
            <summary>
            Folder ID for storing form elements.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.EPiServerFormsCoreConfig">
            <summary>
            Default implementation for FormsCoreConfig
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.EPiServerFormsCoreConfig.VisitorSubmitTimeout">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.EPiServerFormsCoreConfig.RootFolderName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.EPiServerFormsCoreConfig.RootFolder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.EPiServerFormsCoreConfig.DefaultStorageProvider">
            <summary>
            Default storage provider.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IExcludeInSubmission">
            <summary>
            An element implements this interface should be excluded in submission data
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IFormStructureHandler">
            <summary>
            Handle tracking form fields structure.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.IFormStructureHandler.UpdateStructure(EPiServer.Forms.Core.BlockBase)">
            <summary>
            Update structure of a form. This will be call each time FormContainer or FormElement published.
            </summary>
            <param name="blockBase">The block base.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.ISubmissionAwareElement">
            <summary>
            Element with this interface can know about current FormSubmissionId (and it can reads previous submitted values from previous submission/previous step)
            <example><see cref="!:ParagraphTextElementBlock"/></example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.ISubmissionAwareElement.FormSubmissionId">
            <summary>
            current FormSubmissionId
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IUIEntityInEditView">
            <summary>
            UI Entity of Forms, which show up in EditView, should implement this interface to be show/hide for editor to configure.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IUIEntityInEditView.EditViewFriendlyTitle">
            <summary>
            Title for displaying in EditView, to help FormDesigner see it as an anchor for drag and drop, or quickly indicate feature of the element in design-phase.
            <example>for step, implement it as "Step", for hidden field, implement it as "Hidden element"</example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.IUIEntityInEditView.AvailableInEditView">
            <summary>
            Indicate that the Implementation is available in EditView or not.
            Implementation should returns true to show itself in EditView, for editor to configure.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.IViewModeInvisibleElement">
            <summary>
            Element implement this interface will not be show in the View Mode.
            <example>Some popular examples are Hidden field, Captcha hidden, Form Step</example>
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Form">
            <summary>
            The Form model.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.FormElement">
            <summary>
            FormElement model
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EPiServer.Forms.Core.Models.FormElement.ElementName" -->
        <member name="P:EPiServer.Forms.Core.Models.FormElement.Value">
            <summary>
            Value of this element
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormElement.Validators">
            <summary>
            Validators, which is associated with this element. This will be executed on ViewMode when this element is rendered.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormElement.Form">
            <summary>
            Reference to EPiForm contain this element.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormElement.FormStep">
            <summary>
            EPiFormStep where this Element belongs to
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormElement.SourceContent">
            <summary>
            Associated EPiServer Content (which is Block)
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.FormIdentity">
            <summary>
            Model for identifying a form. We need both {Guid, Language} to identify a form.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Models.FormIdentity.#ctor">
            <summary>
            Return a new identifier, with new Guid and empty language
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.FormStructure">
            <summary>
            Class for holding all possible fields of a form (in all language).
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormStructure.Id">
            <summary>
            Id of DDS entry
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormStructure.FormGuid">
            <summary>
            FormGuid, which is FormBlock contentGuid
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.FormStructure.AllFields">
            <summary>
            All fields (fieldcode, like "__field_789")
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.IForm">
            <summary>
            The EPiServer Form.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.Name">
            <summary>
            Name of the form
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.Title">
            <summary>
            Form title, display as heading of the form, in every FormStep
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.Description">
            <summary>
            Description of the form, can be rendered as sub title or help text in ViewMode
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.ConfirmationMessage">
            <summary>
            Display to EndUser before form summiting happens
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.RedirectUrl">
            <summary>
            The Url will redirect to after submitting successfully
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.CreatedDate">
            <summary>
            Timestamp when this form was created.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.ModifiedDate">
            <summary>
            Last modified date of this form definition.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.LastSubmissionDate">
            <summary>
            Last time of data submission.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.AllowAnonymousSubmission">
            <summary>
            Allow anonymous user submit Form
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.AllowMultipleSubmission">
            <summary>
            Allow multiple submission for a same IP/Cookie
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.AllowExposingDataFeeds">
            <summary>
            Allow exposing form data for getting from Service Api
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.ShowNavigationBar">
            <summary>
            Show navigation bar in each FormStep
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.ShowSummarizedData">
            <summary>
            Show summarized data before submitting
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.Data">
            <summary>
            Form data. 
            Prefer using <see cref="!:IEnumerable&lt;Tuple&lt;string, string&gt;&gt;"/> but storing in DDS requires remapping the store to avoid <see cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException"/>.
            Then temporarily using PropertyBag for the sake of its ValidateAgainstMappings and GenerateTypeBag methods.
            </summary>
            
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.Steps">
            <summary>
            Steps of this Form.
            <remarks>This can be null if Form does not define multiple-steps</remarks>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IForm.SourceContent">
            <summary>
            Linked back to the Source content (FormContainerBlock) which display/represents this Model
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.IFormElement">
            <summary>
            Interface for all DataModel of FormElement
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EPiServer.Forms.Core.Models.IFormElement.ElementName" -->
        <member name="P:EPiServer.Forms.Core.Models.IFormElement.Value">
            <summary>
            Value of this element.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormElement.Validators">
            <summary>
            Validators, which is associated with this element. This will be executed on ViewMode when this element is rendered.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormElement.Form">
            <summary>
            Reference to EPiForm contain this element. This is used to be the Form linked to the (first) FormStep of this Element.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormElement.FormStep">
            <summary>
            EPiFormStep where this Element belongs to
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormElement.SourceContent">
            <summary>
            Linked back to the Source content (Block) which display/represents this FormElement Model
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.IFormStep">
            <summary>
            Each EPiForm can have one or several steps. Steps can be in single page or multiple pages.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormStep.AttachedContentLink">
            <summary>
            ContentLink of page which this step should be displayed.
            </summary>
            <remarks>Several steps stay in the same page will have the same AttachedContentLink</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IFormStep.Elements">
            <summary>
            References to this step' elements
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.ElementInfo">
            <summary>
            Model. Simple object to serialize element information to client-side
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ElementInfo.Type">
            <summary>
            Full name type of the element.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ElementInfo.FriendlyName">
            <summary>
            The friendly name of the element.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ElementInfo.CustomBinding">
            <summary>
            Determine the element using custom binding (on client side) or not.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.FileSaveItem">
            <summary>    
            Information of posted file (uploaded file) in a submission data.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.FormInfo">
            <summary>    
            Contains information of a form that will be exposed to developer via ServiceApi
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo">
            <summary>    
            Forms store field with name like "__field_123" (Reason: for unique name).
            We need to map to friendly name to display or for human-readable.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.FriendlyNameInfo.ElementId">
            <summary>
            Identifier of FormElement (used to be Element.ElementName, "__field_123")
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.ProgressiveSubmitInfo">
            <summary>    
            Class represent a progressive submit info.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ProgressiveSubmitInfo.FormGuid">
            <summary>
            Guid of the form.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ProgressiveSubmitInfo.SubmissionId">
            <summary>
            Current submission id.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ProgressiveSubmitInfo.IsFinalized">
            <summary>
            The submission is finalized or not.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.SubmissionInfo">
            <summary>    
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmissionInfo.SubmissionId">
            <summary>
            Current submission ID.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmissionInfo.FormLanguage">
            <summary>
            Form language.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmissionInfo.CurrentStepIndex">
            <summary>
            Current step index.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmissionInfo.IsLastestStep">
            <summary>
            Is last step or not.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.SubmitActionResult">
            <summary>    
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.IsSuccess">
            <summary>
            Is success or not.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.IsProgressiveSubmit">
            <summary>
            Is progressive submit or not.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.RedirectUrl">
            <summary>
            Url the browser will redirect to after submit.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.Message">
            <summary>
            The message show to user.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.Data">
            <summary>
            Additional information.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmitActionResult.AdditionalParams">
            <summary>
            Additional params.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.SubmittableStatus">
            <summary>    
            Internal model object
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmittableStatus.Submittable">
            <summary>
            Determine user can submit the form or not.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.SubmittableStatus.Message">
            <summary>
            Message to show to the user.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Internal.ValidationInfo">
            <summary>
            Plain DTO class for transferring information of validation.
            This class instance contains the result of the server-side validation.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ValidationInfo.InvalidElement">
            <summary>
            Guid of the element which is validated failed.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ValidationInfo.InvalidElementName">
            <summary>
            Name of the element which is validated failed.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ValidationInfo.InvalidElementLabel">
            <summary>
            Label of the element which is validated failed.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ValidationInfo.ValidationMessage">
            <summary>
            Validation message.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Internal.ValidationInfo.Validator">
            <summary>
            Name of failed validator.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.Submission">
            <summary>
            Model class represent a submission of EndUser's data to the Form add-on
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.Submission.Data">
            <summary>
            This data collection will become PropertyBag to save to DDS
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Models.Submission.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts a Submission object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.IValidationModel">
            <summary>
            Model of the Validator, contains information for Validator's processing.
            <example>For FileUploadAcceptFileExtensionValidator, the Model will contain list of accepted file extensions (like  ".docx, .pdf")</example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IValidationModel.Message">
            <summary>
            Validation message.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IValidationModel.ValidationCssClass">
            <summary>
            This CSS class will be append to Element Root DOM, to indicate that Element is applied with this Validator
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.IValidationModel.AdditionalAttributes">
            <summary>
            Additional DOM attributes can be added to Element DOM
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Models.ValidationModelBase">
            <summary>
            Basic base class of the ValidationModel
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Models.ValidationModelBase.Message">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Models.ValidationModelBase.ValidationCssClass">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.Models.ValidationModelBase.AdditionalAttributes">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.FormatType">
            <summary>
            Define format for rendering field data.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService">
            <summary>
            Provide submission data for Actors, instantiate and execute actors
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService.ExecuteActors(EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,System.Web.HttpResponseBase,System.Guid,System.Boolean)">
            <summary>
            Provide context data for all registered Actors, then execute them.
            </summary>
            <param name="submission"></param>
            <param name="formContainer"></param>
            <param name="formIden"></param>
            <param name="request"></param>
            <param name="response"></param>
            <param name="permanentFormSubmissionId">submissionId can be Guid.Empty if nothing is saved to permanent storage</param>
            <param name="isFormFinalizedSubmission">if this is true, we are executing Actors on last step submission</param>
            <returns></returns>     
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService.ExecuteActors(EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,System.Web.HttpResponseBase,System.Boolean)">
            <summary>
            Provide context data for all registered Actors, then execute them.
            </summary>
            <param name="submission"></param>
            <param name="formContainer"></param>
            <param name="formIden"></param>
            <param name="request"></param>
            <param name="response"></param>
            <param name="isFormFinalizedSubmission">if this is true, we are executing Actors on last step submission</param>
            <returns></returns>        
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService.RunActor(EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor,System.Object)">
            <summary>
            Safety run actor, silent the exception to avoid crash the submission process
            </summary>
            <param name="actor"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService.GetFormSubmissionActors(EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,System.Web.HttpResponseBase,System.Guid,System.Boolean)">
            <summary>
            Gets submission actor objects (with its model) of Form
            </summary>
            <returns>Submission actor objects (CallWebhook, SendEmail, ...)</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.ActorsExecutingService.GetFormSubmissionActors(EPiServer.Forms.Core.Models.Submission,EPiServer.Forms.Implementation.Elements.FormContainerBlock,EPiServer.Forms.Core.Models.FormIdentity,System.Web.HttpRequestBase,System.Web.HttpResponseBase,System.Boolean)">
            <summary>
            Gets submission actor objects (with its model) of Form
            </summary>
            <returns>Submission actor objects (CallWebhook, SendEmail, ...)</returns>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.Internal.ISubmissionActorResult">
            <summary>
            Actor which wants to cancel the submission process should return this object by set CancelSubmit to true.
            And set ErrorMessage to show the reason for cancellation on UI.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.Internal.ISubmissionActorResult.CancelSubmit">
            <summary>
            Set value to cancel form submission.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.Internal.ISubmissionActorResult.ErrorMessage">
            <summary>
            Error message to be shown for users if Actor is <see cref="T:EPiServer.Forms.Core.PostSubmissionActor.ISyncOrderedSubmissionActor"/> and run before Form submission.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.Internal.SaveDataToStorageActor">
            <summary>
            Save submission data to storage
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.Internal.SaveDataToStorageActorResult">
            <summary>
            Data returned from out built-in SaveDataToStorageActor.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.Internal.SubmissionActorResult">
            <summary>
            Default implementation for submission actor result
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor">
            <summary>
            Class implement this interface will be Actor, and can be called after a submission completed.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.PerformOnEveryStepSubmission">
            <summary>
            If this is true, this actor will be called on every submission, include step submission.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.Name">
            <summary>
            Friendly name for this Actor
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.Model">
            <summary>
            Model for this Actor to work.
            <example>
            <para>With WebhookActor, model can be IEnumerable of URL </para>
            <para>With EmailActor, model can be IEnumerable of email configuration, to send, email template to use</para>
            </example>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.FormIdentity">
            <summary>
            Identity of the working form
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.SubmissionData">
            <summary>
            Store submission data. This should be read-only. No modification to this data will be passed to other actor or affect form submission process.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.SubmissionFriendlyNameInfos">
            <summary>
            Field mappings information, given friendly name for submission data's fields.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.ActiveExternalFieldMappingTable">
            <summary>
            Provide "active" extra field mapping table for external system.
            Key is FormElement, value is the full <see cref="T:EPiServer.Forms.Core.Internal.ExternalSystem.RemoteFieldInfo"/> object.
            
            This should be read-only.
            No modification to this data will be passed to other actor or affect form submission process.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.IsSyncedWithSubmissionProcess">
            <summary>
            Basically, Actor is designed to be de-couple/async from the submission process. 
            It can be run in separated thread, and even after FormEngine completely return the Response to Visitor.
            In case you want to modify the Response and affect Visitor, you should have this property to be true.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.HttpRequestContext">
            <summary>
            Context of the Request perform the submission. It is highly recommend that you should not modify this object in Actor executing.
            It must be treated as Read Only.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.HttpResponseContext">
            <summary>
            Context of the Response which serve Visitor of this Submission.
            Basically, Actor is designed to be de-couple/async from the submission process, this Response context might be null, and there is no guaranty that your modification to the Response is affect Visitor.
            If you want to modify the Response (E.g.: set cookie), you must set <see cref="P:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.IsSyncedWithSubmissionProcess"/> to true.
            <remarks>It will also slow down Actor processing (and slowdown the overall Submission processing)</remarks>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor.Run(System.Object)">
            <summary>
            Run the actor business
            </summary>
            <param name="input">Extra Info of the ModelExecutor at the moment this Actor is executed. Currently, this is empty</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase">
            <summary>
            Base class for all PostSubmissionActor
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.EditViewFriendlyTitle">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.AvailableInEditView">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.IsSyncedWithSubmissionProcess">
            <summary>
            Default is false. Actor run async with Submission processing.
            <inheritdoc />
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.PerformOnEveryStepSubmission">
            <inheritdoc />
            <remarks>default is false, all Actor should perform on Form finalizing moment only.
            If any Actor wants to perform on every step, it should explicitly say about it.
            </remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.Name">
            <summary>
            Return class type full name by default
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.Model">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.FormIdentity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.SubmissionData">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.SubmissionFriendlyNameInfos">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.ActiveExternalFieldMappingTable">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.HttpRequestContext">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.PostSubmissionActorBase.HttpResponseContext">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActorModel">
            <summary>
            Model of the <see cref="T:EPiServer.Forms.Core.PostSubmissionActor.IPostSubmissionActor"/> should implement this Interface.
            <remarks>It is a row in the Actor configuration UI in the EditView</remarks>
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.PostSubmissionActor.ISyncOrderedSubmissionActor">
            <summary>
            Actors implement this interface will be run synchronously in ascending order, regardless of IsSyncedWithSubmissionProcess value.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.PostSubmissionActor.ISyncOrderedSubmissionActor.Order">
            <summary>
            Order of running actors. Set Order &lt; 1000 to make actor run before saving data to storage.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.RetentionPolicy.Internal.ISubmissionRetentionPolicy">
            <summary>
            This interface defines some basic properties for the retention policy
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.RetentionPolicy.Internal.ISubmissionRetentionPolicy.FinalizedSubmissionRetentionPeriod">
            <summary>
            Retention period of a finalized submission. It is probably Default, Forever or Customization###(int value)
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.RetentionPolicy.Internal.ISubmissionRetentionPolicy.PartialSubmissionRetentionPeriod">
            <summary>
            Retention period of a partial submission. It is probably Default, Forever or Customization###(int value)
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.RetentionPolicy.Internal.RetentionPeriodValidator">
            <summary> 
            Validator for the submission retention periods 
            </summary> 
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.RetentionPeriodValidator.Validate(EPiServer.Forms.Core.IFormContainerBlock)">
            <summary> 
            Validate IFormContainerBlock before saving 
            </summary> 
            <param name="instance"></param> 
            <returns></returns> 
        </member>
        <member name="T:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService">
            <summary>
            Default implementation for Default submission retention period
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetPartialRetentionPeriod(System.String,System.Int32)">
            <summary>
            Get retention period for partial submission
            </summary>
            <param name="partialSubmissionRetentionString">Partial retention period in text</param>
            <param name="defaultValue">if the partialSubmissionRetentionString is the default, return the defaultValue</param>
            <returns>Retention period</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetFinalizedRetentionPeriod(System.String,System.Int32)">
            <summary>
            Get retention period for finalized submission
            </summary>
            <param name="finalizedSubmissionRetentionString">Finalized retention period in text</param>
            <param name="defaultValue">if the finalizedSubmissionRetentionString is the default, return the defaultValue</param>
            <returns>Retention period</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetDefaultRetentionPeriod">
            <summary>
            Get default retention period.
            <returns>
            A tuple contains 2 items: 
             Item1: Default retention period (days) value of partial submission.
             Item2: Default retention period (days) value of finalized submission.
             </returns>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetDefaultRetentionPeriodText(System.Int32)">
            <summary>
            Get the default retention period text
            In case the default retention period is int.Max, returns "Default (keep forever)"; otherwise it returns a custom value like "Default (keep for 30 days)"
            </summary>
            <param name="retentionPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.IsValidRetentionPeriod(System.String,System.String,System.String,EPiServer.Validation.ValidationError@)">
            <summary> 
            Check whether a retention period is valid or not. Output the error if the retention is invalid. 
            </summary> 
            <param name="retentionPeriodString">the retention period string that need to check</param> 
            <param name="submissionType">Either "partial" or "finalized", be used to build the error output if any</param> 
            <param name="propertyName">Either "PartialSubmissionRetentionPeriod" or "FinalizedSubmissionRetentionPeriod", be used to build the error output if any</param> 
            <param name="error">type of ValidationError</param> 
            <returns> 
            True if retention period is valid; otherwise False. 
            </returns> 
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetSubmissionCount(EPiServer.Forms.Core.Models.Internal.FormInfo)">
            <summary> 
            Get submission total number of a certain form
            </summary> 
            <param name="formInfo">Current form info</param> 
            <returns> 
            Total counting number of submission 
            </returns> 
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetRetentionPeriod(System.String,System.Int32)">
            <summary>
            Get retention period value from the retention period string 
            </summary>
            <param name="submissionRetentionPeriodString">"Default", "Forever" or "EPiServer.RetentionPolicy.Customization###123"</param>
            <param name="defaultValue">if the submissionRetentionPeriodString is the default, return the defaultValue</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.IsKeepForever(System.String)">
            <summary> 
            Check whether a retention period is forever or not 
            </summary> 
            <param name="retentionPeriod"></param> 
            <returns> 
            True if retention period is int.MaxValue; otherwise False. 
            </returns> 
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.IsKeepForDefaultPeriod(System.String)">
            <summary> 
            Check whether a retention period is default period or not. 
            </summary> 
            <param name="retentionPeriod"></param> 
            <returns> 
            True if retention period is null or default; otherwise False. 
            </returns> 
        </member>
        <member name="M:EPiServer.Forms.Core.RetentionPolicy.Internal.SubmissionRetentionService.GetCustomizationRetentionPeriod(System.String)">
            <summary>
            Get customization retention period value.
            </summary>
            <param name="customizationRetentionPeriodString"> The customized retention string which is in the following format: "EPiServer.RetentionPolicy.Customization###123"</param>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.IAvailableValidatorTypesAttribute">
            <summary>
             An attribute implements this interface to tell ElementBlock which validators to use
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IAvailableValidatorTypesAttribute.Include">
            <summary>
            This property allows developers to initialize an array of <see cref="T:EPiServer.Forms.Core.Validation.IElementValidator"/> used for a specific validator.
            </summary>
            <value>The available validator types.</value>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IAvailableValidatorTypesAttribute.Exclude">
            <summary>
            This property allows developers to initialize an array of <see cref="T:EPiServer.Forms.Core.Validation.IElementValidator"/> not used for a specific validator.
            </summary>
            <value>The available validator types.</value>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.IElementValidatable">
            <summary>
            ElementBlock should implement this interface to be able to apply <see cref="T:EPiServer.Forms.Core.Validation.IElementValidator"/>'s rule to Element.
            Element implemented this interface also has ability to self-validate its own value, in-corporate with IElementValidator's validations.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IElementValidatable.Validators">
            <summary>
            List of validator settings for this FormsElement.
            This is used to store validator settings (information). This is used to be implemented as a property of Block.
            <example>This will store value in its property like "EPiServer.Forms.Implementation.Validation.RequiredValidator|||EPiServer.Forms.Implementation.Validation.RegularExpressionValidator###111"</example>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.IElementValidatable.GetSubmittedValue">
            <summary>
            This functions will be used to take out actual data value in submitting phase, to pass to IElementValidator.Validate() to test on ServerSide
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.IElementValidatable.SelfValidate(System.String@)">
            <summary>
            Element can self-validate its value before Validators do their jobs. 
            </summary>
            <param name="validationMessage">Validation message return to user</param>
            <returns>return null to ignore result of this self-validating</returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.IElementValidatableWithCustomMessage">
            <summary>
            Implement this interface to expose custom validator message
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IElementValidatableWithCustomMessage.ValidatorMessages">
            <summary>
            Custom validator messages
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.ValidatorMessage">
            <summary>
            Used to store custom validator message
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ValidatorMessage.Validator">
            <summary>
            The validator type (e.g. EPiServer.Forms.Implementation.Validation.EmailValidator)
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ValidatorMessage.Message">
            <summary>
            Validator message
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.IElementValidator">
            <summary>
            Instance of this interface can be assigned to Element (implemented IElementValidatable) and perform its rule.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IElementValidator.ValidationOrder">
            <summary>
            Gets the order of validator
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.IElementValidator.Initialize(System.String)">
            <summary>
            Initializes the validator with specified settings.
            </summary>
            <param name="rawStringOfSettings">The settings.</param>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IElementValidator.Model">
            <summary>
            POCO object, using as configuration for the validation process in Validate()
            <example>For regular expression, we can use it as the pattern string</example>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.IElementValidator.BuildValidationModel(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <summary>
            By default, this function should return the Model object. 
            Concrete class of Validator can use this method to (parsing the raw Model object and decide how to) return appropriate type of Model.
            </summary>
            <example>RegexValidator can return its own model structure { JsPattern = Model, DotNetModel = Model } </example>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.IElementValidator.Description">
            <summary>
            Some information or tip for Editor, or Visitor about this validation. 
            This can be shown as a hint for Visitor in ViewMode (when he provide a mis-match data).
            </summary>
            <example>For RegEx validator, describe the pattern in simple English, so Visitor can understand what valid data to put in.</example>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.IElementValidator.Validate(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <summary>
            Performs validation on the associated Element.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.ElementValidatorBase">
            <summary>
            Base class for all Validator that can be applied to Element
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ElementValidatorBase.ValidationOrder">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.ElementValidatorBase.Initialize(System.String)">
            <inheritdoc />
        </member>
        <member name="F:EPiServer.Forms.Core.Validation.ElementValidatorBase._model">
            <summary>
            Store validation model of a validator.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ElementValidatorBase.Model">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.ElementValidatorBase.BuildValidationModel(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <inheritdoc />
            TODO: this should be part of Initialize() process
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ElementValidatorBase.Description">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.ElementValidatorBase.Validate(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <summary>
            Performs ServerSide validation on the associated Element. 
            Override this method to validate submitted value on ServerSide.
            </summary>
            <param name="targetElement"></param>
            <returns>Return true by default</returns>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ElementValidatorBase.EditViewFriendlyTitle">
            <inheritdoc />
            <summary>
            NOT USE.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.ElementValidatorBase.AvailableInEditView">
            <inheritdoc />
            <summary>By default, validator is shown in EditView to configure</summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidationModel">
            <summary>
            Model for class inherit from <see cref="T:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidatorBase"/>
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidationModel.JsPattern">
            <summary>
            Pattern for validate on client side.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidationModel.DotNetPattern">
            <summary>
            Pattern for validate on server side.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidatorBase">
            <summary>
            Base class for all Validator use Regex pattern to validate Value.
            Derive class just need to return Model as a Regex pattern string.
            Value matches Regex pattern in Model will be considered as passed.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidatorBase.BuildValidationModel(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidatorBase.GetRegularExpressionValidationModel(System.String,System.String)">
            <summary>
            Gets the regular expression validation model.
            </summary>
            <param name="dotNetPattern">The dot net pattern.</param>
            <param name="jsPattern">The js pattern.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Core.Validation.Internal.RegularExpressionValidatorBase.Validate(EPiServer.Forms.Core.Validation.IElementValidatable)">
            <summary>
            use base.ValidationData as Regex Pattern to test the targetElement.
            If we don't want to validate on ServerSide, we can ignore this method.
            </summary>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.Internal.ValidatorInfo">
            <summary>
            Represent Validator instance (stick to one Element). It is a simpler Validator data object, to transfered to Forms Javascript API.
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidatorInfo.Type">
            <summary>
            Full type name the Validator.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidatorInfo.Description">
            <summary>
            Validator's desciption.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidatorInfo.Model">
            <summary>
            Validator's model.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.Validation.Internal.ValidationDescriptor">
            <summary>
            A binding of validation attached to a Form. This will provide information of all configured Validator stick to an element (identified by <see cref="P:EPiServer.Forms.Core.Validation.Internal.ValidationDescriptor.TargetElementName"/>).
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidationDescriptor.TargetElementName">
            <summary>
            Name of element which will be validated.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidationDescriptor.TargetElementId">
            <summary>
            Element guid.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.Validation.Internal.ValidationDescriptor.Validators">
            <summary>
            Validators associated with the element.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.VisitorData.IVisitorData">
            <summary>
            Element should implement this interface in order to render visitor data to its value attribute
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.VisitorData.IVisitorData.VisitorDataSources">
            <summary>
            List of visitor data sources for this FormsElement
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.VisitorData.IVisitorDataSource">
            <summary>
            This interface provides a way to inject decoration data to visitor data object
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.VisitorData.IVisitorDataSource.ClientSideMode">
            <summary>
            Should get visitor data from client side or server side.
            Default value is FALSE.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Core.VisitorData.IVisitorDataSource.DataSourceName">
            <summary>
            Friendly name for this DataSource, to display
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.VisitorData.IVisitorDataSource.SetData(System.Object@,System.String)">
            <summary>
            Set decoration data for the given visitor data object.
            </summary>
            <param name="visitorData">The visitor data.</param>
            <param name="property">The property need to be set.</param>
        </member>
        <member name="M:EPiServer.Forms.Core.VisitorData.IVisitorDataSource.GetProperties">
            <summary>
            Get properties name belong the VisitorDataSource.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Core.VisitorData.VisitorDataService">
            <summary>
            Service for processing visitor data (collect Visitor information from browser request)
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Core.VisitorData.VisitorDataService.GetVisitorData(EPiServer.Forms.Core.VisitorData.IVisitorData)">
            <summary>
            Gets visitor data from current HttpContext object
            </summary>
            <returns>Visitor data object</returns>
        </member>
        <member name="M:EPiServer.Forms.Core.VisitorData.VisitorDataService.GetVisitorDataSourceAndProperty(System.String,EPiServer.Forms.Core.VisitorData.IVisitorDataSource@,System.String@)">
            <summary>
            Gets the visitor data source and property by parsing data source string.
            </summary>
            <param name="dataSourceString">The data source string.</param>
            <param name="dataSource">The data source.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:EPiServer.Forms.Configuration.Settings">
            <summary>
            Global Settings of EPiForms, stored in the DDS
            <remarks>This class has mismatch namespace with EPiServer.Forms.Core, but we don't want to change because the DDS store will fetch data base on class fullname</remarks>
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Configuration.Settings.Id">
            <summary>
            Identity for DDS object storing
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Configuration.Settings.RootFolderName">
            <summary>
            "Episerver Forms". Default root folder name.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Configuration.Settings.RootFolderDisplayName">
            <summary>
            Display name for the root folder in Block view
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Configuration.Settings.RootFolder">
            <summary>
            Folder ID for storing form elements.
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Configuration.Settings.Current">
            <summary>
            Current settings for the add-on.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Configuration.Settings.Save">
            <summary>
            Saves this setting to DDS.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.SubmitButtonType">
            <summary>
            Constant for distinguish submit button type, the submission is come from Submit, or Next or PreviousStep button.
            This will be helpful in NavigationMode=ServerSide, where we cannot use JavaScript to handle step navigation.
            SubmitActionHandler on server-side will need this information from client-side to know how to navigate through steps.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Constants">
            <summary>
            <remarks>This is kept in EPiServer.Forms namespace for backward compatibility</remarks>
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormIdPrefix">
            <summary>
            "__form_". Prefix for generating element's Id
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.ElementIdPrefix">
            <summary>
            "__field_". Prefix for element's name, render to clientside DOM
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.StoreNamePrefix">
            <summary>
            "FormData_"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.MaxUploadFileNameLength">
            <summary>
            Max upload file name length without extension
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormNameKey">
            <summary>
            "__FormName"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormFieldKey">
            <summary>
            "__FormField"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormGuidKey">
            <summary>
            "__FormGuid"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormLanguage">
            <summary>
            "__FormLanguage"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormCurrentStepIndex">
            <summary>
            "__FormCurrentStepIndex" used to indicate the current form submission step
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormWithJavaScriptSupport">
            <summary>
            "__FormWithJavaScriptSupport" used (to inspect Form submission data) to indicate the current form is submitted by JavaScript enabled browser.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormSubmissionId">
            <summary>
            "__FormSubmissionId" used to indicate the current form submission
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormHostedPage">
            <summary>
            __FormHostedPage
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormFinalized">
            <summary>
            __FormFinalized
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormMessage">
            <summary>
            __FormMessage
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FormIsSuccess">
            <summary>
            __FormIsSuccess indicates Forms is submitted successfully or not.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.ValidationFail">
            <summary>
            __ValidationFail indicates validation fail on an element.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.ValidationInfo">
            <summary>
            __ValidationFailOnElement store name of validation fail element.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.DefaultCulture">
            <summary>
            The default culture is used when the one set up by users are not available.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.ResourceKey">
            <summary>
            The resource key used to retrieve global and local resource files for localization.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_PREFIX">
            <summary>
            Prefix for all system columns of a form submission.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_SubmissionId">
            <summary>
            Unique identifier for a submission record
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_SubmitTime">
            <summary>
            Timestamp of a submission record
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_SubmitUser">
            <summary>
            Username (if any) who submit this record
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_HostedPage">
            <summary>
            PageLink (or content link) of the page hosts the FormContainerBlock
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_EncryptedKey">
            <summary>
            Encrypted key (this key is used to encrypt other data column of this record)
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_FinalizedSubmission">
            <summary>
            Is the submission for this form finished? If this column contains true, that mean Visitor goes to the end of Submission Process (and click to SubmitButton) of that Form.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_Language">
            <summary>
            Language of the Submission. If Visitor submits the form in Svenska page (contains Svenska FormContainerBlock), this column will be "sv"
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SYSTEMCOLUMN_ExpiredDate">
            <summary>
            Expired date of the Submission.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SaveDataToStorageActorIndex">
            <summary>
            Order for SaveDataToStorageActor
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FileUploadNameRegex">
            <summary>
            regex to check file upload name
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SelectionItemSeparator">
            <summary>
            With current implementation, jQuery-1.7.2 concats multiple values of Selection or Choice by comma (,)
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.VisitorDataSourceSeparator">
            <summary>
            "," separate VisitorDataSource (configured for hidden field in EditView)
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.VisitorDataSourcePropertySeparator">
            <summary>
            The visitor data source property separator
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.UploadFileLinkSeparator">
            <summary>
            The upload file links separator
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.RecordSeparator">
            <summary>
            "|||", Separate records in a serialized rawstring 
            Record can be remoteFieldInfo in external system mapping <example>"HardcodeSystem$$$HardcodeSystemDS###alwaysHardcode|||StaticAutofillSystem$$$StaticAutofillDatasource1###staticds1email|||StaticAutofillSystem$$$StaticAutofillDatasource2###staticds2bio"</example>
            Separate validators <example>EPiServer.Forms.Implementation.Validation.RequiredValidator|||EPiServer.Forms.Implementation.Validation.RegularExpressionValidator###111</example>        
            Separate value of CheckboxList (customFormUI in EditView).
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.RecordFieldSeparator">
            <summary>
            "###", Separate column/field in one record in the serialized rawString.
            Separate ValidatorType and its Model's value. <example>EPiServer.Forms.Implementation.Validation.RequiredValidator|||EPiServer.Forms.Implementation.Validation.RegularExpressionValidator###111</example>
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.ExternalSystemCodeSeparator">
            <summary>
            "$$$", separated between external systemcode and the Datasource in the rawString
            <example>DemoConnector$$$table1</example>
            </summary>        
        </member>
        <member name="F:EPiServer.Forms.Constants.SQLBit1">
            <summary>
            Use this string to represent the value 1 of data type "bit" in SQL
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.SQLBit0">
            <summary>
            Use this string to represent the value 0 of data type "bit" in SQL
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.TrueAsStringLower">
            <summary>
            Use this string to represent the value "true" of boolean type. Instead of true.ToString().ToLower()
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FalseAsStringLower">
            <summary>
            Use this string to represent the value "false" of boolean type. Instead of false.ToString().ToLower()
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.FileUploadFolderName">
            <summary>
            Name of folder which will be created under local asset folder of FileUploadElement for storing upload files.
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.PartialSubmissionDefaultRetentionPeriod">
            <summary>
            Default value of retention period (in days) for partial submission
            </summary>
        </member>
        <member name="F:EPiServer.Forms.Constants.RequiredRetentionPeriodValue">
            <summary> 
            In case the custom option is selected but the textbox is not filled, we will use this value to indicate that the retention period is invalid 
            </summary> 
        </member>
        <member name="F:EPiServer.Forms.Constants.CustomizationRetentionPeriodMinValue">
            <summary> 
            The minimum value of the retention period  
            </summary> 
        </member>
        <member name="F:EPiServer.Forms.Constants.CustomizationRetentionPeriodMaxValue">
            <summary> 
            The maximum value of the retention period  
            </summary> 
        </member>
        <member name="F:EPiServer.Forms.Constants.DefaultRetentionPeriodOptionValue">
            <summary> 
            The default option value of the retention period list that presents at the clientside 
            </summary> 
        </member>
        <member name="F:EPiServer.Forms.Constants.CustomizationRetentionPeriodOptionValue">
            <summary> 
            The customization option value of the retention period list that presents at the clientside 
            </summary> 
        </member>
        <member name="F:EPiServer.Forms.Constants.ForeverRetentionPeriodOptionValue">
            <summary> 
            The forever option value of the retention period list that presents at the clientside 
            </summary> 
        </member>
        <member name="T:EPiServer.Forms.Implementation.Elements.FormContainerBlock">
            <summary>
            This Block represent the Form in EditView and will be rendered as a hidden container in ViewMode
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Implementation.Elements.FormContainerBlock.PartialSubmissionRetentionPeriod">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Implementation.Elements.FormContainerBlock.FinalizedSubmissionRetentionPeriod">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Forms.Implementation.Elements.FormContainerBlock.RedirectToPage">
            <summary>
            The content/page permanent Url this Form redirects to after submit.
            </summary>
            <remarks>For support redirecting to Commerce catalog.</remarks>
        </member>
        <member name="M:EPiServer.Forms.Implementation.Elements.FormContainerBlock.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <summary>
            By default, we allow storing submission data into storage, and show the NavigationBar
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="P:EPiServer.Forms.Implementation.Elements.FormContainerBlock.Form">
            <summary>
            The data model
            TECHNOTE: This is current LIMITATION, we need to call BuildFormModel() before accessing Form property
            The properties of this variable are mapped to those of FormContainerBlock.        
            FormContainerBlock will be used in Edit Mode while the Form variable is used for building steps, validating inputted data in ViewMode, and navigating users.
            This variable is beneficial to separate the logic of Form in Edit Mode and that in ViewMode.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Implementation.GroupNames">
            <summary>
            Define new groups of information that appears as a new tab in editor mode.
            </summary>
        </member>
        <member name="T:EPiServer.Forms.Helpers.Internal.FormsExtensions">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version
            </summary>
            <summary>
            Internal use only
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
            <summary>
            Internal use only
            </summary>    
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.HasAnyExternalSystem">
            <summary>
            Verifies that any external system registered with the system
            </summary>
            <returns>TRUE indicated at least one external system registered, otherwise FALSE</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.TryConvertType(System.Object,System.Type,System.Object)">
            <summary>
            Converts object to the given type, if fail, return defaultValue
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetElementName(EPiServer.Core.IContent)">
            <summary>
            Get name of a form element.
            </summary>
            <param name="elementContent">The associate IContent of the element.</param>
            <returns>This value used for form field name attribute and then stored to DDS.
            So that, it should be unique and in the "__field_123" format ('123' is the content link).</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetElementName(EPiServer.Core.ContentReference)">
            <summary>
            Get name of a form element.
            </summary>
            <param name="elementLink">The associate IContent's content reference of the element.</param>
            <returns>This value used for form field name attribute and then stored to DDS.
            So that, it should be unique and in the "__field_123" format ('123' is the content link).</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetCurrentPageLink">
            <summary>
            Use ContentRouteHelper to get current ContentLink of displaying page.
            This will work with normal CMS page, or even a virtual page showing Commerce Catalog content.
            <remarks>This will be use to render ContentLink (number-base) to ViewMode, because using Url string (can be vary on params, hashtag) can be mismatched.</remarks>
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetCurrentPageLanguage(EPiServer.Core.ContentReference)">
            <summary>
            Get current page language name
            </summary>
            <param name="contentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetCurrentFormLanguage(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            Get current Form language name
            <param name="formContainerBlock">Current Form container block</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetContent(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the content from ContentReference or Content GUID. Try to get the localized one if possible, can fallback to master language if not found.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetContent(EPiServer.Core.ContentReference,System.Boolean,System.String)">
            <summary>
            Gets the content from ContentReference or Content GUID. Try to get the localized on if possible, depends on <paramref name="shouldFallbackWithMaster"/> to fallback master language instead or not.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="shouldFallbackWithMaster">The flag to determine to get master language or not.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetContent(System.Guid,System.String)">
            <summary>
            Gets the content from ContentReference or Content GUID. Try to get the localized one if possible, can fallback to master language if not found.
            </summary>
            <param name="contentGuid"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetFormBlock(EPiServer.Forms.Core.Models.FormIdentity)">
            <summary>
            Fetch the FormContainerBlock from its identity
            </summary>
            <param name="formIden"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetFormatType(EPiServer.Core.IContent)">
            <summary>
            Get format type of input element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ConvertFromContentAreaItem(EPiServer.Core.ContentAreaItem)">
            <summary>
            Because ContentAreaItem.GetContent() extension method of Core returns null, we need to use our own mechanism to convert contentAreaItem to ElementBlockBase
            </summary>
            <param name="contentAreaItem"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.Replace(System.String,System.String,System.String)">
            <summary>
            Return string from a string using Regex.Replace method
            </summary>
            <param name="input">The input string</param>
            <param name="pattern">A regex pattern</param>
            <param name="replacement">The string to replace with if matchs the regex pattern</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.AddQueryString(System.String,System.String,System.Object)">
            <summary>
            Wrap the UriSupport.AddQueryString() function, so we can use chainable function calls. For example: url.AddQueryString("a", "1").AddQueryString("b", "2").
            Existed name in <paramref name="url"/> will be replaced by new value of (<paramref name="val"/>
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.AddOrSetValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Add or set value of <paramref name="key"/>.
            </summary>
            <param name="attributes"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.SplitBySeparators(System.String,System.String[])">
            <summary>
            Split string by the given array of separators, ignore Empty Entries. By default separators contains only comma.
            </summary>
            <param name="source">String source that want to convert to an array.</param>
            <param name="separators">Separators</param>
            <returns>Array of string</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToStringWithSeparator(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Merges a collection of string to a new string by the given separator, by default separator is comma.
            </summary>
            <param name="collection">Collection of string</param>
            <param name="separator">Separator</param>
            <returns>Collection in string format</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetBaseUrl(System.Web.HttpRequestBase)">
            <summary>
            Gets base url of this application.
            </summary>
            <param name="requestBase">Request object</param>
            <returns>Base url string</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetUrlString(EPiServer.Url,System.String)">
            <summary>
            Return url string from a <see cref="T:EPiServer.Url"/>.
            </summary>
            <param name="url">A given <see cref="T:EPiServer.Url"/> contains url.</param>
            <param name="contextLanguage">Expected language to get url string for.</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToTitleCaseString(System.String)">
            <summary>
            Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).
            </summary>
            <param name="rawString">Raw string that wanted to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.LoadCommonDraft(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Gets the common draft for a particular language
            </summary>
            <returns>The version information for the common draft; or null if no common draft exists</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetFormSubmissionIdKey(EPiServer.Forms.Implementation.Elements.FormContainerBlock)">
            <summary>
            Gets the form submission id key based on the given form container block guid.
            </summary>
            <param name="formContainerBlock"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.AddOrUpdate(System.Web.Mvc.TempDataDictionary,System.String,System.Object)">
            <summary>
             Adding or updating a <see cref="T:System.Web.Mvc.TempDataDictionary"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetParamValue(System.Web.Mvc.ControllerBase,System.String)">
            <summary>
            Gets the parameter value from ValueProvider of the input controller.
            </summary>
            <param name="controller">The controller.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetLocalizedResources">
            <summary>
            Gets all localized resources
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetResourceDictionary(System.String,System.String[],System.Globalization.CultureInfo)">
            <summary>
            Transforms the IEnumerable with ResourceItems from GetAllStrings to a Dictionary. The dictionary is needed for serialization to Json.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="excludePaths">The paths of the items that need to exclude from the Localized resources</param>
            <param name="culture">The culture.</param>        
            <exception cref="T:System.ApplicationException">Resource key exists both as a leaf and as a parent.</exception>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToUrlEncoded(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Build Url with input parameters.
            </summary>
            <param name="url"></param>
            <param name="postVariables"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToSqlTime(System.DateTime)">
            <summary>
            Return SqlDateTime.MinValue as System.DateTime with kind UTC if input value is datetime before 01/01/1753 00:00:00
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.TryConvertValue(System.Object,System.Type,System.Object@)">
            <summary>
            Try to convert the given source to the target type
            </summary>
            <param name="sourceValue">Source value</param>
            <param name="targetType">Desired target type</param>
            <param name="targetValue">Expected value</param>
            <returns>Flag to indicates that converting is success or not</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToObject(System.String)">
            <summary>
            Gets object from the given JSON string
            </summary>
            <param name="value">JSON string that want to deserialize to object</param>
            <returns>Object</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToObject``1(System.String)">
            <summary>
            Gets object from the given JSON string
            </summary>
            <param name="value">JSON string that want to deserialize to object</param>
            <returns>Object</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToJson(System.Object)">
            <summary>
            Gets JSON string from the given object
            </summary>
            <param name="value">Object that want to serializes to JSON string</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ToJsonObject(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Gets single JSON object from the given KeyValuePairs as string
            </summary>
            <param name="keyValuePairs"></param>
            <returns>JSON string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.Forms.Helpers.Internal.FormsExtensions.RemoveUnsafeCharactersForQueryString(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:EPiServer.Forms.Helpers.Internal.FormsExtensions.HasExpired(EPiServer.Core.IVersionable)" -->
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.FindEqualOrNearest(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean)">
            <summary>
                Find the number that equal or nearest the target number in the collection.
            </summary>
            <param name="collection">The collection to find</param>
            <param name="targetNumber">The target number</param>
            <param name="greaterThanOrLessThan">
                If true, find the EQUAL or nearest GREATER THAN the target nunber.
                Otherwise find the EQUAL or nearest LESS THAN the target nunber.
                If nothing found, return null.
            </param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.ActivateAllInstancesOfTypes``1(System.Boolean)">
            <summary>
            Find all derived type of <typeparamref name="BaseType"/> name="T"/>, activate by default constructor
            </summary>
            <typeparam name="BaseType">Base type, can be class or interface</typeparam>
            <param name="isCached">because this is statically lookup types from DLLs and activate it, cache into a static variable bring better performance</param>
            <returns>A collection of instances</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetDerivedTypes(System.Type,System.Boolean)">
            <summary>
            Search in all Assembly, gets all derived types from the given <paramref name="baseType"/>.
            The proxy classes of StructureMap, abstract classes, interfaces will be ignored.
            </summary>
            <param name="baseType">Base type, can be class or interface</param>
            <returns>A collection of derived types</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetTypesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Prevent ReflectionTypeLoadException when calling Assembly.GetTypes()
            </summary>
            <param name="assembly">Assembly to get all types from</param>
            <returns>Type collection</returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetPropertyValue(System.Type,System.String)">
            <summary>
            REFLECTION: Create default instance of <paramref name="type"/>, get its property value
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetPropertyValue``1(System.Type,System.String)">
            <summary>
            Create default instance of <paramref name="type"/>, get its property value
            </summary>
            <typeparam name="PropType">cast return value of Property to this type</typeparam>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetTypeByName(System.String)">
            <summary>
            Return type associated with specified typeName. This will search in all assemblies of current appliation.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.FormsExtensions.GetValidationCssClasses(EPiServer.Forms.Core.IElementBlock)">
            <summary>
            Get CSS Classes for indicating validation status of each element. These CSS classes used to be marked to the Element HTML DOM.
            </summary>
            <param name="elementBlock"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Forms.Helpers.Internal.ModuleHelper">
            <summary>
            Internal use only
            </summary>
            <remarks>NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version</remarks>
        </member>
        <member name="F:EPiServer.Forms.Helpers.Internal.ModuleHelper.MODULENAME">
            <summary>
            "EPiServer.Forms". We need to define this in constant because this string is used everywhere, even in Attribute define (where programmatic get the ModuleName is impossible).
            </summary>
        </member>
        <member name="P:EPiServer.Forms.Helpers.Internal.ModuleHelper.MyModulePath">
            <summary>
            Readonly property for getting the module path.
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetPublicVirtualPath(System.String)">
            <summary>
            Gets public virtual path of the module which specified by module name.
            </summary>
            <example>
            return string of "/util/" + <paramref name="moduleName"/>
            </example>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToClientResource(System.Type,System.String)">
            <summary>
            <example>
            Call ModuleHelper.ToClientResource("X") will return "/secure/EPiServer.MODULENAME/1.0.0.0/X" where 1.0.0.0 is the clientResourceRelativePath in module.config
            </example>
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToResource(System.Type,System.String)">
            <summary>
            Return resource path from type and relative path, Ex: "/se/EPiServer.Forms/virtualPath"
            </summary>
            <param name="type">The type for finding in</param>
            <param name="virtualPath">Resource's relative path</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToPhysicalVPP(System.String)">
            <summary>
            Return path to physical VPP folder, ex: "C:\\EPiServer\\CMS9\\wwwroot\\modules\\_protected\\virtualPath"
            </summary>
            <param name="virtualpath">The virtualpath.</param>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetProtectedAddonsLocalPath">
            <summary>
            This will return string.Empty while site is working in ReadOnly mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToPhysicalResource(System.String,System.String)">
            <summary>
            <example>Output could be "C:\\EPiServer\\VPP\\MyEPiServerSite\\Modules\\EPiServer.MODULENAME\\virtualpath" or "C:\\EPiServer\\80\\wwwroot\\modules\\_protected\\EPiServer.Forms\\0.1.0.8000\\\\ClientResources\\ViewMode" for converted addon to new (nuget addon) folder-style of CMS8</example>
            </summary>
            <param name="relativePath"></param>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToPhysicalVPPResource(System.Type,System.String)">
            <summary>
            <example>Output could be "C:\\EPiServer\\CMS9\\wwwroot\\modules\\_protected\\EPiServer.Forms\\\\virtualPath"</example>
            </summary>
            <param name="type"></param>
            <param name="virtualpath"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.ToPhysicalVPPClientResource(System.Type,System.String)">
            <summary>
            <example>Output could be "C:\\EPiServer\\CMS9\\wwwroot\\modules\\_protected\\EPiServer.Forms\\0.19.4.9000\\\\virtualPath"</example>
            </summary>
            <param name="virtualpath"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetShellModule">
            <summary>
            Get current ShellModule (describe in module.config) of this addon
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetSiteUrl">
            <summary>
            Get current SiteUrl.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetPageExternalUrl(EPiServer.Core.PageData)">
            <summary>
            Get ExternalUrl (friendly) of a page
            </summary>
        </member>
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetOriginalUrlBeforeLoadBalancer(System.Web.HttpRequestBase)">
            <summary>
            This helper function will inspect the Headers["Host"] (which contain original Url comes to the LoadBalancer (if any)).
            The Url from browser to LoadBalancer used to differ from Url (in Request.Url) to the actual WebServer.
            So if the LoadBalancer exists, this function will return the OriginalUrl from Browser to LoadBalancer, if not, it will return the Url equals to request.Url.
            This function will be useful when we do business with sites run behind CDN or LoadBalancer environment.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks>
            Code from FunnelWeb:  https://bitbucket.org/TheBlueSky/funnelweb/src/b64c74f361d3/src/FunnelWeb/Utilities/HttpRequestExtensions.cs
            </remarks>
        </member>
        <member name="F:EPiServer.Forms.Helpers.Internal.ModuleHelper._cachedPage">
            TECHNOTE: the hybrid technique (exposing protected resource via /util/... using VPP) is not possible in zipped nuget package because of limitation in EPiServer.Packaging.
            we cannot make a resource inside protected addon public visible
            The script file is specified with a Resource name in an assembly (similar to folder structure path)
        </member>
        <member name="P:EPiServer.Forms.Helpers.Internal.ModuleHelper.CachedPageInstance">
            <summary>
            ASP.NET Page object tends to be a pretty heavy object to create each time a URL is required so you might want to cache the instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetWebResourceUrl(System.Type,System.String)" -->
        <member name="M:EPiServer.Forms.Helpers.Internal.ModuleHelper.GetWebResourceContent(System.Type,System.String)">
            <summary>
            Get the content of <paramref name="resourceName"/>
            <example>
            ClientResources/ViewMode/a.js is embbed into assembly with [assembly: WebResource("TYPE_NAMESPACE.ClientResources.ViewMode.a.js", "application/x-javascript")].
            Then calling this function will return content of file a.js
            </example>
            </summary>
            <param name="type">type in the Assembly we describle the WebResourceAttribute</param>
            <param name="resourceName"></param>
            <returns>string of content of the resource</returns>
        </member>
    </members>
</doc>
