<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer.ContentApi.Core</name>
  </assembly>
  <members>
    <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(System.Object,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the configured method on <paramref name="target" />. This can be used whether or not
            the configured method is asynchronous.
            </summary>
      <remarks>
            Even if the target method is asynchronous, it's desirable to invoke it using Execute rather than
            ExecuteAsync if you know at compile time what the return type is, because then you can directly
            "await" that value (via a cast), and then the generated code will be able to reference the
            resulting awaitable as a value-typed variable. If you use ExecuteAsync instead, the generated
            code will have to treat the resulting awaitable as a boxed object, because it doesn't know at
            compile time what type it would be.
            </remarks>
      <param name="target">The object whose method is to be executed.</param>
      <param name="parameters">Parameters to pass to the method.</param>
      <returns>The method return value.</returns>
      <exclude />
    </member>
    <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the configured method on <paramref name="target" />. This can only be used if the configured
            method is asynchronous.
            </summary>
      <remarks>
            If you don't know at compile time the type of the method's returned awaitable, you can use ExecuteAsync,
            which supplies an awaitable-of-object. This always works, but can incur several extra heap allocations
            as compared with using Execute and then using "await" on the result value typecasted to the known
            awaitable type. The possible extra heap allocations are for:
            
            1. The custom awaitable (though usually there's a heap allocation for this anyway, since normally
               it's a reference type, and you normally create a new instance per call).
            2. The custom awaiter (whether or not it's a value type, since if it's not, you need a new instance
               of it, and if it is, it will have to be boxed so the calling code can reference it as an object).
            3. The async result value, if it's a value type (it has to be boxed as an object, since the calling
               code doesn't know what type it's going to be).
            </remarks>
      <param name="target">The object whose method is to be executed.</param>
      <param name="parameters">Parameters to pass to the method.</param>
      <returns>An object that you can "await" to get the method return value.</returns>
      <exclude />
    </member>
    <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides a common awaitable structure that <see cref="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])" /> can
            return, regardless of whether the underlying value is a System.Task, an FSharpAsync, or an
            application-defined custom awaitable.
            </summary>
      <exclude />
    </member>
    <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper for detecting whether a given type is FSharpAsync`1, and if so, supplying
            an <see cref="T:System.Linq.Expressions.Expression" /> for mapping instances of that type to a C# awaitable.
            </summary>
      <remarks>
            The main design goal here is to avoid taking a compile-time dependency on
            FSharp.Core.dll, because non-F# applications wouldn't use it. So all the references
            to FSharp types have to be constructed dynamically at runtime.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.ContentApiClient">
      <summary>
                Represents a Content Api Client which calls the Api to access information. Only valid registered clients may access the application, from the provided origin.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiClient.ClientId">
      <summary>
            Client ID
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiClient.AccessControlAllowOrigin">
      <summary>
            Access control allow origin
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration">
      <summary>
                Options class for configuring ContentDelivery settings usage.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration.EnablePreviewFeatures">
      <summary>
            Set to true to enable preview features. Default value is false.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration.Default">
      <summary>
            Get default options for content api. Default() should be used at initialization time to customize/config default value
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration.Default(EPiServer.ContentApi.Core.Configuration.RestVersion)">
      <summary>
            Get default options for the content api for specified <see cref="T:EPiServer.ContentApi.Core.Configuration.RestVersion" />. Should be used at initialization time to customize/config default value
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration.GetOptions">
      <summary>
            Get content api options. GetOptions() should be used in application for api calling. 
            By using this function, Default value will not be changed if clients using api change some values
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration.GetOptions(EPiServer.ContentApi.Core.Configuration.RestVersion)">
      <summary>
            Get content api options. Should be used in application for api calling. 
            By using this function, Default value will not be changed if clients using api change some values
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.ContentApiOptions">
      <summary>
                Options to control behavior of the Content Api
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Configuration.ContentApiOptions" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.Configuration.ContentApiClient})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Configuration.ContentApiOptions" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.MinimumRoles">
      <summary>
                Comma separated list of Minimum Roles required to hit any method on the Content API.
                Default is 'contentapiread' and it should be mapped to WebEditors, Administrators, and WebAdmins
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.RequiredRole">
      <summary>
                Sets the required role that must be assigned to content in order for it to be returned in API calls
                Default is 'contentapiread' and it should be mapped to WebEditors, Administrators, and WebAdmins
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.MultiSiteFilteringEnabled">
      <summary>
            Controls which content is exposed in the Content Api.
            When enabled, Content and Site Definition calls are filtered to only return content associated with the current site, based on the context of the request.
            When disabled, Content and Site Definition calls return all content, regardless of associated site.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SiteDefinitionApiEnabled">
      <summary>
            Controls whether or not the Site Definition Api is enabled. When disabled, the API will return a 403 Forbidden response.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ValidateTemplateForContentUrl">
      <summary>
            Controls wheter the existence of a template should be validated when constructing the url for a content item. If template is validated
            then content item without a template will have url set to null.
            </summary>
      <remarks>Default value is true</remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.FlattenPropertyModel">
      <summary>
            Controls wheter the serialized representation of custom properties should only include the value of all properties rather than both value and property type.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.EnablePreviewMode">
      <summary>
            Controls if all content should be resolved using Contextmode Default or if Edit and Preview is allowed
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeNullValues">
      <summary>
            Controls wheter values with null values should be included (for example content property values)-
            </summary>
      <remarks>
            Default value is true.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeMasterLanguage">
      <summary>
            Controls wheter property for master language should be included
            </summary>
      <remarks>
            Default value is true.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeSiteHosts">
      <summary>
            Controls if the site model should include host information when returned.
            </summary>
      <remarks>
            Default value is true.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeInternalContentRoots">
      <summary>
            Controls if the site model should include internal content roots or if they should be left out.
            </summary>
      <remarks>
            Default value is true.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ExtendedContentTypeModel">
      <summary>
            Controls wheter the serialized representation of the content types should only include a string value for each content type or if extended information should be included.
            </summary>
      <remarks>
            Preview API: This setting is current in preview state meaning it might change between minor versions
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.Clients">
      <summary>
            Controls valid Clients for usage with OAuth. Use separate clients to segment refresh token expiration and CORs considerations per client application
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ForceAbsolute">
      <summary>
            If set to true the returned value will always be an absolute URL; otherwise it will depend on the current context. 
            The default value is false.
            </summary>
      <remarks>
            Preview API: This setting is current in preview state meaning it might change between minor versions
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ExpandedBehavior">
      <summary>
            The language behavior for expanded properties.<see cref="T:EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior" />
            The default value is ContentLanguage.
            </summary>
      <remarks>
            Preview API: This setting is current in preview state meaning it might change between minor versions
            </remarks>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.HttpResponseExpireTime">
      <summary>
             Control s-maxage on Cache-Control header for cachable responses. 
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeNumericContentIdentifier">
      <summary>
            If set to false the Id and Work Id properties in Content Reference model will be removed from the JSON.
            The default value is true.
            </summary>
      <remarks>
            Preview API: This setting is current in preview state meaning it might change between minor versions
            </remarks>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetMinimumRoles(System.String)">
      <summary>
            Set minimum roles
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetRequiredRole(System.String)">
      <summary>
            Set required roles
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetMultiSiteFilteringEnabled(System.Boolean)">
      <summary>
            Set multiSiteFilteringEnabled
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetSiteDefinitionApiEnabled(System.Boolean)">
      <summary>
            Set SiteDefinitionApiEnabled
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetClients(System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.Configuration.ContentApiClient})">
      <summary>
            Set Clients
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetValidateTemplateForContentUrl(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ValidateTemplateForContentUrl" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetFlattenPropertyModel(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.FlattenPropertyModel" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetEnablePreviewMode(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.EnablePreviewMode" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetIncludeNullValues(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeNullValues" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetIncludeMasterLanguage(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeMasterLanguage" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetExpandedBehavior(EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ExpandedBehavior" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetIncludeSiteHosts(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeSiteHosts" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetIncludeInternalContentRoots(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeInternalContentRoots" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetExtendedContentTypeModel(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ExtendedContentTypeModel" /></summary>
      <remarks>
            Preview API: This setting is current in preview state meaning it might change between minor versions
            </remarks>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetForceAbsolute(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.ForceAbsolute" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetHttpResponseExpireTime(System.TimeSpan)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.HttpResponseExpireTime" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.SetIncludeNumericContentIdentifier(System.Boolean)">
      <summary>
            Sets <see cref="P:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.IncludeNumericContentIdentifier" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Configuration.ContentApiOptions.Clone">
      <summary>
            Clone object
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior">
      <summary>
            Defines the language behavior for expanded properties when content is loaded in a fallback language.
            If<see cref="F:EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior.RequestedLanguage" />, then expanded properties are loaded in the requested language, otherwise the content's fallback language.
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior.RequestedLanguage">
      <summary>
            Returns expanded properties in RequestedLanguage.
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Configuration.ExpandedLanguageBehavior.ContentLanguage">
      <summary>
            Returns expanded properties in ContentLanguage
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.OptionsResolver">
      <summary>
            Resolves which <see cref="T:EPiServer.ContentApi.Core.Configuration.ContentApiOptions" /> to use
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Configuration.RestVersion">
      <summary>
            Defines the different versions of the Rest API
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Configuration.RestVersion.Version_2_0">
      <summary>
            Represents the 2.0 version of the Rest API
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.PagingConstants">
      <summary>
            Define constants for the paging
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.PagingConstants.DefaultStartIndex">
      <summary>
            Default value for the start index parameter while getting content with paging options
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.PagingConstants.DefaultMaxRows">
      <summary>
            Default value for the max rows parameter while getting content with paging options
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.PagingConstants.ContinuationTokenHeaderName">
      <summary>
            The continuation token header name
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.PagingConstants.DefaultChildrenBatchSize">
      <summary>
            Default value for how many children that are returned when no top parameter is used
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.MetadataHeaderConstants">
      <summary>
            Define constants for metadata headers
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.ContentGUIDMetadataHeaderName">
      <summary>
            The continuation token header name
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.BranchMetadataHeaderName">
      <summary>
            The branch header name
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.SiteIdMetadataHeaderName">
      <summary>
            The name of the response header that holds the site id.
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.StartPageMetadataHeaderName">
      <summary>
            The name of the response header that holds the start page of the current site.
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.RemainingRouteMetadataHeaderName">
      <summary>
            The name of the response header that holds part of a route that wasn't matched.
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.MetadataHeaderConstants.ContextModeMetadataHeaderName">
      <summary>
            The name of the response header returning the current context mode.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentDeliveryQueryRange`1">
      <summary>
            Represent a list of items in a query range
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentDeliveryQueryRange`1.HasMoreContent">
      <summary>
            Indicates whether the source list has more content to fetch or not.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentDeliveryQueryRange`1.LastIndex">
      <summary>
            The last index of the current batch.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentDeliveryQueryRange`1.PagedResult">
      <summary>
            The paged result of the query.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentLoaderService">
      <summary>
            This service is an abstraction layer on top of content and content repositories.
            It mostly can be used to load content data from repository
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.#ctor(EPiServer.IContentLoader,EPiServer.Web.IPermanentLinkMapper,EPiServer.Web.Routing.IUrlResolver,EPiServer.ContentApi.Core.IContextModeResolver,EPiServer.Core.IContentProviderManager)">
      <summary>
            Initialize a new instance of <see cref="T:EPiServer.ContentApi.Core.ContentLoaderService" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.Get(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Get content item represented by the provided reference in given language.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <param name="contentReference">The reference to the content.</param>
      <param name="language">The language of content to get</param>
      <returns>The requested content item, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.Get(EPiServer.Core.ContentReference,System.String,System.Boolean)">
      <summary>
            Get content item represented by the provided reference in given language. 
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned. 
            </summary>
      <param name="contentReference">The reference to the content.</param>
      <param name="language">The language of content to get</param>
      <param name="fallbackToMaster">Specifies if it should fallback to load content in master language</param>
      <returns>The requested content item, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.Get(System.Guid,System.String)">
      <summary>
            Get content item represented by the provided GUID in given language.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <param name="guid">The reference to the content.</param>
      <param name="language">The language of content to get</param>
      <returns>The requested content item, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.Get(System.Guid,System.String,System.Boolean)">
      <summary>
            Get content item represented by the provided GUID in given language.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <param name="guid">The reference to the content.</param>
      <param name="language">The language of content to get</param>
      <param name="fallbackToMaster">Specifies if it should fallback to load content in master language</param>
      <returns>The requested content item, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetByUrl(System.String,System.Boolean,System.Boolean)">
      <summary>
            Get content item represtended by the provided contentUrl
            </summary>
      <returns>The requested content item, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetChildren(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Get the children of the content represented by the provided reference in given language.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <returns> all children of the given content </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetChildren(System.Guid,System.String,EPiServer.ContentApi.Core.PagingToken,System.Func{EPiServer.Core.IContent,System.Boolean})">
      <summary>
            Get the children of the content represented by the provided reference in given language. 
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned. 
            </summary>
      <returns> all children of the given content </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetChildren(EPiServer.Core.ContentReference,System.String,EPiServer.ContentApi.Core.PagingToken,System.Func{EPiServer.Core.IContent,System.Boolean})">
      <summary>
            Get the children of the content represented by the provided reference in given language. 
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned. 
            </summary>
      <returns> all children of the given content </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetAncestors(System.Guid,System.String)">
      <summary>
            Get ancestors of the content represented by the provided reference in given language. 
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned. 
            </summary>
      <param name="contentGuid">The guid based content identifier</param>
      <param name="language">The language to retieve parents in</param>
      <returns> all ancestors of the given content</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetAncestors(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Get ancestors of the content represented by the provided reference in given language. 
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned. 
            </summary>
      <returns> all ancestors of the given content</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetItemsWithOptions(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
      <summary>
            Get all content items that is represented by the provided references given the language and loader options.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <param name="contentGuids">
      </param>
      <param name="language">
      </param>
      <returns> A list of content for the specifed references </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetItemsWithOptions(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.String)">
      <summary>
            Get all content items that is represented by the provided references given the language and loader options.
            This method supports fallback language
            i.e: if content in the given language does not exist , so the content in fallback language is returned.
            </summary>
      <returns> A list of content for the specifed references </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
      <summary>
            Get all content items that is represented by the provided references in the given language.
            For references associated with a specific version (that is where EPiServer.Core.ContentReference.WorkID  is set)
            the language is ignored and that version is returned.
            If contentReferences contain duplicate entries, this method returns all content including duplicated ones
            </summary>
      <returns> A list of content for the specifed references </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.ShouldContentBeExposed(EPiServer.Core.IContent)">
      <summary>
            Check if content is draft or expired or unpublished
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.CreateLoaderOptions(System.String,System.Boolean)">
      <summary>
            Create an instance of LanguageSelector with a given language along with fallback option.
            If language is null, create a language selector with Master language.
            If language is not null, create a language selector with LanguageSelector.Fallback
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentLoaderService.Get(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Get content item represented by the provided reference in given language. 
            </summary>
      <param name="contentReference">The reference to the content.</param>
      <param name="language">The language of content to get</param>
      <param name="includeDraft">Specifies if it should return draft or not.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver">
      <summary>
            Component that resolves which <see cref="T:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer" /> that should be used
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver.#ctor(EPiServer.ContentApi.Core.ContentResult.IJsonSerializerConfiguration,EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver.Resolve(EPiServer.ContentApi.Core.Configuration.ContentApiOptions)">
      <summary>
            Resolves which <see cref="T:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer" /> given specified <paramref name="contentApiOptions" /></summary>
      <param name="contentApiOptions">The options to resolve serializer for</param>
      <returns>A <see cref="T:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer" /> instance</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.ContentResultService">
      <summary>
            Responsible for building response content with a given serializer
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.ContentResultService.#ctor">
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.ContentResultService.#ctor(EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer)">
      <summary>
            Create a new instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.ContentResultService" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.ContentResultService.BuildContent(System.Object)">
      <summary>
            Build string content from object use given serializer
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer">
      <summary>
            Base serializer interface for serialize object to string
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer.MediaType">
      <summary>
            Media type used when build response. Ex: application/json, application/xml
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer.Encoding">
      <summary>
            Encoding used when build response
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.IContentApiSerializer.Serialize(System.Object)">
      <summary>
            serialize object to string
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.IJsonSerializerConfiguration">
      <summary>
            Base interface for JSON serializer configuration
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.IJsonSerializerConfiguration.Settings">
      <summary>
            Default JSON serializer settings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiErrorResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convenience class that extends <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1" /> for use when returning errors in the Content Api
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generic IHttpActionResult for all Content Api operations, setting standard serialization and encoding.
            </summary>
      <typeparam name="T">
      </typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1.#ctor(`0,System.Net.HttpStatusCode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1.#ctor(`0,System.Net.HttpStatusCode,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1.#ctor(`0,System.Net.HttpStatusCode,EPiServer.ContentApi.Core.Configuration.ContentApiOptions,EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1.#ctor(`0,System.Net.HttpStatusCode,System.Collections.Generic.IDictionary{System.String,System.String},EPiServer.ContentApi.Core.Configuration.ContentApiOptions,EPiServer.ContentApi.Core.ContentResult.ContentApiSerializerResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. build content for response.
            </summary>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.Error">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class for returning error information about requests in <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiErrorResult" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.Error.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.Error" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.Error.#ctor(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.Error" /></summary>
      <param name="code">
      </param>
      <param name="message">
      </param>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.Error.Code">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Error Code. <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ErrorCode" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.Error.Message">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Error message
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.Error.Target">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Error target
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.Error.Details">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Details about error
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.ErrorCode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class containing error codes that are returned in the API for consumers. For use with <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiErrorResult" /> in conjunction with an <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.Error" /> instance
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.ErrorResponse">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrapper class for <see cref="P:EPiServer.ContentApi.Core.ContentResult.Internal.ErrorResponse.Error" /> instances returned via <see cref="T:EPiServer.ContentApi.Core.ContentResult.Internal.ContentApiErrorResult" />.
                Implemented to align with Microsoft REST API Guidelines: https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.JsonSerializer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Serialize object into json
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.JsonSerializer.MediaType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Media type used when build response. Ex: application/json, application/xml
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.JsonSerializer.Encoding">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Encoding used when build response
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.ContentResult.Internal.JsonSerializer.Serialize(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. serialize object to JSON string using Settings as serializer settings
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.ContentResult.Internal.JsonSerializer.Settings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default JSON serializer settings. This settings will be used in Serialize()
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.ContentResult.Internal.NullCleaningContentSerializer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Currently NullValueHandling only effects properties, not values in arrays or dictionaries. It seem this is the expected behavior of Newtonsoft.Json 
            and will not be fixed (according to this https://github.com/JamesNK/Newtonsoft.Json/issues/1491).
            So we need this class to remove the null entry of Dictionary when serialize object
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.IContentApiHeaderProvider">
      <summary>
            Interface for declaration of headers used in the content api
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.IContentApiHeaderProvider.HeaderNames">
      <summary>
            List of headernames
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.InitializationService">
      <summary>
            Setup initial configuration for Content Delivery. E.g virtual roles, HttpConfiguration
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.InitializationService.InitializeVirtualRoles">
      <summary>
            Initialize virtual roles
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.InitializationService.IsContentApiRole(System.String)">
      <summary>
            Determines whether specified role is content api read or not.
            </summary>
      <param name="roleName">Name of the role.</param>
      <returns>true if the role is content api read, otherwise false.</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.InitializationService.GetAllRoles">
      <summary>
            Get all roles from system
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.InitializationService.RegisterVirtualRole(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Register virtual role with mapped roles
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Value provider to parse Accept-Language header out to a IEnumerable of string for use in specific controllers.
                Attach to a WebApi method via <see cref="T:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProviderFactory" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider.#ctor(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instacne of the <see cref="T:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider" /></summary>
      <param name="headers">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider.ContainsPrefix(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider.GetValue(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get value by key and culture from http header
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProviderFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Value provider factory which attaches <see cref="T:EPiServer.ContentApi.Core.Internal.AcceptLanguageHeaderValueProvider" /> to a IEnumerable of string parameter, 
                allowing a list of languages to be retrieved from the Accept-Language header
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.ApiDefinitionAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This is an internal attribute used for generating API documentation
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.CommaDelimitedArrayModelBinder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model binder to convert comma-seperated parameter to Array.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.ContentLanguageFilterAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This filter reponsible for extract request language from header and set to <see cref="P:EPiServer.Core.IContentLanguageAccessor.Language" /><para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.ContentPaginationHelper`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class helps to paginate through items.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContentPaginationHelper`1.GetRange(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,EPiServer.ContentApi.Core.PagedResult{EPiServer.ContentApi.Core.Internal.IndexedItem{`0}}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a range of items.
            </summary>
      <param name="startIndex">The startIndex of the current page</param>
      <param name="top">Number of items will be taken.</param>
      <param name="dataLoadingFunc">Function to get items.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.Internal.ContextModeResolver._editRouteRegex">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The regular expression to find if we are inside a route that's used by the editorial system.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContextModeResolver.#ctor(EPiServer.Framework.Modules.IModuleResourceResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ContentApi.Core.Internal.ContextModeResolver" /> class.
            </summary>
      <param name="moduleResourceResolver">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContextModeResolver.Resolve(System.String,EPiServer.Web.ContextMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines which <see cref="T:EPiServer.Web.ContextMode" /> the request is executed under
            </summary>
      <param name="contentUrl">Content URL</param>
      <param name="defaultContextMode">Fallback context mode</param>
      <returns>
            The context mode
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContextModeResolver.IsCmsPath(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determine if the url is inside protected CMS module
            </summary>
      <param name="urlBuilder">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContextModeResolver.IsEditingActive(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determine if URL contains <see cref="F:EPiServer.Editor.PageEditing.EpiEditMode" /></summary>
      <param name="urlBuilder">
      </param>
      <returns>
            The value of <see cref="F:EPiServer.Editor.PageEditing.EpiEditMode" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.ContextModeResolver.IsPreviewingActive(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determine if the request contains a versionId using the <see cref="F:EPiServer.ContentApi.Core.Internal.ContextModeResolver._editRouteRegex" /> regular expression
            </summary>
      <param name="urlBuilder">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.EnumerableExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal extensions for <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> type to <see cref="T:System.Collections.Generic.IList`1" />.
            If already a list, it will be returned unchanged; otherwise the enumerable will be realized.
            </summary>
      <remarks>Note that the returned list can be an array and therefor read-only.</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.FromHeaderAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Custom attribute for binding parameter value from request's headers
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.FromHeaderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.FromHeaderProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A name/value pair provider that retrieve value from request's headers
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.GuidEncoder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Encodes an integer, like a database ID, into a random-looking Guid of RFC4122 version 5,
            which means it should never collide with real random Guids.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.GuidEncoder.EncodeAsGuid(System.Int32,System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Encodes the initialized namespace and the input <paramref name="number" /> into a
             random-looking Guid of RFC4122 version 5.
             </summary>
      <param name="number">The number to encode.</param>
      <param name="ns">
             A namespace that represents the type of data encoded. This should be the same every
             time the same type of data is encoded, refer to RFC4122.
             E.g. for Cart ID:s this could be a Guid constant representing the Cart type.
             </param>
      <remarks>
             Example: Using to encode cart ID:s
             
             // Separates carts from other entities like orders. Persistent, must never change.
             const Guid cartNamespace = new Guid("3B4EF64B-C042-4859-B7C4-47B7D2B79BDB");
            
             int cartId; // input var
             
             var encodedGuid = _guidEncoder.EncodeAsGuid(cartId, cartNamespace);
             
             </remarks>
      <returns>The Guid with the encoded number.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.GuidEncoder.TryDecodeFromGuid(System.Guid,System.Guid,System.Int32@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Decodes the original number from a Guid that was created using <see cref="M:EPiServer.ContentApi.Core.Internal.GuidEncoder.EncodeAsGuid(System.Int32,System.Guid)" />.
            </summary>
      <param name="guid">The encoded Guid.</param>
      <param name="ns">
            A namespace that represents the type of data encoded. 
            This must be the same as used when <see cref="M:EPiServer.ContentApi.Core.Internal.GuidEncoder.EncodeAsGuid(System.Int32,System.Guid)" /> was called to
            create the input <paramref name="guid" /> or <see cref="T:System.ArgumentException" /> will be thrown.
            </param>
      <param name="number">
            Output parameter that will be set to the decoded number if the operation was successful.
            </param>
      <returns>
        <c>true</c> if the number was successfully deoced; <c>false</c> if the input
            <paramref name="ns" /> did not match the input <paramref name="number" />.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.HttpRequestHeadersExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension method for HttpRequestHeader to work with AcceptLanguageHeader
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.HttpRequestHeadersExtensions.ParseAcceptLanguageHeader(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get list of language from AcceptLanguageHeader
            </summary>
      <param name="headers">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.IndexedItem`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represent item in a list with its index.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Internal.IndexedItem`1.Index">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Index of the item.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Internal.IndexedItem`1.Item">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The item in list.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.RoleService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Responsible for manipulating with role
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.RoleService.GetMappedRolesAssociatedWithVirtualRole(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get mapped roles associated with a given virtual role
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Internal.UserService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handle user-related logic
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.UserService.IsUserAllowedToAccessContent(EPiServer.Core.IContent,System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Check whether user has the given privilege to access a content.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Internal.UserService.IsUserAllowedToAccessDraftContent(EPiServer.Core.IContent,System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Check whether user has the given privilege to access a draft content.
            </summary>
      <remarks>
            Always require more than Read permission to get draft content,
            regardless of whether the content version is published or not.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase">
      <summary>
            Base class for model mappers
            </summary>
      <summary>
            Base class for model mappers
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.Order">
      <summary>
            The mapper with higher order is chosen to handle a specific content in different contexts. The Default implementation has Order 100.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.CanHandle``1(``0)">
      <summary>
            Whether a mapper can handle a specific content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.TransformContent(EPiServer.Core.IContent,System.Boolean,System.String)">
      <summary>
            Method generates a ContentModel based on the provided IContent.
            </summary>
      <param name="content">The IContent object that the ContentModel is generated from</param>
      <param name="excludePersonalizedContent">Boolean to indicate whether or not to return personalization data in the instance of the ContentApiModel</param>
      <param name="expand"> String contain properties need to be expand, seperated by comma. Eg: expand=MainContentArea,productPageLinks. Pass expand='*' to expand all properties</param>
      <returns>Instance of ContentModel</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractContentProperties(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel)">
      <summary>
            Extract content properties to ContentApiModel
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractPropertyDataCollection(EPiServer.Core.IContent,System.String,System.Boolean)">
      <summary>
            Extract property data collection from content
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.PropertyModelConverters">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.GetExtendedContentType(EPiServer.Core.IContent)">
      <summary>
            Preview API: This method is current in preview state meaning it might change between minor versions
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.#ctor">
      <exclude /> //for mock
        </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.Convert(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.CreateDefaultModel(EPiServer.Core.IContent)">
      <summary>
            Create default model corresponding with the content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractContentProperties(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Extract content properties to ContentApiModel
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractLocalLanguage(EPiServer.Core.IContent)">
      <summary>
            Extract local languages of a specific content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractMasterLanguage(EPiServer.Core.IContent)">
      <summary>
            Extract master languages of a specific content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractExistingLanguages(EPiServer.Core.IContent)">
      <summary>
            Extract existing languages of a specific content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractExistingLanguages(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Extract existing languages of a specific content and Converter context
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ResolveUrl(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Resolve url by content link and language. By default, this function always resolve url using view mode context
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.GetAllContentTypes(EPiServer.Core.IContent)">
      <summary>
            Get all content types of a specific content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.GetContentTypeById(System.Int32)">
      <summary>
            Get content type by id
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ExtractCustomProperties(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Extract property data collection from content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.AddToPropertyMap(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,EPiServer.ContentApi.Core.Serialization.IPropertyModel)">
      <summary>
            Add propertyModel to propertyMap of ContentApiModel. 3rd developer may override this method to add their own customization
            with properyModel before add to ContentApiModel
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.ShouldPropertyBeIgnored(EPiServer.DataAbstraction.ContentType,EPiServer.Core.PropertyData)">
      <summary>
            Decide whether a content type's property should be ignored from data serialization
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.FlattenPropertyMap(EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel)">
      <summary>
            Flattens the property map on the content model
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentModelMapperBase.CreateDefaultModel(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Create default model corresponding with the content
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentModelMapper">
      <summary>
            Interface for mapping content to custom models
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IContentModelMapper.PropertyModelConverters">
      <summary>
            List property model converters to convert EpiServer's <see cref="T:EPiServer.Core.PropertyData" /> to Content Api's property model
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentModelMapper.TransformContent(EPiServer.Core.IContent,System.Boolean,System.String)">
      <summary>
            Maps an instance of IContent to ContentApiModel
            </summary>
      <param name="content">The IContent object that the ContentModel is generated from</param>
      <param name="excludePersonalizedContent">Boolean to indicate whether or not to return personalization data in the instance of the ContentApiModel</param>
      <param name="expand"> String contains properties need to be expanded, seperated by comma. Eg: expand=MainContentArea,productPageLinks. Pass expand='*' to expand all properties</param>
      <returns>Instance of ContentModel</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides a default implementation of IContentModelMapper to map instance of IContent to ContentApiModel
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentConverter.Order">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentConverter.CanHandle``1(``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This is the default model mapper, so it should be able to handle most kinds of IContent.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default implementation of <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter" />. 
            This class is used for handling the mapping between EPiServer property data to property models.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.#ctor(EPiServer.ContentApi.Core.Serialization.ReflectionService)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter" /></summary>
      <param name="reflectionService">
      </param>
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.ModelTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.InitializeModelTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize the mapping between Content API's <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" /> with corresponding EpiServer.Core's <see cref="T:EPiServer.Core.PropertyData" /></summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.HasPropertyModelAssociatedWith(EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Method to determine whether or not the provided PropertyData can be represented by
             one of the implementations of IPropertyModel registered in the PropertyModelConverter
            </summary>
      <param name="propertyData">Instance of PropertyData to check against the IPropertyModels registered 
            with the PropertyModelConverter</param>
      <returns>boolean indicating whether or not the PropertyModelConverter can provide IPropertyModel
            for provided PropertyData</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyModelConverter.ConvertToPropertyModel(EPiServer.Core.PropertyData,System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Based on the provided PropertyData and the registered PropertyModelConverter, 
            an instance of IPropertyModel is generated and returned.
            </summary>
      <param name="propertyData">Instance of PropertyData which the IPropertyModel result is generated from.</param>
      <param name="language">language to get value of property</param>
      <param name="excludePersonalizedContent">Boolean to indicate whether or not to serialize personalization data.</param>
      <param name="expand">
            Booolean to indicate whether or not to expand property. 
            Normally, a property only contains the basic information (e.g. contentlink : {name, workid} ). But for some special ones, clients may want to get 
            full information of it (e.g. contentlink: {name, workid, publishdate, editdate, etc}).
            In this case, we will call ConvertToPropertyModel with expand set to true
            </param>
      <returns>Instance of IPropertyModel</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.IContentModelMapperFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory to decide what mapper should be used to transform content
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.IContentModelMapperFactory.GetMapper``1(``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get mapper for a specific content
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.ContentModelMapperFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of IContentModelMapperFactory
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ContentModelMapperFactory.GetMapper``1(``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Internal.BlockPropertyConverterProvider.SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. We handle block through an own IPropertyConverter rather than handling blocks through DefaultPropertyConverter so we can have a SortOrder so
            any existing partner implementations are favoured before default one.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentModelReferenceConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides functionality for converting from IContent or ContentReference to ContentReferenceModel
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentModelReferenceConverter.GetContentModelReference(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Maps Instance of IContent to ContentModelReference. Use language of content to resolve Url property
            </summary>
      <param name="content">Instance of IContent</param>
      <returns>Instance of ContentModelReference based on provided IContent</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultContentModelReferenceConverter.GetContentModelReference(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Maps Instance of ContentReference to ContentModelReference
            </summary>
      <param name="contentReference">Instance of IContent</param>
      <returns>Instance of ContentModelReference based on provided ContentReference</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default implementation of <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" />. 
            This class is used for handling the mapping between EPiServer property data to property models.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyConverter.#ctor(EPiServer.ContentApi.Core.Serialization.Models.TypeModel,EPiServer.ContentApi.Core.Serialization.Internal.PropertyModelFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyConverter" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultPropertyConverter.Convert(EPiServer.Core.PropertyData,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.DefaultXHtmlStringPropertyRenderer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default implementation of rendering <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" />.
            Should return data in HTML format as the same in MVC/Webform based application
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultXHtmlStringPropertyRenderer.Render(EPiServer.SpecializedProperties.PropertyXhtmlString,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.DefaultXHtmlStringPropertyRenderer.Render(System.Web.HttpContextBase,EPiServer.Core.XhtmlString)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Render an <see cref="T:EPiServer.Core.XhtmlString" /> Using Episerver's built-in RenderXhtmlString function of <see cref="T:System.Web.Mvc.HtmlHelper" /> class.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.ExpandMasterLanguageModelFilter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A content item may not be expanded due to access rights and/or language settings.
            In edit mode we should expand them anyway so editors gets a hint that the content e.g. needs translation.
            
            Content items that were not expanded should also be removed from the property value in view/default mode.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.ImpersonationController">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. impersonated MVC Controller for HttpContext.
            EPiServer Core requires a controller to render XHTML string. So This class is created for that purpose, mostly just a hack way to create required environment for Core.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ImpersonationController.Index">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. impersonated index action
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.ISimplePropertyModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Identify a <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" /> that contains a Value property
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.ReflectionHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class for reflection
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ReflectionHelper.GetConcreteDerivedTypes(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get derived types from base type ignore abstract, interface, generic types
            </summary>
      <param name="baseType">
      </param>
      <returns>Derived types ignore abstract, interface, generic types </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ReflectionHelper.GetParentGenericTypes(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all parent generic types of provided type including interfaces, abstract classes
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ReflectionHelper.GetParentTypes(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all parent types of provided type
            </summary>
      <param name="type">
      </param>
      <returns>parent types including interfaces, abstract classes</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.ReflectionHelper.GetTypesFromAssembly(System.Reflection.Assembly)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all types from an assembly
            </summary>
      <param name="assembly">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.TypeModelResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolve the <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.TypeModel" /> from given property data type
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Internal.XhtmlRenderService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrapper for HTMLHelper. This is needed for UT
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Internal.XhtmlRenderService.RenderXHTMLString(System.Web.HttpContextBase,EPiServer.Core.XhtmlString)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Render XHTML string
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter">
      <summary>
            interface for determining which model types handle which propertydata types.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter.SortOrder">
      <summary>
            The implementation converter which has higher order will be used to get the value of <see cref="T:EPiServer.Core.PropertyData" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter.ModelTypes">
      <summary>
            Contains mapping list between Content API's <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" /> with corresponding EpiServer.Core's <see cref="T:EPiServer.Core.PropertyData" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter.HasPropertyModelAssociatedWith(EPiServer.Core.PropertyData)">
      <summary>
            Verifies that the instance of IPropertyModelConverter has the correct IPropertyModel registered for the provided PropertyData type.
            </summary>
      <param name="propertyData">instance of PropertyData to check</param>
      <returns>bool</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IPropertyModelConverter.ConvertToPropertyModel(EPiServer.Core.PropertyData,System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>
            Returns an instance of IPropertyModel based from the provided PropertyData
            </summary>
      <param name="propertyData">Instance of PropertyData which the IPropertyModel result is generated from.</param>
      <param name="language">Culture to retrieve the property value (if expanding)</param>
      <param name="excludePersonalizedContent">Boolean to indicate whether or not to return personalization data in the property model.</param>
      <param name="expand">Indicates whether this property should be expanded if it is a reference property</param>
      <returns>Instance of IPropertyModel</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2">
      <summary>
            propertymodel base for PropertyLongString
            </summary>
      <summary>
            propertymodel base for PropertyLongString
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2.ExpandedValue">
      <summary>
            Contains expanded value returned to clients
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2.Expand(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property and set it to ExpandedValue property.
            Normally, a property only contains the basic information (e.g. contentlink : {name, workid} ). But for some special ones, 
            clients may want to get more information of it (e.g. contentlink: {name, workid, publishdate, editdate, etc}), 
            so in this case, we should call Expand() to get full information of property
            </summary>
      <param name="language">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2.ExtractExpandedValue(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property. Normally, Value only contains some basic information of IContent (e.g. contentlink : {name, workid} ). 
            We can use this function to extract more information of IContent (e.g. contentlink: {name, workid, publishdate, editdate, etc}) from Value
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2.GetValue">
      <summary>
            Get value from property long string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.CollectionPropertyModelBase`2.Flatten">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyContentArea" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyContentArea" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaPropertyModel.GetValue">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModel">
      <summary>
            Mapped property model for PropertyContentReferenceList
            </summary>
      <summary>
            Mapped property model for PropertyContentReferenceList
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2">
      <summary>
            base class for mapping between property models and property data based on PropertyContentReferenceList 
            </summary>
      <summary>
            base class for mapping between property models and property data based on PropertyContentReferenceList 
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2.Expand(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property and set it to ExpandedValue property.
            Normally, a property only contains the basic information (e.g. contentlink : {name, workid} ). But for some special ones, 
            clients may want to get more information of it (e.g. contentlink: {name, workid, publishdate, editdate, etc}), 
            so in this case, we should call Expand() to get full information of property
            </summary>
      <param name="language">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2.ExtractExpandedValue(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property. Normally, Value only contains some basic information of IContent (e.g. contentlink : {name, workid} ). 
            We can use this function to extract more information of IContent (e.g. contentlink: {name, workid, publishdate, editdate, etc}) from Value
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2.ExpandedValue">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2.GetValue">
      <summary>
            Get value from PropertyContentReferenceList
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferenceListPropertyModelBase`2.Flatten">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyContentReference" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyContentReference" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2">
      <summary>
            base class for mapping between property models and property data based on PropertyContentReference 
            </summary>
      <summary>
            base class for mapping between property models and property data based on PropertyContentReference 
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2.Expand(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property and set it to ExpandedValue property.
            Normally, a property only contains the basic information (e.g. contentlink : {name, workid} ). But for some special ones, 
            clients may want to get more information of it (e.g. contentlink: {name, workid, publishdate, editdate, etc}), 
            so in this case, we should call Expand() to get full information of property
            </summary>
      <param name="language">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2.ExtractExpandedValue(System.Globalization.CultureInfo)">
      <summary>
            Retrieve the expanded value from Value property. Normally, Value only contains some basic information of IContent (e.g. contentlink : {name, workid} ). 
            We can use this function to extract more information of IContent (e.g. contentlink: {name, workid, publishdate, editdate, etc}) from Value
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2.ExpandedValue">
      <summary>
            Contain the property's expanded value 
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2.GetValue">
      <summary>
            Get value from PropertyContentReference
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.ContentReferencePropertyModelBase`2.Flatten">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentTypeModel">
      <summary>
            Serializable model class transfer content type information.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentTypeModel.Name">
      <summary>
            Gets or sets the name of the content type.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentTypeModel.GuidValue">
      <summary>
            Gets or sets the external identifier of the content type.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentTypeModel.Base">
      <summary>
            Gets or sets the content type base.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.LinkCollectionPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.LinkCollectionPropertyModel.GetValue">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.PageReferencePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyPageReference" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyPageReference" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.PersonalizablePropertyModel`2">
      <summary>
            Mapped property model for <see cref="T:EPiServer.ContentApi.Core.Serialization.IPersonalizableProperty" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.ContentApi.Core.Serialization.IPersonalizableProperty" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.XHtmlPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /></summary>
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.AppSettingsMultiplePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettingsMultiple" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.AppSettingsPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettings" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.BlobPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyBlob" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.BlockPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyBlock" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.BooleanPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyBoolean" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.CategoryPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyCategory" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.CategoryPropertyModel.#ctor(EPiServer.Core.PropertyCategory)">
      <summary>
            We only need CategoryList from PropertyCategory.
            Basicaly, this constructor loop through CategoryList of PropertyCategory, retrieve each category from categoryRepository, convert it to view model
            and add to Value prop
            </summary>
      <param name="propertyCategory">
      </param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.CheckboxListPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyCheckBoxList" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel">
      <summary>
            Serializable model class for IContent exposed in the Content API.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.ContentLink">
      <summary>
            Content link of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Name">
      <summary>
            Name of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Language">
      <summary>
            Language of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.ExistingLanguages">
      <summary>
            The existing languages of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.MasterLanguage">
      <summary>
            Master language of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.ContentType">
      <summary>
            Content type of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.ParentLink">
      <summary>
            Parent link of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.RouteSegment">
      <summary>
            Route segment of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Url">
      <summary>
            Url of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Changed">
      <summary>
            The date when the content was last marked as changed.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Created">
      <summary>
            The datetime when the content was created.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.StartPublish">
      <summary>
            The start publish date of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.StopPublish">
      <summary>
            The stop publish date of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Saved">
      <summary>
            The datetime when the content was last saved.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Status">
      <summary>
            Status of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel.Properties">
      <summary>
            Other properties of the content.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaItemModel">
      <summary>
                Serializable model class for ContentAreaItem 
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaItemModel.DisplayOption">
      <summary>
            Display option
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaItemModel.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentAreaItemModel.ContentLink">
      <summary>
            Mapped property for ContentReference
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentLanguageModel">
      <summary>
            Serializable model class for store IContent language-related information  
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentLanguageModel.Link">
      <summary>
            Url of content in this language. Ex: /en/alloy-plan
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference">
      <summary>
            Serializable model class for ContentReference.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.Id">
      <summary>
            Id number of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.WorkId">
      <summary>
            The version id of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.GuidValue">
      <summary>
            The unique identifier of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.ProviderName">
      <summary>
            The provider name that serves the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.Url">
      <summary>
            Url of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.Language">
      <summary>
            Language of the content.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.ContentModelReference.Expanded">
      <summary>
            The expanded content of the content.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.DateListPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyDateList" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.DateTimePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyDate" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.DocumentUrlPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyDocumentUrl" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.DoubleListPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyDoubleList" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.FileSortOrderPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyFileSortOrder" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.FloatPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyFloatNumber" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.FramePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyFrame" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel">
      <summary>
            Signature for models that represents a content item being serialized
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel.ContentLink">
      <summary>
            The reference for the content item
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel.Language">
      <summary>
            The language for the content item
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel.Name">
      <summary>
            The name of the content item
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel.Properties">
      <summary>
            Other properties that should be serialized in the content representation
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.ImageUrlPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyImageUrl" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.IntegerListPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyIntegerList" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.LanguageModel">
      <summary>
            Serializable model class for store language information
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.LanguageModel.DisplayName">
      <summary>
            Display name of language. Ex: English, Svenska
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.LanguageModel.Name">
      <summary>
            Name of language. Ex: en, sv
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.LanguagePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyLanguage" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.LinkItemNode">
      <summary>
                Serializable model class for EPiServer.SpecializedProperties.LinkItem 
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.LongStringPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyLongString" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.NumberPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyNumber" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.PageTypePropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyPageType" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2">
      <summary>
            Base class implementation for IPropertyModel types
            </summary>
      <typeparam name="TValue">Type of the Value property. This can be primitive type of reference type.(E.g string, double, bool, CategoryModel...)  </typeparam>
      <typeparam name="TType">Type of the Type property inherited from <see cref="T:EPiServer.Core.PropertyData" />.
            	E.g: TType can be PropertyPageReference or PropertyLongString, etc...
            </typeparam>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.#ctor(`1)">
      <summary>
            Initialize a new instance of PropertyModel
            </summary>
      <param name="type">EpiServer's <see cref="T:EPiServer.Core.PropertyData" /> to map with this property model</param>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.Name">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.PropertyDataProperty">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.PropertyDataType">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.EPiServer#ContentApi#Core#Serialization#Internal#ISimplePropertyModel#Value">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.Flatten">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.Models.PropertyModel`2.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Iterate through a list of items and run action
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="items">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.SelectorPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertySelector" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionLanguageModel">
      <summary>
            Define SiteDefinitionLanguageModel
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionLanguageModel.IsMasterLanguage">
      <summary>
            Defines if this language model is master language or not
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionLanguageModel.UrlSegment">
      <summary>
            The string uses to represent this language as a URL segment
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionLanguageModel.Url">
      <summary>
            The primary location of the site language.
            </summary>
      <remarks>
            This property is only include when hosts are excluded from the main site information.
            </remarks>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionModel">
      <summary>
            POCO class for store SiteDefinitionModel
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.SortOrderPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertySortOrder" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.StringListPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyStringList" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.StringPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.Core.PropertyString" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.TypeModel">
      <summary>
            This class defines the relation between data types of EPiServer and that of ContentApi for data handling before returning it to clients.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.TypeModel.PropertyType">
      <summary>
            type of Episerver property
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.TypeModel.ModelType">
      <summary>
            The type of the class that takes care of the rendering. Needs to implement the generic interface <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" />.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.Models.TypeModel.ModelTypeString">
      <summary>
            name of Content Api mapped property's type. Normally the same name as the name of the ModelType.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.UrlPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyUrl" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.VirtualLinkPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyVirtualLink" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.Models.WeekdayPropertyModel">
      <summary>
            Mapped property model for <see cref="T:EPiServer.SpecializedProperties.PropertyWeekDay" /></summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ContentConvertingService">
      <summary>
            Handles conversions from <see cref="T:EPiServer.Core.IContent" /> instances to <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /> instances.
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <remarks>
            Custom content converters are registered by registering <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverterProvider" /> implementations in IOC container.
            Custom property converters are registered by registring <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverterProvider" /> implementation in IOC container.
            </remarks>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentConvertingService.#ctor">
      <summary>
            Only to be used from unit tests
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentConvertingService.#ctor(EPiServer.ContentApi.Core.Serialization.IContentConverterResolver,System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.Serialization.IContentFilter},System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.Serialization.IContentApiModelFilter})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.ContentConvertingService" /></summary>
      <param name="contentConverterResolver">
      </param>
      <param name="contentFilters">
      </param>
      <param name="contentApiModelFilters">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentConvertingService.ConvertToContentApiModel(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Converts a <see cref="T:EPiServer.Core.IContent" /> instance to a <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /> model to use from an expanded property
            </summary>
      <param name="content">The content instance to convert</param>
      <param name="converterContext">The current conversion context</param>
      <returns>A created <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /></returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentConvertingService.Convert(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Converts a <see cref="T:EPiServer.Core.IContent" /> instance to a <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel" /></summary>
      <param name="content">The content instance to convert</param>
      <param name="converterContext">The current conversion context</param>
      <returns>A created <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.IContentApiModel" /></returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ConverterContext">
      <summary>
            Context used when converting <see cref="T:EPiServer.Core.IContent" /> instances to <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /><para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ConverterContext.#ctor(EPiServer.ContentApi.Core.Configuration.ContentApiOptions,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.ConverterContext" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ConverterContext.#ctor(EPiServer.ContentApi.Core.Configuration.ContentApiOptions,System.String,System.String,System.Boolean,System.Globalization.CultureInfo,EPiServer.Web.ContextMode)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Serialization.ConverterContext" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.Options">
      <summary>
            The options to use during mapping
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.ExpandedProperties">
      <summary>
            Contains properties that should be expanded, separated by comma. Eg: expand=MainContentArea,productPageLinks. Expand='*' means all properties should be expanded
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.SelectedProperties">
      <summary>
            Contains properties that should be selected, separated by comma. Eg: select=MainContentArea,productPageLinks. If no specific properties are selected is all returned
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.ExcludePersonalizedContent">
      <summary>
            Indicates whether or not to return personalization data in the instance of the ContentApiModel
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.Language">
      <summary>
            The content language for this context
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.ContextMode">
      <summary>
            The context mode this converter context should operate under.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ConverterContext.ShouldExpand(System.String)">
      <summary>
            Determines if property with specified <paramref name="propertyName" /> should be expanded
            </summary>
      <param name="propertyName">The property name that expand should be determined for</param>
      <returns>true if property should be expanded else false</returns>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.IsContentManagementRequest">
      <summary>
            The request comes from ContentManagementApi if true
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.ShouldIncludeAllPersonalizedContent">
      <summary>
            Indicates whether or not to return personalization data in the property model
            </summary>
      <returns>true if request is coming from ContentManagementApi, otherwise false</returns>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ConverterContext.ShouldIgnoreExpandValue">
      <summary>
            Indicates whether or not to return expand data in the property model
            </summary>
      <returns>true if request is coming from ContentManagementApi, otherwise false</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentApiModelFilter">
      <summary>
            Signature for component that can filter a <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /> instance before it gets serialized.
            Implemenations should inherit <see cref="T:EPiServer.ContentApi.Core.Serialization.ContentApiModelFilter`1" /> and registered as <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentApiModelFilter" /> in IOC container
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentApiModelFilter.Filter(EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Implementations will be called with the created <paramref name="contentApiModel" /> before it gets serialized
            </summary>
      <param name="contentApiModel">The content api model to be serialized</param>
      <param name="converterContext">The current converter context</param>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IContentApiModelFilter.HandledContentApiModel">
      <summary>
            The content api model the implementation handles
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ContentApiModelFilter`1">
      <summary>
            Base class that can be used for components that wants to change a <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /> instance before it is serialized
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <typeparam name="T">The content model T that the implementation handles.</typeparam>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ContentApiModelFilter`1.EPiServer#ContentApi#Core#Serialization#IContentApiModelFilter#HandledContentApiModel">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentApiModelFilter`1.EPiServer#ContentApi#Core#Serialization#IContentApiModelFilter#Filter(EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentApiModelFilter`1.Filter(`0,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Implementations will be called with the created <paramref name="contentApiModel" /> before it gets serialized
            </summary>
      <param name="contentApiModel">The content api model to be serialized</param>
      <param name="converterContext">The current converter context</param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentConverter">
      <summary>
            Interface for mapping <see cref="T:EPiServer.Core.IContent" /> to <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel" /><para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentConverter.Convert(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
             Maps an instance of IContent to ContentApiModel
             </summary>
      <param name="content">The IContent object that the ContentModel is generated from</param>
      <param name="contentMappingContext">The context for current content mapping</param>
      <returns>Instance of ContentModel</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentConverterProvider">
      <summary>
            Signature for component that provides <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> instances
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IContentConverterProvider.SortOrder">
      <summary>
            The mapper with higher order is chosen to handle a specific content in different contexts. The Default implementation has Order 100.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentConverterProvider.Resolve(EPiServer.Core.IContent)">
      <summary>
            Determines if provider supports specified <paramref name="content" /> type and if so returns a matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> instance. If <paramref name="content" /> is not supported return null
            </summary>
      <param name="content">instance of <see cref="T:EPiServer.Core.IContent" /> to resolve <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> for</param>
      <returns>A matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> or null if <paramref name="content" /> is not supported by the provider</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentConverterResolver">
      <summary>
            Signature for component that resolves which <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> instance that should be used
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentConverterResolver.Resolve(EPiServer.Core.IContent)">
      <summary>
            Resolves which <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> instance that should be used for <paramref name="content" /></summary>
      <param name="content">The <see cref="T:EPiServer.Core.IContent" /> instance to resolve <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /> for</param>
      <returns>A matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentConverter" /></returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentFilter">
      <summary>
            Signature for component that can filter a <see cref="T:EPiServer.Core.IContent" /> instance or perform some operations before it gets converted.
            Implemenations should inherit <see cref="T:EPiServer.ContentApi.Core.Serialization.ContentFilter`1" /> and registered as <see cref="T:EPiServer.ContentApi.Core.Serialization.IContentFilter" /> in IOC container
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentFilter.Filter(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Implementation will receive a writable content instance where it can for example remove/null a property before it gets converted.
            </summary>
      <param name="content">The content item to be converted</param>
      <param name="converterContext">The current converter context</param>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IContentFilter.HandledContentModel">
      <summary>
            The content model the implementation handles
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ContentFilter`1">
      <summary>
            Base class that can be used for components that wants to change a <see cref="T:EPiServer.Core.IContent" /> instance or perform some operations before it is converted
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
      <typeparam name="T">The content model T that the implementation handles.</typeparam>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.ContentFilter`1.EPiServer#ContentApi#Core#Serialization#IContentFilter#HandledContentModel">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentFilter`1.EPiServer#ContentApi#Core#Serialization#IContentFilter#Filter(EPiServer.Core.IContent,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ContentFilter`1.Filter(`0,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Implementation will receive a writable content instance where it can for example remove/null a property before it gets converted.
            </summary>
      <param name="content">The content item to be converted</param>
      <param name="converterContext">The current converter context</param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentItem">
      <summary>
             Interface that must be implemented by an item that contains that the property ContentModelReference 
             It 's needed for data serialization for clients
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IContentItem.ContentLink">
      <summary>
            Mapped property for ContentReference
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IContentModelReferenceConverter">
      <summary>
            interface for generating instances of ContentModelReference
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentModelReferenceConverter.GetContentModelReference(EPiServer.Core.IContent)">
      <summary>
            Returns an instance of ContentModelReference based on provided IContent
            </summary>
      <param name="content">IContent instance</param>
      <returns>ContentModelReference</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IContentModelReferenceConverter.GetContentModelReference(EPiServer.Core.ContentReference)">
      <summary>
            Returns an instance of ContentModelReferece based on provided ContentReference
            </summary>
      <param name="contentReference">ContentReference instance</param>
      <returns>ContentModelReference</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IExcludeFromModelTypeRegistration">
      <summary>
            This interface indicates that a property model should be ignored in default model type registration
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IExpandableProperty`1">
      <summary>
            Allow to define data type returned for expand value
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IExpandableProperty`1.ExpandedValue">
      <summary>
            Store expanded properties
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IExpandableProperty">
      <summary>
            Normally, a property only contains the basic information (e.g. contentlink : {name, workid} ). 
            But for some special ones, clients may want to get full information of it (e.g. contentlink: {name, workid, publishdate, editdate, etc}), 
            so in this case, those properties should inherit this interface.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IExpandableProperty.Expand(System.Globalization.CultureInfo)">
      <summary>
            Retrieve all sub-properties of expanded property with given language and store into ExpandedValue/&gt;
            </summary>
      <param name="language">
      </param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IFlattenableProperty">
      <summary>
            Identifies a property that supports flattening the model for serialization.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IFlattenableProperty.Flatten">
      <summary>
            Flatten the <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" /> to prepare it for serialization.
            </summary>
      <returns>The value of the property</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPersonalizableProperty">
      <summary>
                Interface indicating that a property is Personalized
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPersonalizableProperty.ExcludePersonalizedContent">
      <summary>
            Define if Personalized Content should be exclude when retrieve content
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter">
      <summary>
            Signature for a component that converts a <see cref="T:EPiServer.Core.PropertyData" /> instance to a <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel" /> instance
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IPropertyConverter.Convert(EPiServer.Core.PropertyData,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
            Returns an instance of IPropertyModel based from the provided PropertyData
            </summary>
      <param name="propertyData">Instance of PropertyData which the IPropertyModel result is generated from.</param>
      <param name="contentMappingContext">The context for current content mapping</param>
      <returns>Instance of IPropertyModel</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverterProvider">
      <summary>
            Signature for component that provides <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> instances
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyConverterProvider.SortOrder">
      <summary>
            The provider which has higher order will be called first to see if it handles specified <see cref="T:EPiServer.Core.PropertyData" /> type
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IPropertyConverterProvider.Resolve(EPiServer.Core.PropertyData)">
      <summary>
            Determines if provider supports specified <paramref name="propertyData" /> type and if so returns a matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> instance. If <paramref name="propertyData" /> is not supported return null
            </summary>
      <param name="propertyData">instance of <see cref="T:EPiServer.Core.PropertyData" /> to resolve <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> for</param>
      <returns>A matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> or null if <paramref name="propertyData" /> is not supported by the provider</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverterResolver">
      <summary>
            Signature for component that resolves <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> instances
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IPropertyConverterResolver.Resolve(EPiServer.Core.PropertyData)">
      <summary>
            Resolves a matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> instance for <paramref name="propertyData" />. If no matching converter is registered null is returned
            </summary>
      <param name="propertyData">instance of <see cref="T:EPiServer.Core.PropertyData" /> to resolve <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> for</param>
      <returns>A matching <see cref="T:EPiServer.ContentApi.Core.Serialization.IPropertyConverter" /> or null if <paramref name="propertyData" /> is not matched</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel`1">
      <summary>
            Describing which EPiServer PropertyData is mapped with a specific Content Api's property model
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyModel`1.PropertyDataProperty">
      <summary>
            Type of <see cref="T:EPiServer.Core.PropertyData" /> (E.g PropertyContentReference or PropertyDoubleList) to be mapped with Content Api's property view model
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IPropertyModel">
      <summary>
            Define basic information for a content api's property model that is mapped with a specific EPiServer PropertyData
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyModel.Name">
      <summary>
            The name of the content api's Property Model, by default, it's value is the name of the Episerver Property type.(Use property `name` of <see cref="T:EPiServer.Core.PropertyData" /> in EpiServer Core.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Serialization.IPropertyModel.PropertyDataType">
      <summary>
            The type name of the EPiServer PropertyData.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ISiteDefinitionConverter">
      <summary>
            Interface for mapping <see cref="T:EPiServer.Web.SiteDefinition" /> to <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionModel" /><para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ISiteDefinitionConverter.Convert(EPiServer.Web.SiteDefinition,EPiServer.ContentApi.Core.Serialization.ConverterContext)">
      <summary>
             Maps an instance of <see cref="T:EPiServer.Web.SiteDefinition" /> to <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionModel" /></summary>
      <param name="site">The site definition object that the model is generated from</param>
      <param name="context">The context for current conversion</param>
      <returns>A new <see cref="T:EPiServer.ContentApi.Core.Serialization.Models.SiteDefinitionModel" /> instance.</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.IXHtmlStringPropertyRenderer">
      <summary>
            Interface for the implementation of rendering PropertyXhtmlStrings
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.IXHtmlStringPropertyRenderer.Render(EPiServer.SpecializedProperties.PropertyXhtmlString,System.Boolean)">
      <summary>
            Renders an PropertyXHtmlString and returns it as a string. Takes a boolean to determine 
            if personalization should be included when rendering.
            </summary>
      <param name="xhtmlString">PropertyXhtmlString</param>
            /// <param name="excludePersonalizedContent">excludePersonalizedContent</param><returns>string</returns></member>
    <member name="T:EPiServer.ContentApi.Core.Serialization.ReflectionService">
      <summary>
            Service handle object creation and reflection
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api /> //for easier mock in test
        <exclude /></member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository)">
      <summary>
            Initialize an instance of relection service
            </summary>
      <param name="contentTypeModelRepository">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.CreateInstance(System.Type,System.Object[])">
      <summary>
            Create a instance of given type with parameters
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.GetAttributes(EPiServer.DataAbstraction.ContentType,EPiServer.Core.PropertyData)">
      <summary>
            Get attributes of an Episerver property from content type
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.GetAttributesFromType(System.Type,System.String)">
      <summary>
            Get Attributes from model type
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Serialization.ReflectionService.GetPropertyInfoFromInterface(System.Type,System.String)">
      <summary>
            Get property info from interface
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an ETag for content
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator.#ctor(System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.IContentApiHeaderProvider})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator" /></summary>
      <param name="contentApiHeaderProviders">Declaration of headers that are part of the etag calculation</param>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator.Generate(System.Net.Http.HttpRequestMessage,EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an ETag for content
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.ContentETagGenerator.Generate(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an ETag for a specific content
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.Internal.DefaultOutputCacheProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider" /></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains constants for the default dependency types
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes.Site">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a dependency to Site
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes.Content">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a dependency to Content
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes.Children">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a dependency to Children
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes.Ancestors">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a dependency to Ancestors
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.ParseUriHelper.TryParseContentLinkForRequest(System.Uri,EPiServer.Web.IPermanentLinkMapper,System.String,EPiServer.Core.ContentReference@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Try parse content link for request: Get children of a content or get ancestors of a content
            </summary>
      <param name="uri">Request uri</param>
      <param name="permanentLinkMapper">Permanent Link Mapper</param>
      <param name="segmentName">segment name to extract the request content link. It would be 
                'children' :  in case getting children
                'ancestors': in case getting ancestors
            </param>
      <param name="requestContentLink">the requested content link</param>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.Internal.SiteETagGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an ETag for site definitions
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.Internal.SiteETagGenerator.Generate(System.Collections.Generic.IEnumerable{EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an ETag for site definitions
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator">
      <summary>
            Defines signature for a component that evaluates if current request can be cached
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator.HandledType">
      <summary>
            The type of item (e.g. Content or Site) that this collector handles
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator.EvaluateRequest(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.Security.Claims.ClaimsIdentity)">
      <summary>
            Evaluates if current <paramref name="responseMessage" /> can be cached
            </summary>
      <param name="requestMessage">The current request</param>
      <param name="responseMessage">The current response</param>
      <param name="identity">The current user</param>
      <returns>An <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult" /> that specifies if the response can be cached</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider">
      <summary>
            Signature for component that provides the output caching feature
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider.GetAsync(System.Net.Http.HttpRequestMessage,System.Security.Claims.ClaimsIdentity)">
      <summary>
            Get the <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult" /> given the request and identity
            </summary>
      <param name="requestMessage">The current request</param>
      <param name="identity">The current identity</param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider.SetAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult,System.Security.Claims.ClaimsIdentity)">
      <summary>
            Set the cache entry 
            </summary>
      <param name="requestMessage">The current request</param>
      <param name="responseMessage">The current response</param>
      <param name="outputCacheEvaluateResult">The result of the evaluation from <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator" /> instances</param>
      <param name="identity">The current identity</param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider.Remove(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes all entries that has any dependency in <paramref name="dependencyKeys" /></summary>
      <param name="dependencyKeys">Cache keys for the effected content items</param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheProviderExtensions">
      <summary>
            Extends <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.OutputCacheProviderExtensions.Remove(EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider,System.String)">
      <summary>
            Removes all entries that has a dependency to <paramref name="dependencyKey" /></summary>
      <param name="outputCacheProvider">
      </param>
      <param name="dependencyKey">Cache key for the effected content item</param>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult">
      <summary>
            Represents a result from 
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.IsCachable(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTime})">
      <summary>
            Creates a <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult" /> for a cachable request
            </summary>
      <param name="etag">A generated ETag for the <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator" /></param>
      <param name="dependencyKeys">The dependecy keys for the <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator" /></param>
      <param name="expires">The expire date for the cached result, if any</param>
      <returns>A cachable <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult" /></returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.NotCachable">
      <summary>
            Creates a <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult" /> for a none cachable request
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.#ctor(System.Boolean,System.String,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.ETag">
      <summary>
            A calculated ETag for this <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheEvaluator" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.IsCacheable">
      <summary>
            Indicate whether the request can be cached or not. Returns true if request can be cached else false.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.Expires">
      <summary>
            Returns the time when the result expires (if any)
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheEvaluateResult.DependencyKeys">
      <summary>
            A list of all dependencies for this request
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheFilterAttribute">
      <summary>
            Action Filter reponsible for handling output cache functionality
            <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheFilterAttribute.Types">
      <summary>
            The type of item (e.g. <see cref="F:EPiServer.ContentApi.Core.OutputCache.Internal.DependencyTypes.Content" />) that will be handled by this filter. 
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult">
      <summary>
            Represents a output cache result of <see cref="T:EPiServer.ContentApi.Core.OutputCache.IOutputCacheProvider" /></summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult.#ctor(System.Boolean,System.Net.Http.HttpResponseMessage)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult.Success">
      <summary>
            Indicate whether the cache result is hit or not. True if the cache hit, otherwise false.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.OutputCache.OutputCacheResult.Response">
      <summary>
            The Http response message that will be returned in case the cache is hit.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.PagedResult`1">
      <summary>
            Represent a page of items and the total items.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.PagedResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
      <summary>
            Initializes a new instacne of the <see cref="T:EPiServer.ContentApi.Core.PagedResult`1" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.PagedResult`1.PagedItems">
      <summary>
            Paged items in the source list.
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.PagedResult`1.TotalCount">
      <summary>
            Total item count in the source list.
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.PagingToken">
      <summary>
            The next token contains the information that needs to get the next page
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.PagingToken.LastIndex">
      <summary>
            The last index of the current batch
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.PagingToken.Top">
      <summary>
            The amount of content is requested
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.PagingToken.TotalCount">
      <summary>
            Total item count of the data
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.PreviewFeatureFilterAttribute">
      <summary>
            Action filter that only allows execution of request if EnablePreviewFeatures is
            set to true in the content api configuration.
            Otherwise returns Forbidden
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.RouteConstants">
      <summary>
            Class for storing constants of Content Delivery Api
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.RouteConstants.BaseContentApiRoute">
      <summary>
            Base route prefix for Content Delivery Api endpoints
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.RouteConstants.VersionTwoApiRoute">
      <summary>
            Base route prefix for Content Delivery Api endpoints
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.RouteConstants.VersionThreeApiRoute">
      <summary>
            Base route prefix for Content Delivery Api endpoints
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.RouteConstants.AcceptLanguage">
      <summary>
            Accept language header
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.RouteConstants.JsonContentType">
      <summary>
            Accept type application/json 
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService">
      <summary>
            Responsible for authorizing user
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.#ctor">
      <summary>
            Exposed for tests
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.#ctor(EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration,EPiServer.ContentApi.Core.Internal.RoleService,EPiServer.ContentApi.Core.Internal.UserService,EPiServer.ContentApi.Core.Security.ISecurityPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.Authorize(System.Web.Http.Controllers.HttpActionContext)">
      <summary>
            Authorize user by using Principal object of current http context
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.IsUserHasMinimumRole(System.Security.Principal.IPrincipal,System.Collections.Generic.List{System.String})">
      <summary>
            Check if user has minimum roles or not
            Return true if user has at lease one valid minimum role, otherwise return false.        
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.CanUserAccessContent(EPiServer.Core.IContent)">
      <summary>
            Check if given content is valid.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.CanUserAccessContent(EPiServer.Core.ContentReference)">
      <summary>
            Check if given content reference is valid.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.IsAnonymousAllowedToAccessContent(EPiServer.Core.ContentReference)">
      <summary>
            Determines wether anonymous principal has read access to specified content
            </summary>
      <param name="contentLink">A reference to the content item to check for anonymous access</param>
      <returns>True if anonymous has read access else false</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.IsAnonymousAllowedToAccessContent(EPiServer.Core.IContent)">
      <summary>
            Determines wether anonymous principal has read access to specified content
            </summary>
      <param name="content">The content item to check for anonymous access</param>
      <returns>True if anonymous has read access else false</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ContentApiAuthorizationService.ShouldFilterContent(EPiServer.Core.IContent)">
      <summary>
            Check whether a content should be filtered by the SiteFilter, RequiredRoleFilter and the current user is not allowed to read.
            </summary>
      <param name="content">The content to check.</param>
      <returns> 
                True if the given content should be filtered by the SiteFilter, RequiredRoleFilter and the current user is not allowed to read,
                False otherwise.
            </returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.IContentApiRequiredRoleFilter">
      <summary>
                Interface for a filter which ensures that the Content Api Required Role setting is enforced
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.IContentApiRequiredRoleFilter.FilterContents(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
      <summary>
            Based on the provided IEnumerable of IContent, return an List of IContent 
            that includes only instances of IContent that have the required role attached
            </summary>
      <param name="content">IEnumable of IContent to filter</param>
      <returns>List of content that were not filtered out</returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.IContentApiRequiredRoleFilter.ShouldFilterContent(EPiServer.Core.IContent)">
      <summary>
            Based on the provided IContent instance, return a bool indicating if the provided content should be filtered out.
            </summary>
      <param name="content">IContent filter</param>
      <returns>true if the Content should be filtered, false if it should not</returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.IContentApiSiteFilter">
      <summary>
            Inferface for Site Filter. Determines if content should be filtered based on the site definition
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.IContentApiSiteFilter.FilterContents(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Web.SiteDefinition)">
      <summary>
            Based on the provided IEnumerable of IContent and SiteDefinition, return an List of IContent 
            that includes only instances of IContent that should be included
            </summary>
      <param name="content">IContent</param>
      <param name="siteDefinition">SiteDefinition</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.IContentApiSiteFilter.ShouldFilterContent(EPiServer.Core.IContent,EPiServer.Web.SiteDefinition)">
      <summary>
            Based on the provided IContent and SiteDefinition, return a bool indicating if the provided content should be filtered.
            </summary>
      <param name="content">IContent</param>
      <param name="siteDefinition">SiteDefinition</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiAuthorizationAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Content Api attribute with enforces the MinimumRoles property on the <see cref="T:EPiServer.ContentApi.Core.Configuration.ContentApiOptions" />
                 This is used to set which minimum roles (if any) are required to hit the Content Search Api
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.Security.Internal.ContentApiAuthorizationAttribute.AuthorizationService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Service for handling authorization logic
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.Security.Internal.ContentApiAuthorizationAttribute.ContentBuilderService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Service for handler Json Serialize
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.Security.Internal.ContentApiAuthorizationAttribute.PrincipalAccessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Service for initializing and accessing current <see cref="T:System.Security.Principal.IPrincipal" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiAuthorizationAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Authorizing user identity using AuthorizationService before forwarding the request to controller.         
            When it come to this method, the request has been go through OWIN pipeline
            and the token has been parsed. User information and claims can be retrieved from Principal object of current context
            </summary>
      <param name="actionContext">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiCorsAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Attribute which implements <see cref="T:System.Web.Http.Cors.ICorsPolicyProvider" /> in order to configure allowed origins within the Content Api.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ContentApi.Core.Security.Internal.ContentApiCorsAttribute._corsPolicyService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get Cors policy to verify access control origin 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiCorsAttribute.GetCorsPolicyAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get Cors policy to veirfy access control origin 
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiRequiredRoleFilter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Interface for a filter which ensures that the Content Api Required Role setting is enforced
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiRequiredRoleFilter.#ctor(EPiServer.ContentApi.Core.Internal.RoleService,EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiRequiredRoleFilter" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiRequiredRoleFilter.FilterContents(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Based on the provided IEnumerable of IContent, return an List of IContent 
            that includes only instances of IContent that have the required role attached
            </summary>
      <param name="content">IEnumable of IContent to filter</param>
      <returns>List of content that were not filtered out</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiRequiredRoleFilter.ShouldFilterContent(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Based on the provided IContent instance, return a bool indicating if the provided content should be filtered out.
            </summary>
      <param name="content">IContent filter</param>
      <returns>true if the Content should be filtered, false if it should not</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiSiteFilter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Interface for a filter which ensures that the MultiSiteFilteringEnabled setting is enforced 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiSiteFilter.#ctor(EPiServer.Web.ISiteDefinitionResolver,EPiServer.ContentApi.Core.Configuration.ContentApiConfiguration,EPiServer.IContentLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ContentApi.Core.Security.Internal.ContentApiSiteFilter" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiSiteFilter.FilterContents(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Web.SiteDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if each IContent instance should be filtered by checking it against the ShouldFilterContent method.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.ContentApiSiteFilter.ShouldFilterContent(EPiServer.Core.IContent,EPiServer.Web.SiteDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Compares the SiteDefinition provided with the SiteDefinition retrieved based on the provided content. If those
            values are not equal, and MultiSiteFilteringEnabled is enabled in configuration, we return true, indicating we 
            should filter the IContent
            </summary>
      <param name="content">IContent</param>
      <param name="siteDefinition">SiteDefinition</param>
      <returns>bool</returns>
      <exception cref="T:System.ArgumentException">
            Thrown if the provided IContent is null.
            </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.CorsOptionsActionFilter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Action Filter which returns 200 Response for OPTIONS Requests. CORs requests will hit this action filter only if they have a valid origin
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.CorsOptionsActionFilter.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.Internal.DefaultSecurityPrincipal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.ContentApi.Core.Security.ISecurityPrincipal" /> for initialzing and accessing <see cref="T:System.Security.Principal.IPrincipal" /> within ContentApi's scope.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.DefaultSecurityPrincipal.InitializePrincipal(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get <see cref="T:System.Security.Principal.IPrincipal" /> from provided <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. Set Principal on current thread and current <see cref="T:System.Web.HttpContext" /></summary>
      <param name="actionContext">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.DefaultSecurityPrincipal.GetCurrentPrincipal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.Internal.DefaultSecurityPrincipal.GetAnonymousPrincipal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Security.ISecurityPrincipal">
      <summary>
            Initialzing and accessing <see cref="T:System.Security.Principal.IPrincipal" /> within ContentApi's scope.
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ISecurityPrincipal.InitializePrincipal(System.Web.Http.Controllers.HttpActionContext)">
      <summary>
            Initialize principal with provided HttpActionContext
            We must set the <see cref="T:System.Security.Principal.IPrincipal" /> on to places: Thread.CurrentPrincipal and HttpContext.Current.User 
            </summary>
      <param name="actionContext">
      </param>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ISecurityPrincipal.GetCurrentPrincipal">
      <summary>
            Get the current principal 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Security.ISecurityPrincipal.GetAnonymousPrincipal">
      <summary>
            Retrieve an anonymous Principal with configured virtual roles applied such as for example EveryoneRole
            </summary>
      <remarks>The returned principal is a singleton instance and should not be altered.</remarks>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext">
      <summary>
            A context object that contains information about whats included in current API request
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext.ReferencedContent">
      <summary>
            A list of all referenced content that are included in the output of current request
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext.SecuredContent">
      <summary>
            A list of all referenced content that are not publically available
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext.ReferencedSites">
      <summary>
            A list of all referenced sites that are returned to clients
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.IContentApiTrackingContextAccessor">
      <summary>
            Accessor to get the <see cref="T:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext" /> that is associated with current request
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.IContentApiTrackingContextAccessor.Current">
      <summary>
            The <see cref="T:EPiServer.ContentApi.Core.Tracking.ContentApiTrackingContext" /> associated with current request
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.Internal.TrackingContentFilter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Filter reponsible for adding tracking logic when converting IContent
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.LanguageContentReference">
      <summary>
            Represent a reference to a content item in a specific language
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ContentApi.Core.Tracking.LanguageContentReference" /></summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.ContentLink">
      <summary>
            Reference to a content
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.Language">
      <summary>
            The language of the content
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.Equals(EPiServer.ContentApi.Core.Tracking.LanguageContentReference,System.Boolean)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.ContentApi.Core.Tracking.LanguageContentReference" /> is equal to another <see cref="T:EPiServer.ContentApi.Core.Tracking.LanguageContentReference" />.
            </summary>
      <param name="other">A <see cref="T:EPiServer.ContentApi.Core.Tracking.LanguageContentReference" /> to compare with this object.</param>
      <param name="ignoreVersion">Indicates if version information should be excluded from the comparison.</param>
      <returns>
            true if the current object is considered equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.Equals(EPiServer.ContentApi.Core.Tracking.LanguageContentReference)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.LanguageContentReference.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.ReferencedContentMetadata">
      <summary>
                Metadata for referenced content
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ReferencedContentMetadata.ExpirationTime">
      <summary>
                Expiration time
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ReferencedContentMetadata.SavedTime">
      <summary>
                Saved time
            </summary>
    </member>
    <member name="P:EPiServer.ContentApi.Core.Tracking.ReferencedContentMetadata.PersonalizedProperties">
      <summary>
                A list of all personalized properties associated with content
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata">
      <summary>
            Metadata for a site
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata.DefaultInstance">
      <summary>
            This plays a role as a common cache key that can be used to evict etag (for get list of site) when a site is added/updated/deleted
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata.Id">
      <summary>
            Site Id
            </summary>
    </member>
    <member name="F:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata.Saved">
      <summary>
            The recent time that the site has been updated
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata.GetHashCode">
      <summary>
            Get hashcode for the class for comparison
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata.Equals(EPiServer.ContentApi.Core.Tracking.ReferencedSiteMetadata)">
      <summary>
            Compare the current object with another object
            </summary>
    </member>
    <member name="T:EPiServer.ContentApi.Core.UrlResolverService">
      <summary>
            Handling Content Api url resolver logic
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.UrlResolverService.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />  //For easier mocking
        <exclude /></member>
    <member name="M:EPiServer.ContentApi.Core.UrlResolverService.ResolveUrl(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Resolve url by content link and language. By default, this function always resolve url using view mode context 
            </summary>
    </member>
    <member name="M:EPiServer.ContentApi.Core.UrlResolverService.ResolveUrl(System.String)">
      <summary>
            Resolve an internal link.
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.DeliveryServiceConfigurationProviderExtensions">
      <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /></summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.DeliveryServiceConfigurationProviderExtensions.ConfigureForExternalTemplates(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Configures CMS and ContentDeliveryAPI to be used from external templates application.
            </summary>
      <param name="services">The service provider extended</param>
      <returns>The service provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.DeliveryServiceConfigurationProviderExtensions.ConfigureForContentDeliveryClient(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Configures some general options for Content Delivery client.
            </summary>
      <para>
            Preview API: This API is current in preview state meaning it might change between minor versions
            </para>
      <param name="services">The service provider extended</param>
      <returns>The service provider</returns>
    </member>
  </members>
</doc>