<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Marketing.Testing.Web</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector">
            <summary>
            Handles client side KPI markup.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Constructor
            </summary>
            <param name="serviceLocator">Dependency container</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.ActivateClientKpis(System.Collections.Generic.List{EPiServer.Marketing.KPI.Manager.DataClass.IKpi},EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Checks for any client KPIs which may be assigned to the test and injects the provided
            markup via the current response.
            </summary>
            <param name="kpis">List of KPIs.</param>
            <param name="cookieData">Cookie data related to the current test and KPIs.</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.AppendClientKpiScript">
            <summary>
            Gets the associated script for a client KPI and appends it.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.ShouldInjectKpiScript(System.Collections.Generic.Dictionary{System.Guid,EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie})">
            <summary>
            Determines whether or not client-side KPI scripts need to be injected into the response.
            </summary>
            <param name="clientKpiList">Collection of client KPIs</param>
            <returns>True if the script needs to be injected, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.ShouldActivateKpis(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Determines whether or not client KPIs should be activated for the current request.
            </summary>
            <param name="cookieData">Test cookie data</param>
            <returns>True if client KPIs should be activated, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.Inject(System.String)">
            <summary>
            Injects the specified script into the response stream.
            </summary>
            <param name="script">Script to inject</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.BuildClientScript(System.Guid,System.Guid,System.Int32,System.String)">
            <summary>
            Renders the template script for an individual client KPI with the given parameters.
            </summary>
            <param name="kpiId">ID of KPI</param>
            <param name="testId">ID of test</param>
            <param name="versionId">Variant item version</param>
            <param name="clientScript">KPI evaluation script</param>
            <returns>Script rendered from the template</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ClientKPI.ClientKpiInjector.ReadScriptFromAssembly(System.String)">
            <summary>
            Reads the specified resource from the current assembly.
            </summary>
            <param name="resourceName">Name of resource</param>
            <returns>Resource that was loaded</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings">
            <summary>
            ABTest settings that are configurable via the admin config page
            </summary>
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings.KpiLimit">
            <summary>
            Hardcoded limit is set to 5.  This is not part of the UI, but can be added if users request it.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings.Reset">
            <summary>
            Resets the config and forces a re-read of the settings from the db.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings.Current">
            <summary>
            Gets the current config
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Marketing.Testing.Web.Config.AdminConfigTestSettings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Context.MarketingTestingContextResolver.VerifyUri(System.Uri)">
            <summary>
            check url to resolve for actionable segments
            Segment 1 = guid and guid type
            Segment 2 = View to render
            </summary>
            <param name="uri">Uri to validate</param>
            <returns>a flag to indicate if the Uri passed in is acceptable to continue with</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Controllers.ABArchivedTestStore">
            <summary>
            This is the main RestSTore the UI compontents use to manage IMarketingTestObjects 
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.ABArchivedTestStore.Get(System.String)">
            <summary>
            Given the CMS content Guid, returns JSON encoded test object
            </summary>
            <param name="id">Guid of the cms content</param>
            <returns>IMarketingTest object in a Rest result or InternalServerError</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Controllers.ABTestStore">
            <summary>
            This is the main RestStore the UI components use to manage IMarketingTestObjects.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.ABTestStore.Get(System.String)">
            <summary>
            Given the CMS content Guid, returns JSON encoded test object.
            </summary>
            <param name="id">Guid of the CMS content.</param>
            <returns>IMarketingTest object in a Rest result or InternalServerError.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.ABTestStore.Delete(System.String)">
            <summary>
            Given the CMS content Guid, deletes the specified IMarketingTest (if found).
            </summary>
            <param name="id">Guid of the CMS content.</param>
            <returns>HttpStatusCode.OK or InternalServerError</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.ABTestStore.Post(EPiServer.Marketing.Testing.Web.Models.TestingStoreModel)">
            <summary>
            Creates a new test using the supplied TestingStoreModel.
            </summary>
            <param name="testData"></param>
            <returns>HttpStatusCode.Created or HttpStatusCode.InternalServerError</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.ABTestStore.Put(EPiServer.Marketing.Testing.Web.Models.TestResultStoreModel)">
            <summary>
            Given a TestResultStoreModel, publishes the winning variant.
            </summary>
            <param name="testResult"></param>
            <returns>publishedVersionContentLink or InternalServerError</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Controllers.AppSettingsAuthorizeAttribute">
            <summary>
            AuthorizeAttribute class that allows inserting addtional roles from a key in the app settings.
            </summary>
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Controllers.AppSettingsAuthorizeAttribute.Roles">
            <summary>
             Gets or sets the user roles that are authorized to access the controller or action method.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.KpiStore.Get">
            <summary>
            Gets KPI types currently available to the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.KpiStore.Put(System.String,System.String)">
            <summary>
            Sends Kpi Type and Form Data to the appropriate IKPI instance for
            validation and handling.
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Controllers.TestingController">
            <summary>
            Provides a web interface for retrieving a single test, retrieving all tests, and 
            updating views and conversions. Note this is provided as a rest end point
            for customers to use via jscript on thier site.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.TestingController.GetAllTests">
            <summary>
            Retreives all A/B tests.
            Get api/episerver/testing/GetAllTests
            </summary>
            <returns>List of tests.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.TestingController.GetTest(System.String)">
            <summary>
            Retrieves a test based given an ID.
            Get api/episerver/testing/GetTest?id=2a74262e-ec1c-4aaf-bef9-0654721239d6
            </summary>
            <param name="id">ID of a test.</param>
            <returns>A test.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.TestingController.UpdateView(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Updates the view count for a given variant.
            Post url: api/episerver/testing/updateview, 
            data: { testId: testId, itemVersion: itemVersion },  
            contentType: 'application/x-www-form-urlencoded'
            </summary>
            <param name="data">{ testId: testId, itemVersion: itemVersion }</param>
            <returns>HttpStatusCode.OK or HttpStatusCode.BadRequest</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.TestingController.UpdateConversion(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Updates the conversion count for a given variant and KPI.
            Post url: api/episerver/testing/updateconversion, data: { testId: testId, itemVersion: itemVersion, kpiId: kpiId },  contentType: 'application/x-www-form-urlencoded'
            </summary>
            <param name="data">{ testId: testId, itemVersion: itemVersion, kpiId: kpiId }</param>
            <returns>HttpStatusCode.OK or HttpStatusCode.BadRequest</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Controllers.TestingController.SaveKpiResult(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Saves a KPI result for a given KPI and variant.
            Post url: api/episerver/testing/savekpiresult, data: { testId: testId, itemVersion: itemVersion, kpiId: kpiId, keyResultType: keyResultType, total: total },  contentType: 'application/x-www-form-urlencoded'
            </summary>
            <param name="data">{ testId: testId, itemVersion: itemVersion, kpiId: kpiId, keyResultType: keyResultType, total: total }</param>
            <returns>HttpStatusCode.OK or HttpStatusCode.BadRequest</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Helpers.ABResponseFilter">
            <summary>
            Minimal response filter used to inject custom code kpi client scripts to the response stream.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ABResponseFilter.#ctor(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            constructor for the response filter
            </summary>
            <param name="responseFilterStream">httpcontext response filter stream</param>
            <param name="clientScript">the script to inject</param>
            <param name="encoding">the encoding of the httpcontext response</param>
            <param name="leaveOpen">a flag to allow unit testing to verify that the client script has been properly injected into the response</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ABResponseFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Takes incomming bytes and stores it using the specified encoding
            </summary>
            <param name="buffer">buffer of bytes representing the response</param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ABResponseFilter.Flush">
            <summary>
            Injects the clientscript into the response stream at the end of the body tag
            </summary>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Helpers.HttpContextHelper">
            <summary>
            interacts with the httpcontext for reading and manipulating the objects therein
            </summary>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper">
            <summary>
            Encapsulates all the items within the Episerver CMS API that can not be mocked on its own. Static items, classes without an interface, etc.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper.GetRootPath">
            <summary>
            Returns the Episerver root CMS Path
            </summary>
            <returns>the path string</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper.GetPreviewUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
            <summary>
            
            </summary>
            <param name="cr"></param>
            <param name="language"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper.GetContentCultureinfo">
            <summary>
            Returns culture info for the current loaded content
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.HasItem(System.String)">
            <summary>
            Searches the HttpContexts items collection for the specified item ID.
            </summary>
            <param name="itemId">ID of the item in the Items collection.</param>
            <returns>if the item was found or not</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetRequestParam(System.String)">
            <summary>
            Returns a request param value, if it exists.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.SetItemValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified item in the HttpContexts items collection.
            </summary>
            <param name="itemId">ID of the item in the collection.</param>
            <param name="value">Value to set the item to.</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.RemoveItem(System.String)">
            <summary>
            Removes an item from the HttpContexts Items collection.
            </summary>
            <param name="itemId">Key of the item to remove.</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.HasCookie(System.String)">
            <summary>
            Searches the HttpContexts cookie collection to determin if the cookie key passed in is present.
            </summary>
            <param name="cookieKey">Cookie key value to search the collection with.</param>
            <returns>If the item was found or not.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetCookieValue(System.String)">
            <summary>
            Reads the cookie value from the cookie collection in the HttpContext.
            </summary>
            <param name="cookieKey">cookie key value to search the collection with</param>
            <returns>the value of the cookie in the collection</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetResponseCookie(System.String)">
            <summary>
            /// Returns the cookie from the HttpContext Response objects cookie collection.
            </summary>
            <param name="cookieKey">Cookie key value to search the collection with.</param>
            <returns>The cookie found in the cookie collection.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetRequestCookie(System.String)">
            <summary>
            Returns the cookie from the HttpContext Request objects cookie collection.
            </summary>
            <param name="cookieKey">Cookie key value to search the collection with.</param>
            <returns>The cookie found in the cookie collection.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetResponseCookieKeys">
            <summary>
            Gets all the keys from the HttpContext Response objects cookie collection.
            </summary>
            <returns>All the cookie keys.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetRequestCookieKeys">
            <summary>
            Gets all the cookie keys from the HttpContext Request objects cookie collection.
            </summary>
            <returns>All the cookie keys.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.RemoveCookie(System.String)">
            <summary>
            Removes the specified cookie from the cookie collection in the HttpContext.
            </summary>
            <param name="cookieKey">Identifier for the cookie.</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.AddCookie(System.Web.HttpCookie)">
            <summary>
            Adds the cookie to the HttpContext's cookie collection.
            </summary>
            <param name="cookie">The cookie to add</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.CanWriteToResponse">
            <summary>
            Indicates whether the HttpContext response is in a writable state.
            </summary>
            <returns>The writable state of the HttpContext.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetResponseFilter">
            <summary>
            Returns the HttpContext response filter stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.SetResponseFilter(System.IO.Stream)">
            <summary>
            Used for setting the HttpContexts response filter to the stream specified.
            </summary>
            <param name="stream">The stream to use for the response filter.</param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.HasCurrentContext">
            <summary>
            Checks the context to see if there is a current context for the HttpContext object.
            </summary>
            <returns>If the current context exists.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.HasUserAgent">
            <summary>
            Checks the HttpContext for the existance of a UserAgent.
            </summary>
            <returns>If the UserAgent was found.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.RequestedUrl">
            <summary>
            Returns the HttpContext's requested raw url.
            </summary>
            <returns>The url string.</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetCurrentContentLink">
            <summary>
            Returns the HttpContext's current content link.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetCurrentContext">
            <summary>
            Returns the current context
            </summary>
            <returns>The current context</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetSessionCookieName">
            <summary>
            Returns the session cookie name. By default its "ASP.NET_SessionId" however, the value is configurable in the web.xml file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper.GetContentEncoding">
            <summary>
            Returns the encoding contained in the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.HasTestData(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Checks cookie for test data
            </summary>
            <param name="testDataCookie"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.IsTestParticipant(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Returns true if cookie variant ID is supplied
            </summary>
            <param name="testDataCookie"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.SaveTestDataToCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Saves test data to the response
            </summary>
            <param name="testData"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.GetTestDataFromCookie(System.String,System.String)">
            <summary>
            Finds and returns a test data cookie associated with the content
            </summary>
            <param name="testContentId"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.GetTestDataFromCookies">
            <summary>
            Finds and returns a list of all testing cookies objects
            </summary>
            <returns>can be empty if there are no test cookies, never null</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.UpdateTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Removes and replaces existing cookie data with new test data
            </summary>
            <param name="testData"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.ExpireTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Sets the specified cookie to expire immediately
            </summary>
            <param name="testData"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EPiServer.Marketing.Testing.Web.Helpers.ITestDataCookieHelper.ResetTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)" -->
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IUIHelper.getContent(System.Guid)">
            <summary>
            Given a specific IContent Guid, get the IContent object associated with it.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.IUIHelper.getConfigurationURL">
            <summary>
            Gets the link to the test administration url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.#ctor(EPiServer.Marketing.Testing.Web.Helpers.IAdminConfigTestSettingsHelper,EPiServer.Marketing.Testing.Web.Repositories.IMarketingTestingWebRepository,EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper,EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper)">
            <summary>
            unit tests should use this contructor and add needed services to the service locator as needed
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.HasTestData(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Evaluates the supplied testdata cookie to determine if it is populated with valid test information
            </summary>
            <param name="testDataCookie"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.IsTestParticipant(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Evaluates the supplied testdata cookie to determine if the user has been set as a participant.
            </summary>
            <param name="testDataCookie"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.SaveTestDataToCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Saves the supplied test data as a cookie
            </summary>
            <param name="testData"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.UpdateTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Updates the current cookie
            </summary>
            <param name="testData"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.GetTestDataFromCookie(System.String,System.String)">
            <summary>
            Gets the current cookie data
            </summary>
            <param name="testContentId"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.ExpireTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Sets the cookie associated with the supplied testData to expire
            </summary>
            <param name="testData"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.ResetTestDataCookie(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie)">
            <summary>
            Resets the cookie associated with the supplied testData to an empty Test Data cookie.
            </summary>
            <param name="testData"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestDataCookieHelper.GetTestDataFromCookies">
            <summary>
            Gets test cookie data from both Response and Request.
            Fetching response cookies gets current cookie data for cookies actively being processed
            while fetching request cookies gets cookie data for cookies which have not been touched.
            This ensure a complete set of current cookie data and prevents missed views or duplicated conversions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.#ctor(EPiServer.Marketing.Testing.Web.Helpers.IHttpContextHelper,EPiServer.ServiceLocation.IServiceLocator,EPiServer.Marketing.Testing.Web.Helpers.IEpiserverHelper)">
            <summary>
            For Unit Testing
            </summary>
            <param name="context"></param>
            <param name="mockServiceLocator"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.SwapDisabled(System.EventArgs)">
            <summary>
            Evaluates a set of conditions which would preclude a test from swapping content
            * Specific to loading regular content
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.SwapDisabled(EPiServer.ChildrenEventArgs)">
            <summary>
            Evaluates a set of conditions which would preclude a test from swapping content
            * Specific to loading children
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.Personalize">
            <summary>
            Check that personalization is enabled.
            </summary>
            <returns>true if allowed, else false</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.SkipRequest">
            <summary>
            Returns true if the http request is null or should be skipped for various reasons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.IsRequestedContent(EPiServer.Core.IContent)">
            <summary>
            Checks the current loaded content with the requested page.
            Page Data content is loaded even if not the requested page, wheras Block Data is only
            loaded when included in the page.
            </summary>
            <param name="loadedContent"></param>
            <returns> True if not pagedata or if content is pagedata and
             matches requested page</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.GetCurrentPage">
            <summary>
            Converts the current URL to an IContent object
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.IsInSystemFolder">
            <summary>
            Evaluates current URL to determine if page is in a system folder context (e.g Edit, or Preview)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.TestingContextHelper.MapVersionData(EPiServer.Core.IContent,EPiServer.Core.IContent,EPiServer.Marketing.Testing.Web.Models.MarketingTestingContextModel)">
            <summary>
            Map IContent version data into the model
            </summary>
            <param name="publishedContent"></param>
            <param name="draftContent"></param>
            <param name="model"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.UIHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.UIHelper.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            unit tests should use this contructor and add needed services to the service locator as needed
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Helpers.UIHelper.getContent(System.Guid)">
            <summary>
            Given the specified Guid, get the content data from cms
            </summary>
            <param name="guid"></param>
            <returns>The icontent object if found, if not found returns a BasicContent instance with name set to ContentNotFound</returns>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Initializers.PublishContentEventListener">
            <summary>
            Used internally to detect publishing events and reject/allow publishing of content that 
            is part of a test. If content is the source of an ab test and published by pick a winner screen
            its allowed, but if its part of a test and published via cms apis or other mechanisms in the cms
            UI it is rejected and the ContentEventArgs contains the error string.
            Note that content that is not part of the ab test is always ignored.
            
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Initializers.PublishContentEventListener.addPublishingContent(EPiServer.Core.IContent)">
            <summary>
            Called by our web repository to add content to the internal list so
            that publish calls are not rejected when we pick a winner. 
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Jobs.JobRescheduler">
            <summary>
            Listens for TestSaved and updates the next job run 
            if the test is marked to start before the next job run
            </summary>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.Jobs.TestSchedulingJob">
            <summary>
            Scheduled job class that automatically starts and stops tests
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Jobs.TestSchedulingJob.CalculateResultsAndSaveTest(EPiServer.Marketing.Testing.Core.DataClass.IMarketingTest,EPiServer.Marketing.Testing.Web.Repositories.IMarketingTestingWebRepository,EPiServer.Marketing.Testing.Web.Helpers.ITestingContextHelper,System.Boolean)">
            <summary>
            Calculate test results significance, auto publish if needed, update the test results, and stop the test
            </summary>
            <param name="test"></param>
            <param name="webRepo"></param>
            <param name="testingContextHelper"></param>
            <param name="autoPublishTestResults"></param>
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ActiveTestsQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ActiveTestsQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ActiveTestsQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ActiveTestsQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ArchivedTestsQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ArchivedTestsQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ArchivedTestsQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.ArchivedTestsQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.CompletedTestsQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.CompletedTestsQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.CompletedTestsQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.CompletedTestsQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.InactiveTestsQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.InactiveTestsQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.InactiveTestsQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Marketing.Testing.Web.Queries.InactiveTestsQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.KpiWebRepository.GetKpiTypes">
            <summary>
            Retrieves all KPIs available to the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.#ctor(EPiServer.ServiceLocation.IServiceLocator,EPiServer.Logging.ILogger)">
            <summary>
            For unit testing
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.Refresh">
            <summary>
            Refreshes the cache and sets the cache signal for this machine.
            </summary>
            <remarks>
            On content editing machines this method gets called when a config is saved or the cache is empty.
            On content delivery machines this method gets called when the content editing machine
                modifies the state of a test Or the state of the config.
            </remarks>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.GetActiveTestForContent(System.Guid)">
            <summary>
            Gets the test associated with the content guid specified. If no tests are found an empty test is returned
            </summary>
            <param name="aContentGuid">the content guid to search against</param>
            <returns>the first marketing test found that is not archived or an empty test in the case of no results</returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.CreateMarketingTest(EPiServer.Marketing.Testing.Web.Models.TestingStoreModel)">
            <summary>
            
            </summary>
            <param name="testData"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.DeleteMarketingTest(System.Guid)">
            <summary>
            
            </summary>
            <param name="testGuid"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.StartMarketingTest(System.Guid)">
            <summary>
            
            </summary>
            <param name="testGuid"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.StopMarketingTest(System.Guid)">
            <summary>
            
            </summary>
            <param name="testGuid"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.StopMarketingTest(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="testGuid"></param>
            /// <param name="cultureInfo"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.ArchiveMarketingTest(System.Guid,System.Guid)">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.ArchiveMarketingTest(System.Guid,System.Guid,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.PublishWinningVariant(EPiServer.Marketing.Testing.Web.Models.TestResultStoreModel)">
            <summary>
            Performs functions necessary for publishing the content provided in the test result
            Winning variants will be published and replace current published content.
            Winning published content will have their variants published then republish the original content
            to maintain proper content history 
            </summary>
            <param name="testResult"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.CalculateKpiWeights(System.Collections.Generic.Dictionary{System.Guid,System.String},System.Collections.Generic.List{EPiServer.Marketing.KPI.Manager.DataClass.IKpi},System.Collections.Generic.List{EPiServer.Marketing.Testing.Core.DataClass.KeyConversionResult}@,System.Collections.Generic.List{EPiServer.Marketing.Testing.Core.DataClass.KeyConversionResult}@)">
            <summary>
            If more than 1 kpi, we need to calculate the weights for each one.
            </summary>
            <param name="kpiData"></param>
            <param name="kpis"></param>
            <param name="variant1ConversionResults"></param>
            <param name="variant2ConversionResults"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.Repositories.MarketingTestingWebRepository.ConfigurationChanged">
            <summary>
            Called by the ui when the config is changed. Forces a reset and tells content deliver machines 
            to refresh.
            </summary>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.SchemaUpdater.SchemaUpdater">
            <summary>
            Used by automatic database upgrades.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.SchemaUpdater.SchemaUpdater.#ctor(EPiServer.Data.IDatabaseHandler,EPiServer.Data.SchemaUpdates.ScriptExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Marketing.Testing.Web.SchemaUpdater.SchemaUpdater"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.SchemaUpdater.SchemaUpdater.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.SchemaUpdater.SchemaUpdater.Update(EPiServer.Data.ConnectionStringOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Marketing.Testing.Web.ITestHandler">
            <summary>
            The test handler interface defines methods that handle various cms events.  
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ITestHandler.LoadedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            Swaps content, increments views, manages test cookies as needed.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ITestHandler.ProxyEventHandler(System.Object,System.EventArgs)">
            <summary>
            Proxy for Kpi evaluation. Increments conversions, manages test cookies as needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ITestHandler.EnableABTesting">
            <summary>
            Enables AB Testing
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.ITestHandler.DisableABTesting">
            <summary>
            Disables AB Testing
            </summary>
        </member>
        <member name="F:EPiServer.Marketing.Testing.Web.TestHandler._ReferenceCounter">
            Used to keep track of how many times for the same service/event we add the proxy event handler
        </member>
        <member name="F:EPiServer.Marketing.Testing.Web.TestHandler.ABTestHandlerSkipFlag">
            <summary>
            HTTPContext flag used to skip AB Test Processing in LoadContent event handler.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.ContentEventsOnDeletingContentVersion(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            need this for deleted drafts as they are permanently deleted and do not go to the trash
            the OnDeletedContentVersion event is too late to get the guid to see if it is part of a test or not.
            Excluding from coverage as CheckForActiveTest is tested separately and the rest of this would be mocked.
            </summary>
            <param name="sender"></param>
            <param name="contentEventArgs"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.ContentEventsOnDeletedContent(System.Object,EPiServer.DeleteContentEventArgs)">
            <summary>
            need this for deleted published pages, this is called when the trash is emptied
            Excluding from coverage as CheckForActiveTest is tested separately and the rest of this would be mocked.
            </summary>
            <param name="sender"></param>
            <param name="deleteContentEventArgs"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.DeleteActiveTests(System.Guid,System.Int32)">
            <summary>
            Deletes any active test associated with the contentGuid.
            </summary>
            <param name="contentGuid">Guid of item being deleted.</param>
            <param name="contentVersion">0 if published page, workID if draft</param>
            <returns>Number of active tests that were deleted from the system.</returns>
            <remarks>This works if the published version or the draft is deleted.</remarks>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.LoadedChildren(System.Object,EPiServer.ChildrenEventArgs)">
            <summary>
            Event handler to swap out content when children are loaded, however this does not
            cause a conversion or view, simply creates cookie if needed and swaps content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.LoadedContent(System.Object,EPiServer.ContentEventArgs)">
            Main worker method.  Processes each content which triggers a
            content loaded event to determine the state of a test and what content to display.
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.EvaluateKpis(System.Object,System.EventArgs)">
            <summary>
            Processes the Kpis, determining conversions and handling incrementing conversion counts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.CheckForConversion(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie@,EPiServer.Marketing.Testing.Core.DataClass.IMarketingTest,System.Collections.Generic.List{EPiServer.Marketing.KPI.Manager.DataClass.IKpi},System.Collections.Generic.IEnumerable{EPiServer.Marketing.KPI.Results.IKpiResult})">
            <summary>
            Loop through conversion results to see if any have converted
            </summary>
            <param name="tdcookie"></param>
            <param name="test"></param>
            <param name="kpis"></param>
            <param name="results"></param>
            <param name="isConversionResult"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.ProcessKpiConversionResults(EPiServer.Marketing.Testing.Core.DataClass.TestDataCookie,EPiServer.Marketing.Testing.Core.DataClass.IMarketingTest,System.Collections.Generic.List{EPiServer.Marketing.KPI.Manager.DataClass.IKpi},System.Collections.Generic.IEnumerable{EPiServer.Marketing.KPI.Results.KpiConversionResult})">
            <summary>
            Loop through conversion results to see if any have converted, if so update views/conversions as necessary
            </summary>
            <param name="tdcookie"></param>
            <param name="test"></param>
            <param name="kpis"></param>
            <param name="results"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.ProxyEventHandler(System.Object,System.EventArgs)">
            <summary>
            Handles KPI evaluation logic for KPIs that are triggered from an event.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.enableProxyEventHandler">
            <summary>
            Initializes all the ProxyEventHandler's for all Kpi objects found in all active tests.
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.disableProxyEventHandler">
            <summary>
            Disables all the ProxyEventHandler's for all Kpi objects found in all active tests. 
            </summary>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.TestAddedToCache(System.Object,EPiServer.Marketing.Testing.Core.Manager.TestEventArgs)">
            <summary>
            When a test is added to the active cache, this method will be fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.TestRemovedFromCache(System.Object,EPiServer.Marketing.Testing.Core.Manager.TestEventArgs)">
            <summary>
            When a test is removed to the active cache, this method will be fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.AddProxyEventHandler(EPiServer.Marketing.KPI.Manager.DataClass.IKpi)">
            <summary>
            Adds the ProxyEventHandler for the given Kpi instance if it supports the EventSpecificationAttribute.
            </summary>
            <param name="kpi"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.RemoveProxyEventHandler(EPiServer.Marketing.KPI.Manager.DataClass.IKpi)">
            <summary>
            Removes the ProxyEventHandler for the given Kpi instance if it supports the EventSpecificationAttribute.
            </summary>
            <param name="kpi"></param>
        </member>
        <member name="M:EPiServer.Marketing.Testing.Web.TestHandler.EnableABTesting">
            <inheritdoc/>
        </member>
    </members>
</doc>
