<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Social.Moderation.Core</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Social.Moderation.Core.InvalidActionOnWorkflowItemException">
            <summary>
            The InvalidActionOnWorkflowItemException is an exception describing
            an error occurring when an unsupported action is attempted upon
            a workflow item.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.InvalidActionOnWorkflowItemException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException">
            <summary>
            The InvalidWorkflowStateException is an exception thrown by the Episerver Social Moderation 
            feature when an attempt is made to add a workflow item in a state that is not currently 
            supported by its associated workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.UnsupportedWorkflowItemDataException">
            <summary>
            The UnsupportedWorkflowItemDataException represents an error 
            occurring when some operation is attempted on a workflow item 
            with data that is not supported by the system.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.UnsupportedWorkflowItemDataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Underlying exception which prompted in this exception</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException">
            <summary>
            The WorkflowItemDoesNotExistException represents an error occurring
            when some operation is attempted on a workflow item which does not
            exist in the system.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">
            <summary>
            The WorkflowDoesNotExistException represents an error occurring
            when some operation is attempted on a workflow which does not
            exist in the system.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.IWorkflowItemRepository">
            <summary>
            The IWorkflowItemRepository interface describes a component capable
            of persisting and retrieving workflow item data from an underlying 
            data store.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Add(EPiServer.Social.Moderation.Core.WorkflowItem)">
            <summary>
            Adds a new workflow item to the underlying data store.
            </summary>
            <param name="item">Workflow item to be added</param>
            <returns>Workflow item which was added</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Add(EPiServer.Social.Moderation.Core.WorkflowItem,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Adds a new workflow item to the underlying data store, within
            an exclusive transition session. If another client already 
            has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="item">Workflow item to be added</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>Workflow item which was added</returns>        
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>    
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Add``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0)">
            <summary>
            Adds a new workflow item with supporting metadata to the
            underlying data store.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <returns>A workflow item composed with the specified extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Add``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Adds a new workflow item with supporting metadata, within an
            exclusive transition session, to the underlying data store.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>A workflow item composed with the specified extension data</returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>   
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Get(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Gets a workflow item with the specified ID from the
            underlying data store.
            </summary>
            <param name="id">ID of the item to be retrieved</param>
            <returns>Workflow item with the specified ID</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Get``1(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Gets a workflow item composed with associated extension data
            from the underlying data store, as identified by the 
            specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A workflow item composed with associated extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter})">
            <summary>
            Retrieves a page of workflow items from the underlying data store, as described 
            by the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter workflow items</param>
            <returns>Page of workflow items</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter,``0})">
            <summary>
            Retrieves a page of workflow items from the underlying data store, as described 
            by the specified criteria. The workflow items are filtered by the type of their
            associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflow items</typeparam>
            <param name="criteria">Criteria by which to filter workflow items</param>
            <returns>Page of composite workflow items</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Delete(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Deletes the workflow item with the specified ID from the
            underlying data store.
            </summary>
            <param name="id">ID of the workflow item to be deleted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Delete(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Deletes the workflow items associated with the identified
            workflow from the underlying data store.
            </summary>
            <param name="id">ID of the workflow whose items should be deleted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.Delete(EPiServer.Social.Common.Reference)">
            <summary>
            Deletes the workflow items associated with the specified
            resource under moderation from the underlying data store.
            </summary>
            <param name="target">Reference identifying the resource under moderation whose workflow items should be deleted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.AddAsync(EPiServer.Social.Moderation.Core.WorkflowItem)">
            <summary>
            Asynchronously adds a new workflow item to the underlying data store.
            </summary>
            <param name="item">Workflow item to be added</param>
            <returns>Workflow item which was added</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.AddAsync(EPiServer.Social.Moderation.Core.WorkflowItem,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously adds a new workflow item to the underlying data store, within
            an exclusive transition session. If another client already 
            has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="item">Workflow item to be added</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>Workflow item which was added</returns>        
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>    
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.AddAsync``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0)">
            <summary>
            Asynchronously adds a new workflow item with supporting metadata to the
            underlying data store.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <returns>A workflow item composed with the specified extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.AddAsync``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously adds a new workflow item with supporting metadata, within an
            exclusive transition session, to the underlying data store.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>A workflow item composed with the specified extension data</returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>   
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.GetAsync(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously retrieves a workflow item with the specified ID from the
            underlying data store.
            </summary>
            <param name="id">ID of the item to be retrieved</param>
            <returns>Workflow item with the specified ID</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.GetAsync``1(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously retrieves a workflow item composed with associated extension data
            from the underlying data store, as identified by the 
            specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A workflow item composed with associated extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter})">
            <summary>
            Asynchronously retrieves a page of workflow items from the underlying data store, as described 
            by the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter workflow items</param>
            <returns>Page of workflow items</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter,``0})">
            <summary>
            Asynchronously retrieves a page of workflow items from the underlying data store, as described 
            by the specified criteria. The workflow items are filtered by the type of their
            associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflow items</typeparam>
            <param name="criteria">Criteria by which to filter workflow items</param>
            <returns>Page of composite workflow items</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.DeleteAsync(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously deletes the workflow item with the specified ID from the
            underlying data store.
            </summary>
            <param name="id">ID of the workflow item to be deleted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.DeleteAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously deletes the workflow items associated with the identified
            workflow from the underlying data store.
            </summary>
            <param name="id">ID of the workflow whose items should be deleted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemRepository.DeleteAsync(EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously deletes the workflow items associated with the specified
            resource under moderation from the underlying data store.
            </summary>
            <param name="target">Reference identifying the resource under moderation whose workflow items should be deleted</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.IWorkflowItemService">
            <summary>
            The IWorkflowItemService interface is responsible for facilitating the creation and retrieval of items 
            within a moderation workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Add(EPiServer.Social.Moderation.Core.WorkflowItem)">
            <summary>
            Adds a new workflow item.
            </summary>
            <param name="item">Workflow item to be added</param>
            <returns>Workflow item which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the workflow specified for workflow item being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException">Thrown when the workflow item being added has a state that is not currently 
            supported by its associated workflow.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.AddAsync(EPiServer.Social.Moderation.Core.WorkflowItem)">
            <summary>
            Asynchronously adds a new workflow item.
            </summary>
            <param name="item">Workflow item to be added</param>
            <returns>Workflow item which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the workflow specified for workflow item being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException">Thrown when the workflow item being added has a state that is not currently 
            supported by its associated workflow.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Add(EPiServer.Social.Moderation.Core.WorkflowItem,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Adds a new workflow item within an exclusive transition session. Use the BeginTransitionSession() method of the
            IWorkflowService to retrieve a session token. If another client already has secured access to that target, 
            a TransitionSessionDeniedException will be thrown.
            </summary>
            <param name="item">Workflow item to be added</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>Workflow item which was added</returns>        
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>    
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.AddAsync(EPiServer.Social.Moderation.Core.WorkflowItem,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously adds a new workflow item within an exclusive transition session. Use the BeginTransitionSession() method of the
            IWorkflowService to retrieve a session token. If another client already has secured access to that target, 
            a TransitionSessionDeniedException will be thrown.
            </summary>
            <param name="item">Workflow item to be added</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>Workflow item which was added</returns>        
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>    
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Add``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0)">
            <summary>
            Adds a new workflow item with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow item</typeparam>
            <param name="workflowItem">Workflow item to be added</param>
            <param name="extension">Extended data related to the workflow item</param>
            <returns>The workflow item composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the workflow specified for workflow item being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException">Thrown when the workflow item being added has a state that is not currently 
            supported by its associated workflow.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.AddAsync``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0)">
            <summary>
            Asynchronously adds a new workflow item with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow item</typeparam>
            <param name="workflowItem">Workflow item to be added</param>
            <param name="extension">Extended data related to the workflow item</param>
            <returns>The workflow item composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the workflow specified for workflow item being added does not exist.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.InvalidWorkflowStateException">Thrown when the workflow item being added has a state that is not currently 
            supported by its associated workflow.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Add``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Adds a new workflow item with supporting metadata, within an exclusive transition session. Use the 
            BeginTransitionSession() method of the IWorkflowService to retrieve a session token. If another 
            client already has secured access to that target, a TransitionSessionDeniedException will be thrown.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>A workflow item composed with the specified extension data</returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>   
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.AddAsync``1(EPiServer.Social.Moderation.Core.WorkflowItem,``0,EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously adds a new workflow item with supporting metadata, within an exclusive transition session. Use the 
            BeginTransitionSession() method of the IWorkflowService to retrieve a session token. If another 
            client already has secured access to that target, a TransitionSessionDeniedException will be thrown.
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="item">Workflow item to be added</param>
            <param name="extension">Extended data supporting the workflow item</param>
            <param name="token">Token authorizing exclusive access to the target within a particular workflow</param>
            <returns>A workflow item composed with the specified extension data</returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>   
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Get(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Gets the workflow item represented by the specified ID.
            </summary>
            <param name="id">ID of the workflow item to retrieve</param>
            <returns>Workflow item with the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException">Thrown when the identified workflow item does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.GetAsync(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously gets the workflow item represented by the specified ID.
            </summary>
            <param name="id">ID of the workflow item to retrieve</param>
            <returns>Workflow item with the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException">Thrown when the identified workflow item does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Get``1(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Gets a workflow item composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A workflow item composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException">Thrown when the identified workflow item does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.GetAsync``1(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously gets a workflow item composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow item</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A workflow item composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowItemDoesNotExistException">Thrown when the identified workflow item does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter})">
            <summary>
            Retrieves a page of workflow items as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of workflow items</param>
            <returns>Page of workflow items filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter})">
            <summary>
            Asynchronously retrieves a page of workflow items as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of workflow items</param>
            <returns>Page of workflow items filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter,``0})">
            <summary>
            Retrieves a page of workflow items as specified by the provided criteria. The 
            workflow items are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflow items</typeparam>
            <param name="criteria">Filters the result set of workflow items</param>
            <returns>Page of composite workflow items filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowItemFilter,``0})">
            <summary>
            Asynchronously retrieves a page of workflow items as specified by the provided criteria. The 
            workflow items are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflow items</typeparam>
            <param name="criteria">Filters the result set of workflow items</param>
            <returns>Page of composite workflow items filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Remove(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Removes the workflow item with the specified ID.
            </summary>
            <param name="id">ID of the workflow item to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.RemoveAsync(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Asynchronously removes the workflow item with the specified ID.
            </summary>
            <param name="id">ID of the workflow item to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Remove(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Removes the workflow items associated with the identified
            workflow.
            </summary>
            <param name="id">ID of the workflow whose items should be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.RemoveAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously removes the workflow items associated with the identified
            workflow.
            </summary>
            <param name="id">ID of the workflow whose items should be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.Remove(EPiServer.Social.Common.Reference)">
            <summary>
            Removes the workflow items associated with the specified
            resource under moderation.
            </summary>
            <param name="target">Reference identifying the resource under moderation 
            whose workflow items should be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowItemService.RemoveAsync(EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously removes the workflow items associated with the specified
            resource under moderation.
            </summary>
            <param name="target">Reference identifying the resource under moderation 
            whose workflow items should be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.IWorkflowRepository">
            <summary>
            The IWorkflowRepository interface describes a component capable
            of persisting, deleting, and retrieving workflow data from
            an underlying data store.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Create(EPiServer.Social.Moderation.Core.Workflow)">
            <summary>
            Creates a workflow within the underlying data store.
            </summary>
            <param name="workflow">Workflow to be created</param>
            <returns>Workflow which was created</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Create``1(EPiServer.Social.Moderation.Core.Workflow,``0)">
            <summary>
            Creates a new workflow with supporting metadata to form a composite
            within the underlying data store.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow</typeparam>
            <param name="workflow">Workflow to be created</param>
            <param name="extension">Extended data related to the workflow</param>
            <returns>The workflow composed with the extended data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Delete(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Removes an existing workflow from the underlying data store.
            </summary>
            <param name="workflowId">ID of the workflow to be removed</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Get(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Retrieves a workflow, represented by the specified ID, from
            the underlying data store.
            </summary>
            <param name="workflowId">ID of the workflow to be retrieved</param>
            <returns>Workflow which was retrieved</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Get``1(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Gets a workflow composed with associated extension data, from
            the underlying data store, as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow</typeparam>
            <param name="id">ID of the workflow to be retrieved</param>
            <returns>A workflow composed with associated extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowFilter})">
            <summary>
            Retrieves a page of workflows from the underlying data store, as described 
            by the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter workflows</param>
            <returns>Page of workflows</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowFilter,``0})">
            <summary>
            Retrieves a page of workflows from the underlying data store, as specified by 
            the provided criteria. The workflow are filtered by the type of their 
            associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflows</typeparam>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of composite workflows filtered according to the specified criteria</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.BeginTransitionSession(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Requests exclusive access to add workflow items for a target within a particular workflow. If
            another client already has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="workflow">Identifies the workflow through which transitions are to occur</param>
            <param name="target">Identifies the target which is to be transitioned through the workflow</param>
            <returns>
            A TransitionSessionToken authorizing exclusive access to transition a target within a particular workflow. Apply
            this token when adding workflow items with IWorkflowItemRepository to ensure that
            exclusive access is respected.
            </returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.EndTransitionSession(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Ends a transition session, relinquishing exclusive access to transition a target.
            </summary>
            <param name="workflow">Identifies the workflow to which access was granted</param>
            <param name="target">Identifies the target to which access was granted</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.CreateAsync(EPiServer.Social.Moderation.Core.Workflow)">
            <summary>
            Asynchronously creates a workflow within the underlying data store.
            </summary>
            <param name="workflow">Workflow to be created</param>
            <returns>Workflow which was created</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.CreateAsync``1(EPiServer.Social.Moderation.Core.Workflow,``0)">
            <summary>
            Asynchronously creates a new workflow with supporting metadata to form a composite
            within the underlying data store.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow</typeparam>
            <param name="workflow">Workflow to be created</param>
            <param name="extension">Extended data related to the workflow</param>
            <returns>The workflow composed with the extended data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.DeleteAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously removes an existing workflow from the underlying data store.
            </summary>
            <param name="workflowId">ID of the workflow to be removed</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.GetAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously retrieves a workflow, represented by the specified ID, from
            the underlying data store.
            </summary>
            <param name="workflowId">ID of the workflow to be retrieved</param>
            <returns>Workflow which was retrieved</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.GetAsync``1(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously retrieves a workflow composed with associated extension data, from
            the underlying data store, as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow</typeparam>
            <param name="id">ID of the workflow to be retrieved</param>
            <returns>A workflow composed with associated extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowFilter})">
            <summary>
            Asynchronously retrieves a page of workflows from the underlying data store, as described 
            by the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter workflows</param>
            <returns>Page of workflows</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowFilter,``0})">
            <summary>
            Asynchronously retrieves a page of workflows from the underlying data store, as specified by 
            the provided criteria. The workflow are filtered by the type of their 
            associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflows</typeparam>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of composite workflows filtered according to the specified criteria</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.BeginTransitionSessionAsync(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously requests exclusive access to add workflow items for a target within a particular workflow. If
            another client already has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="workflow">Identifies the workflow through which transitions are to occur</param>
            <param name="target">Identifies the target which is to be transitioned through the workflow</param>
            <returns>
            A TransitionSessionToken authorizing exclusive access to transition a target within a particular workflow. Apply
            this token when adding workflow items with IWorkflowItemRepository to ensure that
            exclusive access is respected.
            </returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowRepository.EndTransitionSessionAsync(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously ends a transition session, relinquishing exclusive access to transition a target.
            </summary>
            <param name="workflow">Identifies the workflow to which access was granted</param>
            <param name="target">Identifies the target to which access was granted</param>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.IWorkflowService">
            <summary>
            The IWorkflowService interface describes a component responsible for 
            facilitating the creation, deletion, and retrieval of moderation workflows.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Add(EPiServer.Social.Moderation.Core.Workflow)">
            <summary>
            Adds a new moderation workflow.
            </summary>
            <param name="workflow">Workflow to be added</param>
            <returns>Workflow which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.AddAsync(EPiServer.Social.Moderation.Core.Workflow)">
            <summary>
            Asynchronously adds a new moderation workflow.
            </summary>
            <param name="workflow">Workflow to be added</param>
            <returns>Workflow which was just added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Add``1(EPiServer.Social.Moderation.Core.Workflow,``0)">
            <summary>
            Adds a new workflow with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow</typeparam>
            <param name="workflow">Workflow to be added</param>
            <param name="extension">Extended data related to the workflow</param>
            <returns>The workflow composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.AddAsync``1(EPiServer.Social.Moderation.Core.Workflow,``0)">
            <summary>
            Asynchronously adds a new workflow with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the workflow</typeparam>
            <param name="workflow">Workflow to be added</param>
            <param name="extension">Extended data related to the workflow</param>
            <returns>The workflow composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Remove(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Removes an existing workflow from the system.
            </summary>
            <param name="id">ID of the workflow to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when workflow items still exist for the workflow being removed.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.RemoveAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously removes an existing workflow from the system.
            </summary>
            <param name="id">ID of the workflow to be removed</param>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are null or invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when workflow items still exist for the workflow being removed.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Get(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Gets a workflow as identified by the specified ID.
            </summary>
            <param name="id">Workflow identifier</param>
            <returns>Workflow corresponding to the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.GetAsync(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously gets a workflow as identified by the specified ID.
            </summary>
            <param name="id">Workflow identifier</param>
            <returns>Workflow corresponding to the specified ID</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Get``1(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Gets a workflow composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow</typeparam>
            <param name="id">ID of the workflow to be retrieved</param>
            <returns>A workflow composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.GetAsync``1(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Asynchronously gets a workflow composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the workflow</typeparam>
            <param name="id">ID of the workflow to be retrieved</param>
            <returns>A workflow composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Moderation.Core.WorkflowDoesNotExistException">Thrown when the identified workflow does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowFilter})">
            <summary>
            Retrieves a page of workflows as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of workflows filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Moderation.Core.WorkflowFilter})">
            <summary>
            Asynchronously retrieves a page of workflows as specified by the provided criteria.
            </summary>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of workflows filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowFilter,``0})">
            <summary>
            Retrieves a page of workflows as specified by the provided criteria. The 
            workflows are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflows</typeparam>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of composite workflows filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Moderation.Core.WorkflowFilter,``0})">
            <summary>
            Asynchronously retrieves a page of workflows as specified by the provided criteria. The 
            workflows are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired workflows</typeparam>
            <param name="criteria">Filters the result set of workflows</param>
            <returns>Page of composite workflows filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.BeginTransitionSession(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Requests exclusive access to add workflow items for a target within a particular workflow. If
            another client already has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="workflow">Identifies the workflow through which transitions are to occur</param>
            <param name="target">Identifies the target which is to be transitioned through the workflow</param>
            <returns>
            A TransitionSessionToken authorizing exclusive access to transition a target within a particular workflow. Apply
            this token when adding workflow items with IWorkflowItemService to ensure that
            exclusive access is respected.
            </returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.BeginTransitionSessionAsync(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously requests exclusive access to add workflow items for a target within a particular workflow. If
            another client already has secured access to that target, a TransitionSessionDeniedException 
            will be thrown.
            </summary>
            <param name="workflow">Identifies the workflow through which transitions are to occur</param>
            <param name="target">Identifies the target which is to be transitioned through the workflow</param>
            <returns>
            A TransitionSessionToken authorizing exclusive access to transition a target within a particular workflow. Apply
            this token when adding workflow items with IWorkflowItemService to ensure that
            exclusive access is respected.
            </returns>
            <exception cref="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            Exclusive access for the specified workflow and target combination could not be secured. Access
            may have already been secured by another client.
            </exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.EndTransitionSession(EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously ends a transition session, relinquishing exclusive access to add workflow items for a target.
            </summary>
            <param name="token">Token authorizing exclusive access to a target within a particular workflow</param>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.EndTransitionSessionAsync(EPiServer.Social.Moderation.Core.TransitionSessionToken)">
            <summary>
            Asynchronously ends a transition session, relinquishing exclusive access to add workflow items for a target.
            </summary>
            <param name="token">Token authorizing exclusive access to a target within a particular workflow</param>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.EndTransitionSession(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Ends a transition session, relinquishing exclusive access to add workflow items for a target.
            </summary>
            <param name="workflow">Identifies the workflow to which access was granted</param>
            <param name="target">Identifies the target to which access was granted</param>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.IWorkflowService.EndTransitionSessionAsync(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference)">
            <summary>
            Asynchronously ends a transition session, relinquishing exclusive access to add workflow items for a target.
            </summary>
            <param name="workflow">Identifies the workflow to which access was granted</param>
            <param name="target">Identifies the target to which access was granted</param>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.TransitionSessionToken">
            <summary>
            The TransitionSessionToken class describes a protected session
            in which an application has requested exclusive access
            to transition a particular target through a workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.TransitionSessionToken.#ctor(System.String,EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Common.Reference,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="value">Unique value identifying the token</param>
            <param name="workflow">Identifies the workflow associated with the transition</param>
            <param name="target">Identifies the target to be transitioned</param>
            <param name="issued">Date and time when the token was issued</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.TransitionSessionToken.Value">
            <summary>
            Gets a unique value identifying the token.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.TransitionSessionToken.Workflow">
            <summary>
            Gets the identifier for the workflow associated with the transition.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.TransitionSessionToken.Target">
            <summary>
            Gets the identifier for the target to be transitioned.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.TransitionSessionToken.Issued">
            <summary>
            Gets the date and time when this token was issued.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.TransitionSessionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this TransitionSessionToken.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified object is equal to this TransitionSessionToken, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.TransitionSessionToken.GetHashCode">
            <summary>
            Returns the hash code for this TransitionSessionToken.
            </summary>
            <returns>Hash code for this TransitionSessionToken</returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowAction">
            <summary>
            An immutable class representing the action necessary to
            transition an item from one state to another within
            a workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowAction.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name identifying this action</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowAction.Name">
            <summary>
            Gets or sets the name identifying this action.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.Workflow">
            <summary>
            The Workflow class represents an immutable series of states and 
            transitions describing a moderation strategy.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.#ctor(System.String,System.Collections.Generic.IEnumerable{EPiServer.Social.Moderation.Core.WorkflowTransition},EPiServer.Social.Moderation.Core.WorkflowState)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name describing the workflow</param>
            <param name="transitions">Collection of transitions comprising this workflow</param>
            <param name="initialState">The start state for this workflow</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.#ctor(EPiServer.Social.Moderation.Core.WorkflowId,System.String,System.Collections.Generic.IEnumerable{EPiServer.Social.Moderation.Core.WorkflowTransition},EPiServer.Social.Moderation.Core.WorkflowState)">
            <summary>
            Constructor
            </summary>
            <param name="id">Identifier for this workflow</param>
            <param name="name">Name describing the workflow</param>
            <param name="transitions">Collection of transitions comprising this workflow</param>
            <param name="initialState">The start state for this workflow</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.#ctor(EPiServer.Social.Moderation.Core.WorkflowId,System.String,System.Collections.Generic.IEnumerable{EPiServer.Social.Moderation.Core.WorkflowTransition},EPiServer.Social.Moderation.Core.WorkflowState,System.Collections.Generic.IEnumerable{EPiServer.Social.Moderation.Core.TransitionSessionToken})">
            <summary>
            Constructor
            </summary>
            <param name="id">Identifier for this workflow</param>
            <param name="name">Name describing the workflow</param>
            <param name="transitions">Collection of transitions comprising this workflow</param>
            <param name="initialState">The start state for this workflow</param>
            <param name="transitionSessions">Collection of tokens describing sessions in which exclusive access to a particular target has been granted</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.Workflow.Id">
            <summary>
            Gets the unique identifier for this workflow.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.Workflow.Name">
            <summary>
            Gets the name for this workflow.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.Workflow.Transitions">
            <summary>
            Gets the collection of transitions comprising this workflow.
            Transitions describe the action require to move from one
            state to another within the workflow.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.Workflow.TransitionSessions">
            <summary>
            Gets a collection of tokens describing sessions, in which exclusive 
            access to a particular target of moderation has been granted.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.Workflow.InitialState">
            <summary>
            Gets the start state for this workflow.
            </summary>
            <returns>State representing the starting state for this workflow</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.ActionsFor(EPiServer.Social.Moderation.Core.WorkflowState)">
            <summary>
            Returns a collection of names representing the actions available 
            to advance an item within the workflow given the specified state.
            </summary>
            <param name="state">Workflow state for which actions should be retrieved</param>
            <returns>Collection of names representing the actions available in the given state</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.Transition(EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Moderation.Core.WorkflowAction)">
            <summary>
            Returns the resulting state to which an item in the specified
            state will transition when the specified action is applied.
            </summary>
            <param name="state">State in which an action will be taken</param>
            <param name="action">Action to be applied</param>
            <returns>Resulting state when the specified action is applied</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.Workflow.HasState(EPiServer.Social.Moderation.Core.WorkflowState)">
            <summary>
            Checks if the specified state is one that exists within this workflow.
            </summary>
            <param name="state">State to match in this workflow.</param>
            <returns>True if the specified state is one that exists within this workflow, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowFilter">
            <summary>
            The WorkflowFilter class describes the specifications by which
            workflow data should be retrieved.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowFilter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowFilter.Name">
            <summary>
            Gets or sets a name by which the result set of
            workflows should be filtered.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowSortFields">
            <summary>
            The WorkflowSortFields class exposes the fields of the Workflow
            model which are available to an application in defining sorting
            rules for workflow result sets within the Social platform.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowSortFields.Id">
            <summary>
            Gets the instance of SortField representing the ID field of the Workflow
            data model.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowSortFields.Name">
            <summary>
            Gets the instance of SortField representing the Name field of the Workflow
            data model.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowItemFilter">
            <summary>
            The WorkflowItemFilter class describes the specifications by which
            workflow item data should be retrieved.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemFilter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemFilter.Workflow">
            <summary>
            Gets or sets a workflow ID filtering the result set to only
            items associated with that workflow.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemFilter.State">
            <summary>
            Gets or sets the workflow state to which items should be
            restricted.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemFilter.Target">
            <summary>
            Gets or sets a reference representing the resource within
            the workflow to which items should be restricted.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemFilter.ExcludeHistoricalItems">
            <summary>
            Gets or sets a flag indicating whether or not the result
            set should be only include items representing the current
            state of resources within a workflow.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowItemSortFields">
            <summary>
            The WorkflowItemSortFields class exposes the fields of the 
            WorkflowItem model which are available for application in 
            defining sorting rules for workflow item result sets within 
            the Social platform.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemSortFields.Id">
            <summary>
            Gets the SortField representing the ID field of the WorkflowItem
            data model.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemSortFields.Created">
            <summary>
            Gets the SortField representing the Created field of the WorkflowItem
            data model.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemSortFields.State">
            <summary>
            Gets the SortField representing the State field of the WorkflowItem
            data model.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemSortFields.Workflow">
            <summary>
            Gets the SortField representing the Workflow field of the WorkflowItem
            data model.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemSortFields.Target">
            <summary>
            Gets the SortField representing the Target field of the WorkflowItem
            data model.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowItemId">
            <summary>
            The WorkflowItemId class is a data model representing
            an identifier for an item under moderation within the social
            platform.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">String-based identifier for a workflow</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.IsNullOrEmpty(EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Returns true if the specified WorkflowItemId has not been
            initialized or represents an empty workflow item identifier,
            false otherwise.
            </summary>
            <param name="id">Workflow identifier to evaluate</param>
            <returns>True if the WorkflowItemId is null or empty, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.Create(System.String)">
            <summary>
            Parses a workflow item ID from a string-based identifier.
            </summary>
            <param name="id">Identifer for the workflow item</param>
            <returns>Instance of WorkflowItemId representing the specified identifier</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.Create">
            <summary>
            Creates an empty WorkflowItemId.
            </summary>
            <returns>Empty WorkflowItemId instance</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.op_Equality(EPiServer.Social.Moderation.Core.WorkflowItemId,EPiServer.Social.Moderation.Core.WorkflowItemId)">
             <summary>
             Evaluates the equality of two WorkflowItemId instances.
             </summary>
             <param name="a">The operand on the left side of the equality operator.</param>
             <param name="b">The operand on the right side of the equality operator.</param>
             <returns>
             Returns true if the specified instances are equivalent, false otherwise.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.op_Inequality(EPiServer.Social.Moderation.Core.WorkflowItemId,EPiServer.Social.Moderation.Core.WorkflowItemId)">
            <summary>
            Evaluates two WorkflowItemId instances for inequality.
            </summary>
            <param name="a">The operand on the left side of the inequality operator.</param>
            <param name="b">The operand on the right side of the inequality operator.</param>
            <returns>
            Returns true if the specified instances are not equivalent, false otherwise.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type WorkflowItemId have the same 
            value of the underlying comment identifier, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.GetHashCode">
            <summary>
            Returns a hash code representative of this WorkflowItemId.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItemId.Empty">
            <summary>
            Returns a newly created WorkflowItemId instance representing
            an 'empty' workflow ID.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItemId.CreateEmptyWorkflowItemId">
            <summary>
            Creates an instance of an empty WorkflowItemId.
            </summary>
            <returns>Empty WorkflowItemId instance</returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowId">
            <summary>
            The WorkflowId class is a data model representing
            an identifier for a moderation workflow within the social
            platform.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">String-based identifier for a workflow</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.IsNullOrEmpty(EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Returns true if the specified WorkflowId has not been
            initialized or represents an empty workflow identifier,
            false otherwise.
            </summary>
            <param name="id">Workflow identifier to evaluate</param>
            <returns>True if the WorkflowId is null or empty, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.Create(System.String)">
            <summary>
            Parses a workflow ID from a string-based identifier.
            </summary>
            <param name="id">Identifer for the workflow</param>
            <returns>Instance of WorkflowId representing the specified identifier</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.Create">
            <summary>
            Creates an empty WorkflowId.
            </summary>
            <returns>Empty WorkflowId instance</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.op_Equality(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Moderation.Core.WorkflowId)">
             <summary>
             Evaluates the equality of two WorkflowId instances.
             </summary>
             <param name="a">The operand on the left side of the equality operator.</param>
             <param name="b">The operand on the right side of the equality operator.</param>
             <returns>
             Returns true if the specified instances are equivalent, false otherwise.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.op_Inequality(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Moderation.Core.WorkflowId)">
            <summary>
            Evaluates two WorkflowId instances for inequality.
            </summary>
            <param name="a">The operand on the left side of the inequality operator.</param>
            <param name="b">The operand on the right side of the inequality operator.</param>
            <returns>
            Returns true if the specified instances are not equivalent, false otherwise.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type WorkflowId have the same 
            value of the underlying comment identifier, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.GetHashCode">
            <summary>
            Returns a hash code representative of this WorkflowId.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowId.Empty">
            <summary>
            Returns a newly created WorkflowId instance representing
            an 'empty' workflow ID.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowId.CreateEmptyWorkflowId">
            <summary>
            Creates an instance of an empty WorkflowId.
            </summary>
            <returns>Empty WorkflowId instance</returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowItem">
            <summary>
            The WorkflowItem class captures the state and data
            of an entity within a moderation workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItem.#ctor(EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Common.Reference)">
            <summary>
            Constructor
            </summary>        
            <param name="workflowId">ID of the workflow with which this item is associated</param>
            <param name="state">State of this item within the associated workflow</param>
            <param name="target">Reference identifying the entity under moderation</param>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowItem.#ctor(EPiServer.Social.Moderation.Core.WorkflowItemId,EPiServer.Social.Moderation.Core.WorkflowId,EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Common.Reference,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="id">Identifier for this workflow item</param>        
            <param name="workflowId">ID of the workflow with which this item is associated</param>
            <param name="state">State of this item within the associated workflow</param>
            <param name="target">Reference identifying the entity under moderation</param>
            <param name="created">Date on which this item was created</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItem.Id">
            <summary>
            Gets the unique identifier for this workflow item.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItem.Created">
            <summary>
            Gets the date on which this item was created.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItem.Workflow">
            <summary>
            Gets the ID of the workflow with which this item is associated.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItem.State">
            <summary>
            Gets the state of this item within the associated workflow.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowItem.Target">
            <summary>
            Gets the reference identifying the entity under moderation.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowState">
            <summary>
            An immutable class representing an individual state within
            a workflow.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="state">Name identifying this state</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowState.Name">
            <summary>
            Gets or sets the name identifying this state.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.op_Equality(EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Moderation.Core.WorkflowState)">
             <summary>
             Overloads the equality operator on the WorkflowState class.
             </summary>
             <param name="a">The operand on the left side of the equality operator.</param>
             <param name="b">The operand on the right side of the equality operator.</param>
             <returns>
             Returns true if the both objects are null or the same instance or have the same value of the underlying state string.
             Returns false if either object is null or both objects have different values of the underlying state string.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.op_Inequality(EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Moderation.Core.WorkflowState)">
            <summary>
            Overloads the inequality operator on the WorkflowState class.
            </summary>
            <param name="a">The operand on the left side of the inequality operator.</param>
            <param name="b">The operand on the right side of the inequality operator.</param>
            <returns>
            Returns true if either object is null or both objects have different values of the underlying state string.
            Returns false if the both objects are null or the same instance or have the same value of the underlying state string.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type WorkflowState have the same 
            value of the underlying state string, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.GetHashCode">
            <summary>
            Returns the hash code of the underlying state name of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowState.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>
            Returns the underlying name of this instance.
            </returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.WorkflowTransition">
            <summary>
            The Transition class describes an edge within a workflow graph. It
            is comprised of an originating state, an action that can be taken
            within that state, and the resulting state upon taking that action.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowTransition.#ctor(EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Moderation.Core.WorkflowState,EPiServer.Social.Moderation.Core.WorkflowAction)">
            <summary>
            Constructor
            </summary>
            <param name="from">The origin state for this transition</param>
            <param name="to">The resulting state for the transition</param>
            <param name="action">The action action which will advance a workflow from the origin state to the resulting state</param>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowTransition.From">
            <summary>
            Gets the origin state for this transition.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowTransition.To">
            <summary>
            Gets the resulting state for this transition.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Moderation.Core.WorkflowTransition.Action">
            <summary>
            Gets the action which will advance a workflow from the origin state to the 
            resulting state.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowTransition.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type WorkflowTransition have the same 
            value of the underlying From and To states name strings, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.WorkflowTransition.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException">
            <summary>
            The TransitionSessionDeniedException represents an error occurring
            when a client attempts to act upon a target within a workflow
            to which another client has been issued exclusive access.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Moderation.Core.TransitionSessionDeniedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
    </members>
</doc>
