<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Find.Commerce</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Find.Commerce.CatalogContentClientConventions">
            <summary>
            Conventions for catalog content types.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Find.Commerce.CatalogContentClientConventions"/>
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CatalogContentClientConventions.IsListeningToRemoteEvents">
            <summary>
            Determine if the site should be listening to remote events
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CatalogContentClientConventions.AllowIndexingCatalogContent">
            <summary>
            Determine if the site should be used to index catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CatalogContentClientConventions.IsListeningToPriceEvents">
            <summary>
            Determine if the site should be used to index catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CatalogContentClientConventions.IsListeningToInventoryEvents">
            <summary>
            Determine if the site should be used to index catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CatalogContentClientConventions.IsListeningToLowLevelApiEvents">
            <summary>
            Determine if the site should be used to index catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyConventions(EPiServer.Find.IClientConventions)">
            <summary>
            Applies all the catalog content conventions.
            </summary>
            <param name="clientConventions">The client conventions, which are used to modify what's being indexed.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyEscapedQueryableCodeConvention(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase})">
            <summary>
            Adds the <see cref="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)"/> field.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyEscapedQueryableCodeConvention(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.NodeContent})">
            <summary>
            Adds the <see cref="M:EPiServer.Find.Commerce.NodeContentExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)"/> field.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyNestedConventions(EPiServer.Find.ClientConventions.NestedConventions)">
            <summary>
            Applies nested conventions
            </summary>
            <param name="nestedConventions"></param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyEntryContentConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyPackageContentConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.PackageContent})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyBundleContentConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.BundleContent})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyAssociationConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.IAssociating})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.Linking.Association"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssociating"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyPricingConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.IPricing})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyIndexedPricesConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Find.Commerce.IIndexedPrices})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyPriceConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.SpecializedProperties.Price})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/> conventions.
            </summary>
            <param name="conventionBuilder">The <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/> convention builder, where conventions will be added.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyIStockPlacementConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement"/> conventions.
            </summary>
            <param name="conventionBuilder">The convention builder.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyProductContentConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.ProductContent})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/> conventions.
            </summary>
            <param name="conventionBuilder">The convention builder</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyCustomerPricingConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Applies the <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> conventions.
            </summary>
            <param name="conventionBuilder">The convention builder.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ApplyNodeRelationsConventions(EPiServer.Find.ClientConventions.TypeConventionBuilder{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase})">
            <summary>
            Applies the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> conventions.
            </summary>
            <param name="conventionBuilder">The convention builder.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentClientConventions.ChangeConverterForInstancesOf``1(EPiServer.Find.IClientConventions,Newtonsoft.Json.JsonConverter)">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonConverter"/> for a specific type.
            </summary>
            <typeparam name="T">The type, which will have it's converter changed.</typeparam>
            <param name="conventions">The client convention interface, which will be used to set the converter.</param>
            <param name="converter">The converter to use.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.CatalogContentEventListener">
            <summary>
            Class to listen to CatalogKey events and re-index the content.
            </summary>
        </member>
        <member name="T:EPiServer.Find.Commerce.CatalogContentEventListener.ValidationMode">
            <summary>
            Determines if validation should be used or not for event argument.
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CatalogContentEventListener.ValidationMode.None">
            <summary>
            No validation
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CatalogContentEventListener.ValidationMode.Validate">
            <summary>
            Validate if the event argument is valid for indexing
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentRepository,EPiServer.Find.IClient,EPiServer.Find.Commerce.CatalogEventIndexer,EPiServer.Find.Commerce.CatalogContentClientConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CatalogContentEventListener" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="client">The client.</param>
            <param name="indexer">The indexer.</param>
            <param name="catalogContentClientConventions">Conventions for catalog content types.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentRepository,EPiServer.Find.IClient,EPiServer.Find.Commerce.CatalogEventIndexer,EPiServer.Find.Commerce.CatalogContentClientConventions,EPiServer.Find.Commerce.Services.PriceIndexing)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CatalogContentEventListener" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="client">The client.</param>
            <param name="indexer">The indexer.</param>
            <param name="catalogContentClientConventions">Conventions for catalog content types.</param>
            <param name="priceIndexing"></param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.AddEvent">
            <summary>
            Listens to remote events of CatalogKeyEventBroadcaster.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.RemoveEvent">
            <summary>
            Removes the event listener from the CatalogKeyEventBroadcaster.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.PriceUpdated(System.Object,Mediachase.Commerce.Engine.Events.PriceUpdateEventArgs)">
            <summary>
            Index content if needed when prices are updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Engine.Events.PriceUpdateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.InventoryUpdated(System.Object,Mediachase.Commerce.Engine.Events.InventoryUpdateEventArgs)">
            <summary>
            Index content when inventories are updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Engine.Events.InventoryUpdateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IsReindexingContentOnPriceUpdates">
            <summary>
            Determines if content should be re-indexed when prices has been changed.
            </summary>
            <returns><c>True</c> if the content should be re-indexed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IsReindexingContentOnInventoryUpdates">
            <summary>
            Determines if content should be re-indexed when inventories has been changed.
            </summary>
            <returns><c>True</c> if the content should be re-indexed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.TryDeserialize``1(EPiServer.Events.EventNotificationEventArgs,EPiServer.Find.Commerce.CatalogContentEventListener.ValidationMode,``0@)">
            <summary>
            Will try to de-serialize the <see cref="P:EPiServer.Events.EventNotificationEventArgs.Param"/> as the typed event argument.
            </summary>
            <param name="eventNotificationEventArgs">The <see cref="T:EPiServer.Events.EventNotificationEventArgs"/> instance containing the event data.</param>
            <param name="validationModel">If <c>ValidateEventArgs.Validate</c>, the De-serialized will be validated if it's valid for indexing. If the object isn't valid for indexing, the method will return false, and the <paramref name="deserializedEventArgs"/> will be null.</param>
            <param name="deserializedEventArgs">The De-serialized event argument</param>
            <returns><c>True</c> if the parameters was De-serialized to event arguments, and validated successfully. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IsReindexContentOnUpdates``1(System.Type)">
            <summary>
            Determines if the <paramref name="type"/> is of generic type, or contains property of generic type.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <param name="type">The type to check if the generic type can be assigned to, or if it has any property that can be assigned to the generic type.</param>
            <returns><c>True</c> if the <paramref name="type"/> is of generic type, or contains property of generic type, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentIfNeeded(System.Collections.Generic.IEnumerable{Mediachase.Commerce.Catalog.CatalogKey},System.Collections.Generic.IDictionary{System.Type,System.Boolean},System.Func{System.Boolean})">
            <summary>
            Re-index content if the <paramref name="cachedReindexContentOnEventForType"/> or <paramref name="isReindexingContentOnUpdates"/> returns true.
            </summary>
            <param name="catalogKeys">The content that might be re-indexed.</param>
            <param name="cachedReindexContentOnEventForType">Cached dictionary, which determines if content needs to be re-indexed.</param>
            <param name="isReindexingContentOnUpdates">Method that determines if the content needs to be re-indexed because of the event.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentsIfNeeded(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Action{EPiServer.Core.IContent})">
            <summary>
            Re-index content.
            </summary>
            <param name="contentLinks">A collection of <see cref="T:EPiServer.Core.ContentReference"/>s that might be re-indexed.</param>
            <param name="indexAction">The index action.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentsIfNeeded(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Collections.Generic.IDictionary{System.Type,System.Boolean},System.Func{System.Boolean})">
            <summary>
            Re-index content if the <paramref name="cachedReindexContentOnEventForType"/> or <paramref name="isReindexingContentOnUpdates"/> returns true.
            </summary>
            <param name="contentLinks">A collection of <see cref="T:EPiServer.Core.ContentReference"/>s that might be re-indexed.</param>
            <param name="cachedReindexContentOnEventForType">Cached dictionary, which determines if content needs to be re-indexed.</param>
            <param name="isReindexingContentOnUpdates">Method that determines if the content needs to be re-indexed because of the event.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentsIfNeeded(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Action{EPiServer.Core.IContent},System.Collections.Generic.IDictionary{System.Type,System.Boolean},System.Func{System.Boolean})">
            <summary>
            Re-index content if the <paramref name="cachedReindexContentOnEventForType"/> or <paramref name="isReindexingContentOnUpdates"/> returns true.
            </summary>
            <param name="contentLinks">A collection of <see cref="T:EPiServer.Core.ContentReference"/>s that might be re-indexed.</param>
            <param name="indexAction">The index action.</param>
            <param name="cachedReindexContentOnEventForType">Cached dictionary, which determines if content needs to be re-indexed.</param>
            <param name="isReindexingContentOnUpdates">Method that determines if the content needs to be re-indexed because of the event.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentsIfNeeded(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Action{EPiServer.Core.IContent},System.Collections.Generic.IDictionary{System.Type,System.Boolean},System.Func{System.Boolean})">
            <summary>
            Re-index content if the <paramref name="cachedReindexContentOnEventForType" /> or <paramref name="isReindexingContentOnUpdates" /> returns true.
            </summary>
            <param name="contents">The content that might be re-indexed</param>
            <param name="indexAction">The index action.</param>
            <param name="cachedReindexContentOnEventForType">Cached dictionary, which determines if content needs to be re-indexed.</param>
            <param name="isReindexingContentOnUpdates">Method that determines if the content needs to be re-indexed because of the event.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IsSelfRaised(EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Determines whether the event is raised by same instance.
            </summary>
            <param name="e">The <see cref="T:EPiServer.Events.EventNotificationEventArgs"/> instance containing the event data.</param>
            <returns><c>True</c> if self raised, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.GetIndexContentAction">
            <summary>
            Gets the action that will be performed when a <see cref="T:EPiServer.Core.IContent"/> is about to be indexed.
            </summary>
            <returns>The action that will be performed when a <see cref="T:EPiServer.Core.IContent"/> is about to be indexed.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.GetIndexContentAndDescendantsAction">
            <summary>
            Gets the action that will be performed when a <see cref="T:EPiServer.Core.IContent"/>, and all it's descendants is about to be indexed.
            </summary>
            <returns>The action that will be performed when a <see cref="T:EPiServer.Core.IContent"/>, and all it's descendants is about to be indexed.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentOnInventoryUpdate(Mediachase.Commerce.Engine.Events.InventoryUpdateEventArgs)">
            <summary>
            Handles catalog event updates
            </summary>
            <summary>
            Index content on inventory update
            </summary>
            <param name="inventoryUpdatedEventArgs">The inventory update event argument.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentnOPriceUpdate(Mediachase.Commerce.Engine.Events.PriceUpdateEventArgs)">
            <summary>
            Index content on price update
            </summary>
            <param name="priceUpdatedEventArgs">The price update event argument.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.IndexContentOnPriceUpdate(Mediachase.Commerce.Engine.Events.PriceUpdateEventArgs)">
            <summary>
            Index content on price update
            </summary>
            <param name="priceUpdatedEventArgs">The price update event argument.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentEventListener.DeSerialize(System.Byte[])">
            <summary>
            De-serialize event arguments.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CommerceBestBetSelector">
            <summary>
            Allows best bets for catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceBestBetSelector.ContentLink">
            <summary>
            Gets or sets the content link.
            </summary>
            <value>
            The content link.
            </value>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.Parse(System.String,System.String)">
            <summary>
            Parses the specified input for the requested language.
            </summary>
            <param name="input">The input.</param>
            <param name="language">The language.</param>
            <returns>New instance of a <see cref="T:EPiServer.Find.Commerce.CommerceBestBetSelector"/>.</returns>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceBestBetSelector.Language">
            <summary>
            Gets the language.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceBestBetSelector.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.SameTargetAs(EPiServer.Find.Framework.BestBets.IBestBetSelector)">
            <summary>
            Checks whether the targets are the same.
            </summary>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.GetTargetSelectionFilter">
            <summary>
            Gets the target selection filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.GetTargetSelectionFilter(EPiServer.Find.Language,System.Boolean)">
            <summary>
            Gets the target selection filter.
            </summary>
            <param name="language">The language</param>
            <param name="useFallback"><c>True</c> to use fallback language, otherwise <c>false</c>.</param>
            <returns>The useFallback selection filter.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.GetTargetKey">
            <summary>
            Gets the target key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.Match(System.String)">
            <summary>
            Matches the specified document identifier.
            </summary>
            <param name="documentId">The document identifier.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceBestBetSelector.HasReadAccess(System.Security.Principal.IPrincipal)">
            <summary>
            Determines if the user has read access to the <see cref="P:EPiServer.Find.Commerce.CommerceBestBetSelector.ContentLink"/>.
            </summary>
            <param name="iPrincipal"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.EntryContentAssociation">
            <summary>
            Association information of an entry-based content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.EntryContentAssociation.Type">
            <summary>
            Gets or sets the type of the association.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.EntryContentAssociation.List">
            <summary>
            Gets or sets the content references.
            </summary>
        </member>
        <member name="T:EPiServer.Find.Commerce.BundleContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.BundleContentExtensions.BundleEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent)">
            <summary>
            Gets entry references belonging to the bundle.
            </summary>
            <param name="content">The bundle content.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the entries in the bundle.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.BundleContentExtensions.BundleEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets entry references belonging to the bundle.
            </summary>
            <param name="content">The bundle content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the entries in the bundle.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CatalogContentBaseExtensions">
            <summary>
            Extension method for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentBaseExtensions.ParentNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the parent node relations.
            </summary>
            <param name="content">The catalog content.</param>
            <returns>
            /// <see cref="T:EPiServer.Core.ContentReference" />s of the parent node relations.
            </returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentBaseExtensions.ParentNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent node relations.
            </summary>
            <param name="content">The catalog content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
            <see cref="T:EPiServer.Core.ContentReference" />s of the parent node relations.
            </returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentBaseExtensions.ChildNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the child node relations.
            </summary>
            <param name="content">The catalog content.</param>
            <returns>
             <see cref="T:EPiServer.Core.ContentReference" />s of the child node relations.
            </returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogContentBaseExtensions.ChildNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.IContentLoader)">
            <summary>
            Gets the child node relations.
            </summary>
            <param name="content">The catalog content.</param>
            <param name="contentLoader">The content loader</param>
            <returns>
            <see cref="T:EPiServer.Core.ContentReference" />s of the child node relations.
            </returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CommerceExtensions">
            <summary>
            Common extensions methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceExtensions.ImageUrl(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the default image URL.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceExtensions.SearchSection(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Returns the type of content ex. product, variations.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceExtensions.SearchTypeName(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Searches the type name.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CommerceReIndexInformation">
            <summary>
            Allows find to index catalog content
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceReIndexInformation.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CommerceReIndexInformation"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="langugSelectorFactory">The language selector factory.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceReIndexInformation.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,EPiServer.Find.Commerce.CatalogContentClientConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CommerceReIndexInformation"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="langugSelectorFactory">The language selector factory.</param>
            <param name="catalogContentClientConventions">The conventions for catalog content types.</param>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceReIndexInformation.ReindexTargets">
            <summary>
            Returns all descendants of the <see cref="P:EPiServer.Find.Commerce.CommerceReIndexInformation.Root"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceReIndexInformation.GetCatalogs">
            <summary>
            Gets the catalogs, which will be indexed.
            </summary>
            <returns>The catalogs that will be indexed.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceReIndexInformation.GetContentToIndex(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Gets content to index for a catalog
            </summary>
            <param name="catalogContent">The catalog</param>
            <returns>The content that will be indexed for a catalog</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceReIndexInformation.GetLanguagesToIndex(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            The languages the <paramref name="catalogContent"/> should be indexed in.
            </summary>
            <param name="catalogContent">The content that will be indexed.</param>
            <returns>The languages the <paramref name="catalogContent"/> will be indexed in.</returns>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceReIndexInformation.Root">
            <summary>
            Gets the reference of the catalog root.
            </summary>
        </member>
        <member name="T:EPiServer.Find.Commerce.CommercePropertyResolver">
            <summary>
            Gets properties from content.
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CommercePropertyResolver.ThumbnailPropertyName">
            <summary>
            The thumbnail property name.
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CommercePropertyResolver.CodePropertyName">
            <summary>
            The code property name.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommercePropertyResolver.#ctor(EPiServer.IContentRepository,EPiServer.Web.Internal.BlobResolver)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Find.Commerce.CommercePropertyResolver"/>
            </summary>
            <param name="contentRepository">The content repository</param>
            <param name="blobResovler">The blob resolver</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommercePropertyResolver.#ctor(EPiServer.Commerce.Catalog.ThumbnailUrlResolver)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Find.Commerce.CommercePropertyResolver"/>.
            </summary>
            <param name="thumbnailUrlResolver">The thumbnail url resolver.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommercePropertyResolver.GetProperties(EPiServer.Core.IContent)">
            <summary>
            Gets the thumbnail and code property if exists for <paramref name="content"/>.
            </summary>
            <param name="content">The content.</param>
            <returns>Thumbnail and code property.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp">
            <summary>
            Sets up unified search for catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp.Log">
            <summary>
            The <see cref="T:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp"/> log.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp.#ctor(EPiServer.IContentRepository,EPiServer.Web.Routing.UrlResolver,EPiServer.Find.Commerce.CommercePropertyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="urlResolver">The URL resolver.</param>
            <param name="commercePropertyResolver">The commerce property resolver.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp.#ctor(EPiServer.IContentRepository,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="urlResolver">The URL resolver.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CommerceUnifiedSearchSetUp.AddUnifiedSearchRules(EPiServer.Find.IClient)">
            <summary>
            Adds the unified search rules.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.CurrencyExtensions">
            <summary>
            Extension methods for <see cref="T:Mediachase.Commerce.Currency"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CurrencyExtensions.Match(Mediachase.Commerce.Currency,Mediachase.Commerce.Currency)">
            <summary>
            Matches the indexed <paramref name="currency"/> with <paramref name="currencyToMatch"/>.
            </summary>
            <param name="currency">The indexed currency.</param>
            <param name="currencyToMatch">The currency to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>
            The matching will be done using the <see cref="P:Mediachase.Commerce.Currency.CurrencyCode"/>.
            </remarks>
        </member>
        <member name="T:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider">
            <summary>
            Adds search capabilities to the UI for catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.IEnterpriseSettings,EPiServer.DataAbstraction.IContentTypeRepository{EPiServer.DataAbstraction.ContentType})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="enterpriseSettings">The enterprise settings.</param>
            <param name="contentTypeRepository">The content type repository.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.IEnterpriseSettings,EPiServer.DataAbstraction.IContentTypeRepository{EPiServer.DataAbstraction.ContentType},EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="enterpriseSettings">The enterprise settings.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="uiDescriptorRegistry">The UI descriptor registry.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.ISiteDefinitionResolver,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="siteDefinitionResolver">The site definition resolver.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="uiDescriptorRegistry">The UI descriptor registry.</param>
        </member>
        <member name="P:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.Area">
            <summary>
            Gets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.Category">
            <summary>
            Gets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.IconCssClass(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            The icon css class.
            </summary>
            <param name="contentData">The content data.</param>
            <returns>Returns the css class for the icon.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.Search(EPiServer.Shell.Search.Query)">
            <summary>
            Performs a search where a prefix match for Code is prioritized. That is performed using
            the <see cref="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)"/> field and by escaping
            the query the same way and adding a trailing wildcard. If that query returns no results,
            the method will fall back to the base implementation's wider search.
            </summary>
            <param name="query">The query.</param>
            <returns>The search results.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EnterpriseCatalogSearchProvider.GetFieldQuery(System.String,System.Int32)">
            <summary>
            Build field query from query string. Overrides the base behavior and queries only the
            <see cref="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)"/> field if the search
            query contains a known prefix (which is excluded in the final query), otherwise it
            calls the base implementation.
            </summary>
            <param name="searchQuery">The query string.</param>
            <param name="maxResults">Max results to return.</param>
            <returns>
            The field query either for the <see cref="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)"/>
            or as constructed by the base implementation.
            </returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.EntryContentBaseExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.Markets(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Get the available market ids for the <paramref name="entryContentBase"/>
            </summary>
            <param name="entryContentBase">The content</param>
            <returns>Market ids for the available markets.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.Markets(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Get the available market ids for the <paramref name="entryContentBase"/>
            </summary>
            <param name="entryContentBase">The content</param>
            <param name="marketService">The market service</param>
            <returns>Market ids for the available markets.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="content">The entry content.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the bundles containing the entry.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="content">The entry content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the bundles containing the entry.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="content">The entry content.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the packages containing the entry.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="content">The entry content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the packages containing the entry.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the parent products.
            </summary>
            <param name="content">The entry content.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of parent products.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.ParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent products.
            </summary>
            <param name="content">The entry content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of parent products.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.EntryContentBaseExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Encodes non-ascii and non-alphanumeric characters that Find could otherwise
            use to tokenize the string into several words. The resulting string should
            not be split by the query analyzer and can hence be matched exactly with
            indexed data of the same form.
            </summary>
            <param name="content">The entry content.</param>
            <returns>The escaped code.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.FilterBuilderExtensions">
            <summary>
            Extensions method for FilterBuilder
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterOnCurrentMarket``1(EPiServer.Find.FilterBuilder{``0})">
            <summary>
            Adds current market filter on the <paramref name="filterBuilder"/>.
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <returns>Filter builder with current market filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterOnCurrentMarket``1(EPiServer.Find.FilterBuilder{``0},Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Adds current market filter on the <paramref name="filterBuilder"/>.
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <param name="currentMarketService">The current market service.</param>
            <returns>Filter builder with current market filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterMarket``1(EPiServer.Find.FilterBuilder{``0},Mediachase.Commerce.IMarket[])">
            <summary>
            Adds market filter on the <paramref name="filterBuilder"/>.
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <param name="markets">The markets</param>
            <returns>Filter builder with market filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterCustomerPricing``1(EPiServer.Find.FilterBuilder{``0},Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            
            </summary>
            <param name="filterBuilder">The filter builder.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.
            Prices for <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will also be included.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterCustomerPricing``1(EPiServer.Find.FilterBuilder{``0},Mediachase.Commerce.Pricing.CustomerPricing,EPiServer.Find.Commerce.CustomerPricingOption)">
            <summary>
            Matches the indexed customer pricing with <paramref name="valueToMatch"/>.
            </summary>
            <param name="filterBuilder">The filter builder.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <param name="customerPricingSelection"><see cref="F:EPiServer.Find.Commerce.CustomerPricingOption.IncludeAllCustomerPrices"/> if <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will be included.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceAvailableForCurrentUser``1(EPiServer.Find.FilterBuilder{``0})">
            <summary>
            Filter content with prices available for current user.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceAvailableForCurrentMarket``1(EPiServer.Find.FilterBuilder{``0})">
            <summary>
            Filter content with prices available in current market.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceAvailableForCurrentCurrency``1(EPiServer.Find.FilterBuilder{``0})">
            <summary>
            Filter content with prices available in current currency.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceLessThan``1(EPiServer.Find.FilterBuilder{``0},System.Decimal)">
            <summary>
            Filter content with price less than <paramref name="amountToMatch"/>.
            </summary>
            <param name="filterBuilder">The filter builder.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceGreaterThan``1(EPiServer.Find.FilterBuilder{``0},System.Decimal)">
            <summary>
            Filter content with price greater than <paramref name="amountToMatch"/>.
            </summary>
            <param name="filterBuilder">The filter builder.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterBuilderExtensions.FilterPriceInRange``1(EPiServer.Find.FilterBuilder{``0},System.Decimal,System.Decimal)">
            <summary>
            Filter content with price in range <paramref name="amountFrom"/> to <paramref name="amountTo"/>.
            </summary>
            <param name="filterBuilder">The filter builder.</param>
            <param name="amountFrom">Range value from.</param>
            <param name="amountTo">Range value to.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.IAssetContainerExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.DefaultImageUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the default image url for <paramref name="content"/>.
            </summary>
            <param name="content">The entry content.</param>
            <returns>The default image URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.DefaultImageUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,EPiServer.Commerce.Catalog.AssetUrlResolver)">
            <summary>
            Gets the default image url for <paramref name="content"/>.
            </summary>
            <param name="content">The entry content.</param>
            <param name="assetUrlResolver">The asset url resolver, which gets the asset url.</param>
            <returns>The default image URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.ThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets a thumbnail for the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/> from its asset.
            </summary>
            <param name="container">The asset container.</param>
            <returns>The thumbnail URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.ThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.String)">
            <summary>
            Gets a thumbnail for the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/> from its asset.
            </summary>
            <param name="container">The asset container.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The thumbnail URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.ThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,EPiServer.Commerce.Catalog.ThumbnailUrlResolver)">
            <summary>
            Gets a thumbnail for the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/> from its asset.
            </summary>
            <param name="container">The asset container.</param>
            <param name="thumbnailUrlResolver">The thumbnail URL resolver.</param>
            <returns>The thumbnail URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.ThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,EPiServer.Commerce.Catalog.ThumbnailUrlResolver,System.String)">
            <summary>
            Gets a thumbnail for the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/> from its asset.
            </summary>
            <param name="container">The asset container.</param>
            <param name="thumbnailUrlResolver">The thumbnail URL resolver.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The thumbnail URL.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssetContainerExtensions.GetThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,EPiServer.IContentRepository,EPiServer.Web.Internal.BlobResolver,System.String)">
            <summary>
            Gets a thumbnail for the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/> from its asset.
            </summary>
            <param name="container">The asset container.</param>
            <param name="contentRepository">The IContentRepository.</param>
            <param name="blobResolver">The BlobResolver.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The thumbnail URL.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.IAssociatingExtensions">
            <summary>
            Extension methods for IAssociating.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssociatingExtensions.Associations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating)">
            <summary>
            Gets associations related to the entry.
            </summary>
            <param name="association">The association.</param>
            <returns>A distinct list of all <see cref="T:EPiServer.Find.Commerce.EntryContentAssociation"/>s for the current <see cref="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository"/>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IAssociatingExtensions.Associations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating,EPiServer.Commerce.Catalog.Linking.IAssociationRepository)">
            <summary>
            Gets associations related to the entry.
            </summary>
            <param name="association">The association.</param>
            <param name="associationRepository">The association repository.</param>
            <returns>A distinct list of all <see cref="T:EPiServer.Find.Commerce.EntryContentAssociation"/>s for the provided <paramref name="associationRepository"/>.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.IndexedPricesExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Find.Commerce.IIndexedPrices"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.IndexedPricesExtensions.Prices(EPiServer.Find.Commerce.IIndexedPrices)">
            <summary>
            Gets all prices.
            </summary>
            <param name="pricing">The item to get the prices for.</param>
            <returns>The prices.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.InventoryExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchWarehouseCode(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.String)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="warehouseCode"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="warehouseCode">The warehouse code.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchAllowBackorder(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Boolean)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchAllowPreOrder(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Boolean)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchBackOrderAvailabilityDate(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchBackorderQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchInStockQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchPreorderQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchReorderMinQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchReservedQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchAdditionalQuantity(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchInventoryStatus(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,EPiServer.Commerce.SpecializedProperties.InventoryStatus)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchIsTracked(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Boolean)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.MatchPreorderAvailabilityDate(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="valueToMatch">The value to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.PreorderAvailabilityDateGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matched indexed inventories with a PreorderAvailabilityDate <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.PreorderAvailabilityDateLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matched indexed inventories with a PreorderAvailabilityDate <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.BackorderAvailabilityDateGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matched indexed inventories with a PreorderAvailabilityDate <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.BackorderAvailabilityDateLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.DateTime)">
            <summary>
            Matched indexed inventories with a PreorderAvailabilityDate <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.BackorderQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a BackorderQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.BackorderQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a BackorderQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.InStockQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a InStockQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.InStockQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a InStockQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.PreorderQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a PreorderQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.PreorderQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a PreorderQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.ReorderMinQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a ReorderMinQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.ReorderMinQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a ReorderMinQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.ReservedQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a ReservedQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.AdditionalQuantityGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a AdditionalQuantity <paramref name="value"/> that is greater than <paramref name="greaterThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="greaterThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.ReservedQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a ReservedQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.InventoryExtensions.AdditionalQuantityLessThan(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Decimal)">
            <summary>
            Matched indexed inventories with a AdditionalQuantity <paramref name="value"/> that is less than <paramref name="lessThanValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="lessThanValue">The value to check greater than.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.IStockPlacementExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement"/>. Allows indexing inventory on catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.IStockPlacementExtensions.Inventories(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement)">
            <summary>
            Gets the inventory records.
            </summary>
            <param name="stockPlacement">The stock to index.</param>
            <returns>A collection of <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory"/> items.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.IPricingExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.IPricingExtensions.DefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the default price for a specific content.
            </summary>
            <param name="pricing">The content to get the default price for.</param>
            <returns>The default price.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.IPricingExtensions.Prices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets all prices for a specific content.
            </summary>
            <param name="pricing">The content to get the prices for.</param>
            <returns>The prices.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.NodeContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.NodeContentExtensions.EscapedQueryableCode(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Encodes non-ascii and non-alphanumeric characters that Find could otherwise
            use to tokenize the string into several words. The resulting string should
            not be split by the query analyzer and can hence be matched exactly with
            indexed data of the same form.
            </summary>
            <param name="content">The node content.</param>
            <returns>The normalized code.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.PackageContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.PackageContentExtensions.PackageEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent)">
            <summary>
            Gets entry references belonging to the package.
            </summary>
            <param name="content">The package content.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the entries in the package.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PackageContentExtensions.PackageEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets entry references belonging to the package.
            </summary>
            <param name="content">The package content.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference" />s of the entries in the package.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.ProductContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.ProductContentExtensions.Variations(EPiServer.Commerce.Catalog.ContentTypes.ProductContent)">
            <summary>
            Gets variations related to the product content.
            </summary>
            <param name="productContent">The product content.</param>
            <returns>The related variations.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Extensions.StringExtensions.EscapeForQuery(System.String)">
            <summary>
            Encodes non-ascii and non-alphanumeric characters that Find could otherwise
            use to tokenize the string into several words. The resulting string should
            not be split by the query analyzer and can hence be matched exactly with
            indexed data of the same form.
            </summary>
            <param name="input">The input string.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.FilterCurrentMarketForVisitor">
            <summary>
            FilterForVisitor extension for filtering content on current market
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.FilterCurrentMarketForVisitor.FilterForVisitor``1(EPiServer.Find.FilterBuilder{``0},System.String)">
            <summary>
            Filters out contents inherit from EntryContentBase which are not available in current market
            </summary>
            <typeparam name="T">The filter type.</typeparam>
            <param name="filterBuilder">The filter builder.</param>
            <param name="language">The language.</param>
            <returns>Updated filter builder, which filters out contents inherit from EntryContentBase and are not available in current market.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.FindCommerceInitializationModule">
            <summary>
            The initialization module for EPiServer Find Commerce.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.FindCommerceInitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeadetly for each request reaching the site until the method succeeds.
            </remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.FindCommerceInitializationModule.Preload(System.String[])">
            <summary>
            Preloads the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.FindCommerceInitializationModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Resets the module into an uninitialized state.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
            <para>
            Any work done by <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete" /> should be reversed.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.FindCommerceInitializationModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Find.Commerce.ITypeSearchExtensions">
            <summary>
            Extensions method for the ITypeSearch interface.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterOnMarket``1(EPiServer.Find.ITypeSearch{``0})">
            <summary>
            Filters the search based on market.
            </summary>
            <typeparam name="T">The type of elements to search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterOnCurrentMarket``1(EPiServer.Find.ITypeSearch{``0})">
            <summary>
            Filter content on current market
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="search">The search request being built.</param>
            <returns>Search request with filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterOnCurrentMarket``1(EPiServer.Find.ITypeSearch{``0},Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Filter content on current market
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="search">The search request being built.</param>
            <param name="currentMarketService">The current market service.</param>
            <returns>Search request with filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterMarket``1(EPiServer.Find.ITypeSearch{``0},Mediachase.Commerce.IMarket[])">
            <summary>
            Filter content on market
            </summary>
            <typeparam name="T">The type of content searched.</typeparam>
            <param name="search">The search request being built.</param>
            <param name="markets">The markets</param>
            <returns>Search request with filter added.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterPriceAvailableForCurrentUser``1(EPiServer.Find.ITypeSearch{``0})">
            <summary>
            Filter content with prices available for current user. 
            </summary>
            <typeparam name="T">The type of elements to search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterPriceAvailableForCurrentMarket``1(EPiServer.Find.ITypeSearch{``0})">
            <summary>
            Filter content with prices available in current market.
            </summary>
            <typeparam name="T">The type of elements to search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.ITypeSearchExtensions.FilterPriceAvailableForCurrentCurrency``1(EPiServer.Find.ITypeSearch{``0})">
            <summary>
            Filter content with prices available in current currency.
            </summary>
            <typeparam name="T">The type of elements to search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.CatalogEventIndexer">
            <summary>
            Indexer class, wait for a configurable amount of time before actual indexing contents.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.#ctor(EPiServer.Find.Cms.ContentEventIndexer,EPiServer.Find.IClient,EPiServer.Find.Cms.EventedIndexingSettings,EPiServer.IContentLoader,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Find.Commerce.CatalogEventIndexer"/>
            </summary>
            <param name="contentEventIndexer">The content event indexer</param>
            <param name="client">The search client</param>
            <param name="eventedIndexingSettings">The event indexing settings</param>
            <param name="contentLoader">The content loader.</param>
            <param name="contentVersionRepository">The content version repository.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.#ctor(EPiServer.Find.Cms.ContentEventIndexer,EPiServer.Find.IClient,EPiServer.Find.Cms.EventedIndexingSettings,EPiServer.IContentLoader)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Find.Commerce.CatalogEventIndexer"/>
            </summary>
            <param name="contentEventIndexer">The content event indexer</param>
            <param name="client">The search client</param>
            <param name="eventedIndexingSettings">The event indexing settings</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.#ctor(EPiServer.Find.Cms.ContentEventIndexer,EPiServer.Find.IClient,EPiServer.Find.Cms.EventedIndexingSettings,EPiServer.IContentLoader,EPiServer.Core.IContentVersionRepository,EPiServer.IContentRepository)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Find.Commerce.CatalogEventIndexer"/>
            </summary>
            <param name="contentEventIndexer">The content event indexer</param>
            <param name="client">The search client</param>
            <param name="eventedIndexingSettings">The event indexing settings</param>
            <param name="contentLoader">The content loader.</param>
            <param name="contentVersionRepository">The content version repository.</param>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.IndexContent(EPiServer.Core.ContentReference)">
            <summary>
            Indexes content
            </summary>
            <param name="contentLink">Content links for the content that will be indexed.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.IndexContent(EPiServer.Core.IContent)">
            <summary>
            Indexes content
            </summary>
            <param name="content">Content that will be indexed.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.IndexContentInAllLanguages(EPiServer.Core.IContent)">
            <summary>
            Indexes content in all languages
            </summary>
            <param name="content">Content that will be indexed.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.IndexContentAndDescendants(EPiServer.Core.ContentReference)">
            <summary>
            Index catalog content, and all its descendants from a specific content reference.
            </summary>
            <param name="contentLink">Content link to index from.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.CatalogEventIndexer.RemoveFromIndex(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Removes content from index
            </summary>
            <param name="contentLinks">Content links for content that will be removed from the index.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.IIndexedPrices">
            <summary>
            Marker interface, which can be implemented on classes that want's to index prices.
            </summary>
        </member>
        <member name="T:EPiServer.Find.Commerce.CustomerPricingOption">
            <summary>
            Determines if prices valid for all customers should be included
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CustomerPricingOption.IncludeAllCustomerPrices">
            <summary>
            Prices valid for all customers will be included.
            </summary>
        </member>
        <member name="F:EPiServer.Find.Commerce.CustomerPricingOption.OnlySpecificPrices">
            <summary>
            Only specific prices will be included.
            </summary>
        </member>
        <member name="T:EPiServer.Find.Commerce.Json.CustomerPricingConverter">
            <summary>
            Json converter for <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.CustomerPricingConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the code and amount fields on the <paramref name="reader"/> to create a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> struct.
            </summary>
            <param name="reader">The json reader.</param>
            <param name="objectType">The type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The json serializer.</param>
            <returns><see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.CustomerPricingConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes an <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instace using the <paramref name="writer"/>.
            </summary>
            <param name="writer">The json writer.</param>
            <param name="value">The <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instance to serialize.</param>
            <param name="serializer">The json serializer.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.Json.JsonConverterBase`1">
            <summary>
            Base class for <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The element type being converted.</typeparam>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.JsonConverterBase`1.CanConvert(System.Type)">
            <summary>
            Checks if the <paramref name="objectType"/> is of type <paramref name="objectType"/>.
            </summary>
            <param name="objectType">The element type being converted.</param>
            <returns><c>True</c> if the object type is <paramref name="objectType"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.JsonConverterBase`1.WritePropertyType(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Writes the <paramref name="value"/> type on the <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The object to get the type from.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.Json.MarketIdConverter">
            <summary>
            Json converter for <see cref="T:Mediachase.Commerce.MarketId"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.MarketIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the code and amount fields on the <paramref name="reader"/> to create a <see cref="T:Mediachase.Commerce.MarketId"/> struct.
            </summary>
            <param name="reader">The json reader.</param>
            <param name="objectType">The type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The json serializer.</param>
            <returns><see cref="T:Mediachase.Commerce.MarketId"/></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.MarketIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes an <see cref="T:Mediachase.Commerce.MarketId"/> instace using the <paramref name="writer"/>.
            </summary>
            <param name="writer">The json writer.</param>
            <param name="value">The <see cref="T:Mediachase.Commerce.MarketId"/> instance to serialize.</param>
            <param name="serializer">The json serializer.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.Json.MoneyConverter">
            <summary>
            Serializes <see cref="T:Mediachase.Commerce.Money"/> to currency (nested JSON object containing currency code),
            and amount. Also deserializes it back to <see cref="T:Mediachase.Commerce.Money"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.MoneyConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the code and amount fields on the <paramref name="reader"/> to create a <see cref="T:Mediachase.Commerce.Money"/> struct.
            </summary>
            <param name="reader">The json reader</param>
            <param name="objectType">The type of the object</param>
            <param name="existingValue">The existing value</param>
            <param name="serializer">The json serializer</param>
            <returns><see cref="T:Mediachase.Commerce.Money"/> struct.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Json.MoneyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes an <see cref="T:Mediachase.Commerce.Money"/> instace using the <paramref name="writer"/>.
            </summary>
            <param name="writer">The json writer</param>
            <param name="value">The <see cref="T:Mediachase.Commerce.Money"/> instance to serialize</param>
            <param name="serializer">The json serializer.</param>
        </member>
        <member name="T:EPiServer.Find.Commerce.MarketIdExtensions">
            <summary>
            Extension methods for <see cref="T:Mediachase.Commerce.MarketId"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.MarketIdExtensions.Match(Mediachase.Commerce.MarketId,Mediachase.Commerce.MarketId)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.MarketId.Value"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.MarketIdExtensions.PriceMatchMarketId(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.MarketId)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.MarketId.Value"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.MarketIdExtensions.MatchMarketId(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.MarketId)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.MarketId.Value"/>.</remarks>
        </member>
        <member name="T:EPiServer.Find.Commerce.MoneyExtensions">
            <summary>
            Extension methods for <see cref="T:Mediachase.Commerce.Money"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.MoneyExtensions.Match(Mediachase.Commerce.Money,Mediachase.Commerce.Money)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Money.Amount"/> and <see cref="P:Mediachase.Commerce.Money.Currency"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.MoneyExtensions.LessThan(Mediachase.Commerce.Money,Mediachase.Commerce.Money)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is less than <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.MoneyExtensions.GreaterThan(Mediachase.Commerce.Money,Mediachase.Commerce.Money)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is greater than <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.MoneyExtensions.InRange(Mediachase.Commerce.Money,System.Decimal,System.Decimal,Mediachase.Commerce.Currency)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is in range between <paramref name="from"/> and <paramref name="to"/>.
            </summary>
            <param name="value">The indexed value</param>
            <param name="from">Range value from.</param>
            <param name="to">Range value to.</param>
            <param name="currency">The currency to match.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.PriceExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.MatchCustomerPricing(EPiServer.Find.Commerce.IIndexedPrices,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.
            Prices for <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will also be included.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.MatchCustomerPricing(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.
            Prices for <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will also be included.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.MatchCustomerPricing(EPiServer.Find.Commerce.IIndexedPrices,Mediachase.Commerce.Pricing.CustomerPricing,EPiServer.Find.Commerce.CustomerPricingOption)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <param name="customerPricingSelection"><see cref="F:EPiServer.Find.Commerce.CustomerPricingOption.IncludeAllCustomerPrices"/> if <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will be included.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.MatchCustomerPricing(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Pricing.CustomerPricing,EPiServer.Find.Commerce.CustomerPricingOption)">
            <summary>
            Matches the indexed <paramref name="value"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <param name="customerPricingSelection"><see cref="F:EPiServer.Find.Commerce.CustomerPricingOption.IncludeAllCustomerPrices"/> if <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will be included.</param>
            <returns>Filter expression.</returns>
            <remarks>The matching will be done for <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceCode"/> and <see cref="P:Mediachase.Commerce.Pricing.CustomerPricing.PriceTypeId"/>.</remarks>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentUser(EPiServer.Find.Commerce.IIndexedPrices)">
            <summary>
            Filters documents which has a price for the current user.
            </summary>
            <param name="value">The item that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentUser(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Filters documents which has a price for the current user.
            </summary>
            <param name="value">The content that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentCurrency(EPiServer.Find.Commerce.IIndexedPrices)">
            <summary>
            Filters documents which has a price in the same currency as the current currency.
            </summary>
            <param name="value">The item that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentCurrency(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Filters documents which has a price in the same currency as the current currency.
            </summary>
            <param name="value">The item that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentMarket(EPiServer.Find.Commerce.IIndexedPrices)">
            <summary>
            Filters documents which has a price in the same market as the current market.
            </summary>
            <param name="value">The item that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceAvailableForCurrentMarket(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Filters documents which has a price in the same market as the current market.
            </summary>
            <param name="value">The item that contains prices.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceLessThan(EPiServer.Find.Commerce.IIndexedPrices,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is less than <paramref name="amountToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceLessThan(EPiServer.Commerce.Catalog.ContentTypes.IPricing,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is less than <paramref name="amountToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceGreaterThan(EPiServer.Find.Commerce.IIndexedPrices,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is greater than <paramref name="amountToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceGreaterThan(EPiServer.Commerce.Catalog.ContentTypes.IPricing,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is greater than <paramref name="amountToMatch"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceInRange(EPiServer.Find.Commerce.IIndexedPrices,System.Decimal,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is in range between <paramref name="amountFrom"/> and <paramref name="amountTo"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountFrom">Range value from.</param>
            <param name="amountTo">Range value to.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.PriceExtensions.PriceInRange(EPiServer.Commerce.Catalog.ContentTypes.IPricing,System.Decimal,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="value"/> is in range between <paramref name="amountFrom"/> and <paramref name="amountTo"/>.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="amountFrom">Range value from.</param>
            <param name="amountTo">Range value to.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.Services.PriceFiltering">
            <summary>
            Service for price filtering
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.#ctor(EPiServer.Find.IClient,Mediachase.Commerce.ICurrentMarket,Mediachase.Commerce.Core.SiteContext)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Find.Commerce.Services.PriceFiltering"/> service.
            </summary>
            <param name="client">The find client.</param>
            <param name="currentMarket">The current market service.</param>
            <param name="siteContext">The site context.</param>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.MatchCustomerPricing``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}},Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Matches the indexed <paramref name="prices"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="prices">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.MatchCustomerPricing``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}},Mediachase.Commerce.Pricing.CustomerPricing,EPiServer.Find.Commerce.CustomerPricingOption)">
            <summary>
            Matches the indexed <paramref name="prices"/> with <paramref name="valueToMatch"/>.
            </summary>
            <param name="prices">The indexed value.</param>
            <param name="valueToMatch">The value to match against the indexed document.</param>
            <param name="customerPricingSelection"><see cref="F:EPiServer.Find.Commerce.CustomerPricingOption.IncludeAllCustomerPrices"/> if <see cref="F:Mediachase.Commerce.Pricing.CustomerPricing.PriceType.AllCustomers"/> will be included.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceAvailableForCurrentUser``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}})">
            <summary>
            Filters documents which has a price for the current user.
            </summary>
            <param name="prices"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceAvailableForCurrentCurrency``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}})">
            <summary>
            Filters documents which has a price in the same currency as the current currency.
            </summary>
            <param name="prices">The indexed value.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceAvailableForCurrentMarket``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}})">
            <summary>
            Filters documents which has a price in the same market as the current market.
            </summary>
            <param name="prices">The indexed value.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceLessThan``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}},System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="prices"/> is less than <paramref name="amountToMatch"/>.
            </summary>
            <param name="prices">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceGreaterThan``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}},System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="prices"/> is greater than <paramref name="amountToMatch"/>.
            </summary>
            <param name="prices">The indexed value.</param>
            <param name="amountToMatch">The value to match against the indexed document.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.FilterPriceInRange``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price}}},System.Decimal,System.Decimal)">
            <summary>
            Creates a filter which checks that the <paramref name="prices"/> is in range between <paramref name="amountFrom"/> and <paramref name="amountTo"/>.
            </summary>
            <param name="prices">The indexed value.</param>
            <param name="amountFrom">Range value from.</param>
            <param name="amountTo">Range value to.</param>
            <returns>Filter builder.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceFiltering.GetCustomerPriceAmount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.SpecializedProperties.Price})">
            <summary>
            Post filtering for getting best price from a collection of prices for the current user.
            </summary>
            <param name="prices">The prices</param>
            <returns>The best price for the current user.</returns>
        </member>
        <member name="T:EPiServer.Find.Commerce.Services.PriceIndexing">
            <summary>
            Price extensions
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.#ctor(EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.IContentLoader)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Find.Commerce.Services.PriceIndexing"/>
            </summary>
            <param name="relationRepository">The relation repository.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="P:EPiServer.Find.Commerce.Services.PriceIndexing.IsIndexingIIndexedPrices">
            <summary>
            Determines if <see cref="T:EPiServer.Find.Commerce.IIndexedPrices"/> implementations should index prices. Default is 'false'.
            </summary>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.GetPrices(EPiServer.Find.Commerce.IIndexedPrices)">
            <summary>
            Gets all prices for a specific content.
            </summary>
            <param name="pricing">The content to get the prices for.</param>
            <returns>The prices.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.GetAffectedContentLinksOnPriceUpdate(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets affected content links on price update.
            </summary>
            <param name="contentLinks">The content that contains a price update.</param>
            <returns>The Affected content links.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the default price for a specific content.
            </summary>
            <param name="pricing">The content to get the default price for.</param>
            <returns>The default price.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets all prices for a specific content.
            </summary>
            <param name="pricing">The content to get the prices for.</param>
            <returns>The prices.</returns>
        </member>
        <member name="M:EPiServer.Find.Commerce.Services.PriceIndexing.IsEmptyPrice(EPiServer.Commerce.SpecializedProperties.Price)">
            <summary>
            Determines if the price is empty
            </summary>
            <param name="price">The price.</param>
            <returns><c>True</c> if the price is empty, otherwise <c>false</c>.</returns>
        </member>
    </members>
</doc>
