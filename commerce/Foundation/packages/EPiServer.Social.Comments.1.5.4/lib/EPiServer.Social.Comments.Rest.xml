<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Social.Comments.Rest</name>
    </assembly>
    <members>
        <member name="M:EPiServer.Social.Comments.Rest.CommentAdapter.AdaptToComposite``1(EPiServer.Social.Comments.Rest.Contracts.CommentResponse)">
            <summary>
            Converts a commentResponse instance to a corresponding Composite instance.
            </summary>
            <typeparam name="TExtension">Type of extension data in the composite</typeparam>
            <param name="response">Response to be adapted</param>
            <returns>A corresponding Composite instance</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentAdapter.Adapt``1(EPiServer.Social.Common.Rest.Contracts.PagedResponse{EPiServer.Social.Comments.Rest.Contracts.CommentResponse},EPiServer.Social.Common.PageInfo)">
            <summary>
            Converts a commentResponse and PagInfo object to a corresponding Resultpage of Composites.
            </summary>
            <typeparam name="TExtension">Type of extension data in the composite</typeparam>
            <param name="pageOfCommentResponses">response to be adapted</param>
            <param name="criteriaPageInfo">pageinfo to be adapted</param>
            <returns>A corresponding ResultPage of Composites</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentAdapter.Adapt(EPiServer.Social.Common.Rest.Contracts.PagedResponse{EPiServer.Social.Comments.Rest.Contracts.CommentResponse},EPiServer.Social.Common.PageInfo)">
            <summary>
            Converts a commentResponse and pageinfo object to a corresponding resultpage instance.
            </summary>
            <param name="pageOfCommentResponses">Response to be adapted</param>
            <param name="criteriaPageInfo">pageinfo to be adapted</param>
            <returns>A corresponding resultpage instance</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentAdapter.HasExtension(EPiServer.Social.Comments.Rest.Contracts.CommentResponse)">
            <summary>
            Returns true if the specified response carries extension
            data, false otherwise.
            </summary>
            <param name="response">response to evaluate</param>
            <returns>True if the specified response carries extension data, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CriteriaAdapter.Adapt(EPiServer.Social.Common.Criteria{EPiServer.Social.Comments.Core.CommentFilter})">
            <summary>
            Adapts a Criteria object of type CommentFilter into a GetByCriteriaRequest.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CriteriaAdapter.Adapt``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Comments.Core.CommentFilter,``0})">
            <summary>
            Adapts a CompositeCriteria object of type CommentFilter and TExtension into a GetByCriteriaRequest.
            </summary>
            <typeparam name="TExtension"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.VisibilityAdapter.Adapt(EPiServer.Social.Comments.Core.Visibility)">
            <summary>
            Adapts the Visibility enum into a string value of either all, visible or notvisible.
            </summary>
            <param name="visibility"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler">
            <summary>
            The CommentResponseMessageHandler class is responsible for interpreting HTTP 
            response messages returned by the Comments REST service.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleAdd``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for an "Add" request issued to the Comments REST service.
            </summary>
            <typeparam name="TExtension">Type of extension data</typeparam>
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Composite comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleAdd(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for an "Add" request issued to the Comments REST service.
            </summary>        
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleUpdate(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for an "Update" request issued to the Comments REST service.
            </summary>        
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleUpdate``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for an "Update" request issued to the Comments REST service.
            </summary>
            <typeparam name="TExtension">Type of extension data</typeparam>
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Composite comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleGetById``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for a "Get by ID" request issued to the Comments REST service.
            </summary>
            <typeparam name="TExtension">Type of extension data</typeparam>
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Composite comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleGetById(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for a "Get by ID" request issued to the Comments REST service.
            </summary>        
            <param name="httpResponseMessage">Response message to handle</param>
            <returns>Comment from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleRemove(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles response messages for a "Remove" request issued to the Comments REST service.
            </summary>        
            <param name="httpResponseMessage">Response message to handle</param>        
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleGetByCriteria``1(System.Net.Http.HttpResponseMessage,EPiServer.Social.Common.PageInfo)">
            <summary>
            Handles response messages for a "Get by criteria" request issued to the Comments REST service.
            </summary>
            <typeparam name="TExtension">Type of extension data</typeparam>
            <param name="httpResponseMessage">Response message to handle</param>
            <param name="pageInfo">Paging information</param>
            <returns>Result page of composite comments from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleGetByCriteria(System.Net.Http.HttpResponseMessage,EPiServer.Social.Common.PageInfo)">
            <summary>
            Handles response messages for a "Get by criteria" request issued to the Comments REST service.
            </summary>
            <param name="httpResponseMessage">Response message to handle</param>
            <param name="pageInfo">Paging information</param>
            <returns>Result page of comments from the response</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentResponseMessageHandler.HandleUnsuccessful(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles responses which indicate that the request was unsuccessful.
            </summary>
            <param name="httpResponseMessage">Response message to handle</param>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Add(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Adds a new comment to the underlying data store. 
            </summary>
            <param name="comment">The partially populated comment to be added</param>
            <returns>The fully populated comment that was added.</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.AddAsync(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Asynchronously adds a new comment to the underlying data store. 
            </summary>
            <param name="comment">The partially populated comment to be added</param>
            <returns>The fully populated comment that was added.</returns>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.AddAsync``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Asynchronously adds a new composite comment to the underlying data store. 
            </summary>
            <typeparam name="TExtension">Type of extension data for the comment being added.</typeparam>
            <param name="comment">The partially populated comment to be added</param>
            <returns>The fully populated comment that was added.</returns>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Add``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
             Adds a new composite comment to the underlying data store. 
            </summary>
            <typeparam name="TExtension">Type of extension data for the comment being added.</typeparam>
            <param name="comment">The partially populated comment to be added</param>
            <returns>The fully populated comment that was added.</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Get(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Finds a comment by its identifier.
            </summary>
            <param name="id">Id of comment to retrieve.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Get``1(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Finds a comment by its identifier.
            </summary>
            <typeparam name="TExtension">Type of extension data to retrieve.</typeparam>
            <param name="id">Id of comment to retrieve.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.GetAsync(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Asynchronously finds a comment by its identifier.
            </summary>
            <param name="id">Id of comment to retrieve.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.GetAsync``1(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Asynchronously finds a comment by its identifier.
            </summary>
            <typeparam name="TExtension">Type of extension data to retrieve.</typeparam>
            <param name="id">Id of comment to retrieve.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Update(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Updates a comment by its identifier.
            </summary>
            <param name="comment">updated version of the comment.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Update``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Updates a comment by its identifier.
            </summary>
            <typeparam name="TExtension">Type of extension data for the comment being updated.</typeparam>
            <param name="comment">updated version of the comment.</param>
            <param name="extension">updated version of the extension data.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.UpdateAsync(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Asynchronously updates a comment by its identifier.
            </summary>
            <param name="comment">updated version of the comment.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.UpdateAsync``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Asychronously updates a comment by its identifier.
            </summary>
            <typeparam name="TExtension">Type of extension data for the comment being updated.</typeparam>
            <param name="comment">updated version of the comment.</param>
            <param name="extension">updated version of the extension data.</param>
            <returns>The identified comment</returns>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Comments.Core.CommentFilter})">
            <summary>
            Retrieves a page of comment items composed without their extension data 
            from the database, as described by the specified criteria. 
            </summary>
            <param name="criteria">Criteria by which to filter comment items</param>
            <returns>Page of comment items</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Comments.Core.CommentFilter})">
            <summary>
            Asynchronously retrieves a page of comment items composed without their extension data 
            from the database, as described by the specified criteria. 
            </summary>
            <param name="criteria">Criteria by which to filter comment items</param>
            <returns>Page of comment items</returns>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Comments.Core.CommentFilter,``0})">
            <summary>
            Retrieves a page of comment items composed with their extension data 
            from the database, as described by the specified criteria. The result
            set will be filtered to items of the type supplied as a type param.
            </summary>
            <typeparam name="TExtension">Type of extension data associated with the items to be retrieved</typeparam>
            <param name="criteria">Criteria by which to filter comment items</param>
            <returns>Page of comment items composed with their extension data</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Comments.Core.CommentFilter,``0})">
            <summary>
            Asynchronously retrieves a page of comment items composed with their extension data 
            from the database, as described by the specified criteria. The result
            set will be filtered to items of the type supplied as a type param.
            </summary>
            <typeparam name="TExtension">Type of extension data associated with the items to be retrieved</typeparam>
            <param name="criteria">Criteria by which to filter comment items</param>
            <returns>Page of comment items composed with their extension data</returns>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.Remove(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Deletes a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be deleted</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.HttpCommentRepository.RemoveAsync(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Asynchronously deletes a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be deleted</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when the cloud service cannot be reached.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.Contracts.ICommentRequestFactory.Add(EPiServer.Social.Comments.Rest.Contracts.AddRequest)">
            <summary>
            Returns the populated HttpRequestMessage based upon the provided request
            </summary>
            <param name="addRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.Contracts.ICommentRequestFactory.GetByCriteria(EPiServer.Social.Comments.Rest.Contracts.GetByCriteriaRequest)">
            <summary>
            Returns the populated HttpRequestMessage based upon the provided request
            </summary>
            <param name="getByCriteriaRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.Contracts.ICommentRequestFactory.GetById(EPiServer.Social.Comments.Rest.Contracts.GetByIdRequest)">
            <summary>
            Returns the populated HttpRequestMessage based upon the provided request
            </summary>
            <param name="getByIdRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.Contracts.ICommentRequestFactory.Remove(System.String)">
            <summary>
            Returns the populated HttpRequestMessage based upon the provided request
            </summary>
            <param name="id">string value of the comment id to be removed</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.Contracts.ICommentRequestFactory.Update(System.String,EPiServer.Social.Comments.Rest.Contracts.UpdateRequest)">
            <summary>
            Returns the populated HttpRequestMessage based upon the provided request
            </summary>
            <param name="updateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentRequestFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentRequestFactory.Add(EPiServer.Social.Comments.Rest.Contracts.AddRequest)">
            <summary>
            Receives a AddRequest and returns a properly formed HttpRequestMessage.
            </summary>
            <param name="addRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentRequestFactory.GetByCriteria(EPiServer.Social.Comments.Rest.Contracts.GetByCriteriaRequest)">
            <summary>
            Receives a GetByCriteriaRequest and returns a properly formed HttpRequestMessage.
            </summary>
            <param name="getRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentRequestFactory.GetById(EPiServer.Social.Comments.Rest.Contracts.GetByIdRequest)">
            <summary>
            Receives a GetByIdRequest and returns a properly formed HttpRequestMessage.
            </summary>
            <param name="getByIdRequest"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Social.Comments.Rest.CommentRequestFactory.Update(System.String,EPiServer.Social.Comments.Rest.Contracts.UpdateRequest)">
            <summary>
            Receives a comment id and an UpdateRequest and returns a properly formed HttpRequestMessage.
            </summary>
            <param name="commentId"></param>
            <param name="updateRequest"></param>
            <returns></returns>
        </member>
    </members>
</doc>
