<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Business.Commerce</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Commerce.ApplicationContext">
            <summary>
            Contains information about the current application context
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.ApplicationContext.HasContentModelTypes">
            <summary>
            Indicates whether the current application has the IContent model types for catalog content available.
            Considers the models available if there is at least one available which is decorated with the
            <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.ApplicationContext.SkipContentModelCheck">
            <summary>
            Gets the episerver:SkipCatalogContentModelCheck appSetting, indicating wheter the value
            returned by <see cref="P:EPiServer.Commerce.ApplicationContext.HasContentModelTypes"/> should be ignored. Setting this to true
            means operations that require the content models for catalog content are considered
            safe even if there are no classes decorated with <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/>.
            This is useful for sites that don't use typed models.
            </summary>
            <remarks>The appSetting should under no circumstances be used in applications that 
            share a database with an application which HAS content type models, e.g. in the
            Commerce Manager application.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.ApplicationContext.DisableVersionSync">
            <summary>
            Gets the value of the DisableVersionSync appSetting, indicating whether an
            update to Catalog content done outside the Content APIs will remove any version data (e.g. drafts,
            old published versions...) for the affected Content.
            Setting this to true can improve the speed of batch operations done through the lower-level API:s
            (like ICatalogSystem), e.g. the catalog import.
            </summary>
            <value>
            <c>true</c> to delete all versions; <c>false</c> to update versions if content models are available.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.AssetUrlConventions">
            <summary>
            Sets default group on content types, which implements <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.AssetUrlConventions"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.AssetUrlConventions.DefaultAssetUrl">
            <summary>
            Gets or sets the default asset URL.
            </summary>
            <value>
            The default asset URL.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.AddDefaultGroup``1(System.String)">
            <summary>
            Adds a group as default group for a specific content type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="groupName">Name of the group.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.GetDefaultGroup(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the default group for the specific content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.AssetUrlResolver">
            <summary>
            Gets the asset url.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.#ctor(EPiServer.Web.Routing.UrlResolver,EPiServer.Commerce.Catalog.AssetUrlConventions,EPiServer.IContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.AssetUrlResolver"/> class.
            </summary>
            <param name="urlResolver">The URL resolver.</param>
            <param name="assetUrlConvention">The asset URL convention.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the asset URL.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the asset URL for a specific type.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.Func{EPiServer.Commerce.SpecializedProperties.CommerceMedia,System.String})">
            <summary>
            Gets the asset URL.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <param name="resolveForSelected">Delegate, which will be called with a selected <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>. The delegate will return the url of the <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.Func{EPiServer.Commerce.SpecializedProperties.CommerceMedia,System.String})">
            <summary>
            Gets the asset URL for a specific type.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <param name="resolveForSelected">Delegate, which will be called with a selected <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>. The delegate will return the url of the <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.SpecializedProperties.ItemCollection{EPiServer.Commerce.SpecializedProperties.CommerceMedia},System.String)">
            <summary>
            Gets the asset URL which is considered as default from the <paramref name="mediaList"/>.
            </summary>
            <param name="mediaList">List of CommerceMedia to get the default one from.</param>
            <param name="defaultGroup">The default group name.</param>
            <returns>The asset URL.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.SpecializedProperties.ItemCollection{EPiServer.Commerce.SpecializedProperties.CommerceMedia},System.String,System.Func{EPiServer.Commerce.SpecializedProperties.CommerceMedia,System.String})">
            <summary>
            Gets the asset URL which is considered as default from the <paramref name="mediaList"/>, using the custom delegate to resolve asset URL.
            </summary>
            <param name="mediaList">List of CommerceMedia to get the default one from.</param>
            <param name="defaultGroup">The default group name.</param>
            <param name="resolveForSelected">Delegate, which will be called with a selected <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>. The delegate will return the url of the <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentReferenceExtensions.GetCommonDraft(EPiServer.Core.ContentReference,System.String,EPiServer.IContentLoader,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Gets the common draft version of a catalog content.
            </summary>
            <param name="contentLink">The content link, which will be used when getting the common draft.</param>
            <param name="language">The language for the catalog content</param>
            <param name="contentLoader">The content loader</param>
            <param name="contentVersionRepository">The content version repository</param>
            <returns>The common draft if exists.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Associations">
            <summary>
            Represents associated entries for a catalog entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Associations.ContentLink">
            <summary>
            gets or sets the association content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent">
            <summary>
            Class to store information about bundles
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.BundleContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.BundleContent.BundleReference">
            <summary>
            Gets or sets the bundle content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent">
            <summary>
            Class to store information about Catalog object
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultCurrency">
            <summary>
            Gets or sets the default currency.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage">
            <summary>
            Gets or sets the default language.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the catalog is primary.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.WeightBase">
            <summary>
            Gets or sets the weight base.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.LengthBase">
            <summary>
            Gets or sets the length base.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages">
            <summary>
            Gets or sets the catalog languages.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.SetChangedOnPublish">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Changed"/> should be updated on publish.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.IsModified">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.MakeReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CreateWriteableCloneImplementation">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.ResetModified">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase">
            <summary>
            Base class for all content delivered from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentLink">
            <summary>
            Gets or sets the content link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ParentLink">
            <summary>
            Gets or sets the parent link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentGuid">
            <summary>
            Gets or sets the content GUID.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentTypeID">
            <summary>
            Gets or sets the content type ID that this <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> is an instance of.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the content is deleted.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsNull">
            <summary>
            Gets a value indicating whether this instance is null.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CreateWritableClone">
            <summary>
            Creates a writable clone of this object.
            </summary>
            <returns>A writable <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> object.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CreateWriteableCloneImplementation">
            <summary>
            Creates the writeable clone including writeable clones of the content link
            and the language collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.MakeReadOnly">
            <summary>
            Protects from modifying this object.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ExistingLanguages">
            <summary>
            Gets or sets the existing languages for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Language">
            <summary>
            Gets or sets the language for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.MasterLanguage">
            <summary>
            Gets or sets the master language for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsPendingPublish">
            <summary>
            Gets or sets a value indicating whether the content is pending publish.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.StartPublish">
            <summary>
            Gets or sets the start publish date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.StopPublish">
            <summary>
            Gets or sets the stop publish date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.RouteSegment">
            <summary>
            Gets or sets the route segment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CatalogId">
            <summary>
            Gets or sets the catalog id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.GetSecurityDescriptor">
            <summary>
                Gets the security descriptor.
            </summary>
            <returns>An instance of <see cref="T:EPiServer.Security.ContentAccessControlList"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Categories">
            <summary>
            Represents relating categories for a catalog entry or node.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Categories.ContentLink">
            <summary>
            gets or sets the relation content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase">
            <summary>
            Base class for all types of catalog entries (products, variations, bundles, packages...)
            </summary>
            <remarks>
            This class is not designed to be used as a base class directly by client code, instead
            use one of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/>, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.VariationContent"/>, 
            <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/> or <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/>
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ClassTypeId">
            <summary>
            Gets the class type id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SeoUri">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.MarketFilter">
            <summary>
            Gets or sets ids for the markets where the product not available.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.MetaClassId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SeoInformation">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media for catalog node
            </summary>            
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SetChangedOnPublish">
            <summary>
                Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Changed"/> should be updated on publish.
            </summary>
            <remarks>
                The commerce backend has only one date field, so we cannot differentiate between Saved and Changed.
                Because of this, this property will always return true.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Categories">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ParentEntries">
            <summary>
                Gets or sets the item which holds the relations to any parent entries.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Associations">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media collection.
            </summary>
            <value>
            The commerce media collection.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IAssociating">
            <summary>
            Defines the properties of an item supporting associations
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IAssociating.Associations">
            <summary>
                Gets or sets the associations item which holds the relation data.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable">
            <summary>
            Defines the properties of an item supporting Relations
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable.Categories">
            <summary>
                Gets or sets the categories item which holds the category data.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IDimensionalStockPlacement">
            <summary>
            Interface to indicate that an variation/package has shipment dimension properties.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IDimensionalStockPlacement.ShippingDimensions">
            <summary>
                Gets or sets the dimensions of the shipment.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IMetaClass">
            <summary>
            Describes a Content class which can have a Meta Class in Meta Data Plus
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IMetaClass.MetaClassId">
            <summary>
            Gets or sets the meta class id.
            </summary>
            <remarks>This property is not designed to be set by client code. The meta class of the content
            should be defined by decorating the class with  the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/>
            and defining the MetaClassName property.</remarks>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Bundle">
            <summary>
            The base for Bundle content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Catalog">
            <summary>
            The base for Catalog content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Node">
            <summary>
            The base for Node content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Package">
            <summary>
            The base for Package content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Product">
            <summary>
            The base for Product content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.Internal.CatalogContentTypeBase.Variation">
            <summary>
            The base for Variation content types.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing">
            <summary>
                Defines what the properties of an item that supports pricing.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IPricing.TaxCategoryId">
            <summary>
                Gets or sets the tax category.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IPricing.PriceReference">
            <summary>
                Gets or sets a product link, which holds the price data.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation">
            <summary>
            Marks if a catalog node or entry has SEO information
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation.SeoInformation">
            <summary>
            Gets or sets the seo info.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation.SeoUri">
            <summary>
            Gets or sets the SEO URI.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement">
            <summary>
            Marks if a catalog entry has inventory data.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.MaxQuantity">
            <summary>
                Gets or sets the maximum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.MinQuantity">
            <summary>
                Gets or sets the minimum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.TrackInventory">
            <summary>
                Gets or sets a value indicating whether inventory should be tracked.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.Weight">
            <summary>
                Gets or sets the weight.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.ShippingPackageId">
            <summary>
            Gets or sets the shipping package identifier.
            </summary>
            <value>
            The shipping package identifier.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.InventoryReference">
            <summary>
               Gets or sets the product link, which holds inventory data.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer">
            <summary>
            Defines the properties of an item supporting Variance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer.VariantsReference">
            <summary>
                Gets or sets the variants content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent">
            <summary>
            Class to store information about CatalogNode object
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SeoUri">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.MetaClassId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SeoInformation">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media for catalog node
            </summary>            
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SetChangedOnPublish">
            <summary>
                Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Changed"/> should be updated on publish.
            </summary>
            <remarks>
                The commerce backend has only one date field, so we cannot differentiate between Saved and Changed.
                Because of this, this property will always return true.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Categories">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.MakeReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.CreateWriteableCloneImplementation">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase">
            <summary>
            Base class for all types of nodes in the catalog (nodes as well
            as the catalog itself and the catalog root).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase.GetSecurityDescriptor">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase.GetContentSecurityDescriptor">
            <summary>
            Gets the content security descriptor.
            </summary>
            <returns>The content access control list.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase.CreateWriteableCloneImplementation">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent">
            <summary>
            Class to store information about packages
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.MinQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.MaxQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.Weight">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.ShippingPackageId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.ShippingDimensions">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.TrackInventory">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.InventoryReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.TaxCategoryId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.PriceReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.PackageReference">
            <summary>
            Gets or sets the package content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent">
            <summary>
            Class to store information about products
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ProductContent.VariantsReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ProductContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Relations">
            <summary>
            Represents relating entries for an entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Relations.ContentLink">
            <summary>
            gets or sets the content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.RootContent">
            <summary>
            Class to store information about the root of CatalogContentBase
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.ExistingLanguages">
            <summary>
            RootContent will have Master language as ExistingLanguages.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.MasterLanguage">
            <summary>
            RootContent will have a MasterLanguage as the site has.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.Language">
            <summary>
            For all instance, RootContent will always has Master language as the only one Language
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.Name">
            <summary>
            Overwrite name with translation for catalog root.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation">
            <summary>
            Represents SEO information for a catalog entry or node.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Description">
            <summary>
            Gets or sets the SEO description.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Keywords">
            <summary>
            Gets or sets the SEO keywords.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions">
            <summary>
                The dimensions of a shipping item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Length">
            <summary>
                Gets or sets the length.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Height">
            <summary>
                Gets or sets the height.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Width">
            <summary>
                Gets or sets the width.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.VariationContent">
            <summary>
            Class to store information about variations/SKUs
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.MinQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.MaxQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.Weight">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.ShippingPackageId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.ShippingDimensions">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.TrackInventory">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.InventoryReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.TaxCategoryId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.PriceReference">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions">
            <summary>
            Gets the association for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssociating"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions.GetAssociations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating)">
            <summary>
            Gets the associations
            </summary>
            <param name="associating">The associating implementation.</param>
            <returns>Collection of asociations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository"/>, which will be send to the method which contains the associations getter.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions.GetAssociations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating,EPiServer.Commerce.Catalog.Linking.IAssociationRepository)">
            <summary>
            Gets the associations
            </summary>
            <param name="associating">The associating implementation.</param>
            <param name="associationRepository">The association repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent)">
            <summary>
            Gets the entries included in a bundle.
            </summary>
            <param name="bundle">The bundle.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundle entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the entries included in a bundle.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundle entries.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions">
            <summary>
            Gets the relations for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions.GetNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.ICategorizable)">
            <summary>
            Gets the node relations
            </summary>
            <param name="categorizable">The relating implementation</param>
            <returns>Collection of relations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository"/>, which will be send to the method that contains the relations getter</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions.GetNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.ICategorizable,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the node relations
            </summary>
            <param name="categorizable">The relating implementation</param>
            <param name="relationRepository">The relation repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInCurrentMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Determines whether the specific content is available in the current market
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInCurrentMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Determines whether the specific content is available in the current market
            </summary>
            <param name="content">The content.</param>
            <param name="currentMarketService">The current market service.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.MarketId)">
            <summary>
            Determines whether the specific content is available in market
            </summary>
            <param name="content">The content.</param>
            <param name="currentMarketId">The current market id.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the categories to which the entry is linked.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the categories to which the entry is linked.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundles containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundles containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="entryContent">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the packages containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the packages containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the parent products of an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent products.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent products of an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent products.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the parent entries (products, bundles and packages) containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent entries (products, bundles and packages) containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String,System.String)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <param name="typeId">Association type id (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by type (include associations of any type).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String,System.String,EPiServer.Commerce.Catalog.Linking.IAssociationRepository)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <param name="typeId">Association type id (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by type (include associations of any type).</param>
            <param name="associationRepository">The association repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Gets the categories to which the category is linked (parent categories).
            N.B. This does not include the main parent category (given by the ParentLink of the content).
            </summary>
            <param name="node">The node.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the categories to which the category is linked (parent categories).
            N.B. This does not include the main parent category (given by the ParentLink of the content).
            </summary>
            <param name="node">The node.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the parent categories.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent)">
            <summary>
            Gets the entries included in a package.
            </summary>
            <param name="package">The package.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundle entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the entries included in a package.
            </summary>
            <param name="package">The package.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the bundle entries.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions">
            <summary>
            Gets prices for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="pricingLoader">The pricing loader to use to receive the price.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,System.DateTime)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="validOn">The date and time, in UTC, that the price is valid on.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <param name="pricingLoader">The pricing loader to use to receive the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,System.DateTime,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="validOn">The date and time, in UTC, that the price is valid on.</param>
            <param name="pricingLoader">The pricing loader to use to receive the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="pricingLoader">The pricing loader to use to receive the prices.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price. Use Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean},EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price. Use Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <param name="pricingLoader">The pricing loader to use to receive the prices.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the prices for all markets for all customers.
            </summary>
            <param name="pricing">The pricing implementation</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>, which will be send to the method that contains an pricing loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricing">The customer pricing type to fetch prices for.</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>, which will be send to the method that contains an pricing loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <returns>Collection of prices.</returns>
            <remarks>This method will not filter on <see cref="T:Mediachase.Commerce.MarketId"/> or <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/>.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricing">The customer pricing type to fetch prices for.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader,Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricings">List of the customer pricing types to fetch prices for.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions.GetVariants(EPiServer.Commerce.Catalog.ContentTypes.ProductContent)">
            <summary>
            Gets the variants of a product.
            </summary>
            <param name="product">The product.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the product variants.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions.GetVariants(EPiServer.Commerce.Catalog.ContentTypes.ProductContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the variants of a product.
            </summary>
            <param name="product">The product.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" />s of the product variants.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions">
            <summary>
            Gets inventories for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions.GetStockPlacement(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement)">
            <summary>
            Gets the inventories
            </summary>
            <param name="stockPlacement">The inventory implementation</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.InventoryLoader"/>, which will be send to the method that contains an inventory loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions.GetStockPlacement(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,EPiServer.Commerce.Catalog.InventoryLoader)">
            <summary>
            Gets the inventories
            </summary>
            <param name="stockPlacement">The inventory implementation</param>
            <param name="inventoryLoader">The inventory loader.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions">
            <summary>
            Gets the variant relations for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions.GetVariantRelations(EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer)">
            <summary>
            Gets the variant relations
            </summary>
            <param name="variantContainer">The relating implementation</param>
            <returns>Collection of relations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository"/>, which will be send to the method that contains the relations getter</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions.GetVariantRelations(EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the variant relations
            </summary>
            <param name="variantContainer">The relating implementation.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CustomerGroupLoader">
            <summary>
            Loads inventories for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.#ctor(Mediachase.BusinessFoundation.Data.DataContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.CustomerGroupLoader"/>.
            </summary>
            <param name="dataContext">The meta data entry point.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.Get">
            <summary>
            Gets all customer group.
            </summary>
            <returns>Collection of customer group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.Get(System.String)">
            <summary>
            Gets a customer group by a specified <paramref name="name"/>
            </summary>
            <param name="name">Customer group name.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Represents Database access class to manipulate Catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassToContentTypeMap">The metaclass to content type mapping.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Represents Database access class to maipulate Catalog content version.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.DefaultMaxVersions">
            <summary>
            If the UIMaxVersions setting is less than or equal zero, we use the DefaultMaxVersions to trim versions.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Web.IPermanentLinkMapper,EPiServer.Web.IUrlSegmentGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
            <param name="urlSegmentGenerator">The segment generator.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.UIMaxVersionsOrDefault">
            <summary>
            Gets the UIMaxVersions setting, or DefaultMaxVersions if it is less than or equal zero.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.List(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Lists all versions for the supplied <see cref="T:EPiServer.Core.ContentReference"/>s.
            </summary>
            <param name="contentLinks">The content links to list versions for.</param>
            <returns><see cref="T:EPiServer.DataAbstraction.ContentVersion"/> instances for the matching versions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.List(System.Collections.Generic.HashSet{System.Int32},Mediachase.Commerce.Catalog.CatalogContentType)">
            <summary>
            Lists all versions for the supplied object ids of a given <see cref="T:Mediachase.Commerce.Catalog.CatalogContentType"/>.
            </summary>
            <param name="objectIds">The object ids to list versions for.</param>
            <param name="objectType">The catalog content type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.List(EPiServer.Core.ContentReference)">
            <summary>
            Lists the versions of a specific content.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>The matching versions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.List(EPiServer.Core.VersionFilter,System.Int32,System.Int32)">
            <summary>
            Lists the versions matching the specified filter, in the specified range.
            </summary>
            <param name="filter">The filter.</param>
            <param name="startIndex">The start index.</param>
            <param name="maxRows">The maximum rows.</param>
            <returns>The matching versions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.SetCommonDraft(EPiServer.Core.ContentReference)">
            <summary>
            Sets the specified version as common draft.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.ListObsoleteVersions(System.Int32,System.Int32@)">
            <summary>
            Lists the obsolete versions.
            </summary>
            <param name="maxResultCount">The maximum obsolete versions to retrieve.</param>
            <param name="totalCount">The total number of obsolete versions returned.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.IsNonPublishedContent(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Checks whether a content version is a common draft of a non-published content in a language.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageName">The language name.</param>
            <returns><c>True</c> if the content version is a common draft of a non-published content; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.CreateDraft(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.String,System.Boolean)">
            <summary>
            Creates the draft.
            </summary>
            <param name="content">The content.</param>
            <param name="languageName">The language.</param>
            <param name="currentUser">The current user.</param>
            <param name="skipSetCommonDraft">Flag to indicate whether should skip set common draft for new created draft</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.CreateDrafts(System.Collections.Generic.IList{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <summary>
            Create several content versions.
            </summary>
            <param name="contents">The content list to insert.</param>
            <param name="commonDraftWorkIds">The list of work id of common drafts.</param>
            <returns>The DataTable as a list of inserted Work Id.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.DeleteAllVersions(EPiServer.Core.ContentReference)">
            <summary>
            Delete all catalog content versions.
            </summary>
            <param name="contentLink">The catalog content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.DeleteVersion(EPiServer.Core.ContentReference)">
            <summary>
            Delete a specific version of a catalog content
            </summary>
            <param name="contentLink">The catalog content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.ListMatchingSegments(System.Int32,System.Int32,System.String)">
            <summary>
            Lists all children drafts matching the url segment.
            </summary>
            <param name="parentNodeId">Id of the parent node to search under, or 0 for searching on the catalog level.</param>
            <param name="catalogId">The catalogId, or 0 to not filter by catalog.</param>
            <param name="urlSegment">The Url Segment</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.LoadDraft(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Loads draft content for the list of content links.
            </summary>
            <param name="contentLinks">The list of content link to load draft.</param>
            <param name="sProc">The store procedure to execute depending on the content type.</param>
            <returns>Set of draft content, including its properties, assets, SEO, ...</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.SaveDraft(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String)">
            <summary>
            Saves the draft.
            </summary>
            <param name="content">The content.</param>
            <param name="currentUser">The current user.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB.UpdateMasterLanguage(EPiServer.Core.ContentReference)">
            <summary>
            Updates master language for all versions found as descendant of the content which has the given content link.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Represents Database access class to manipulate Catalog content access list.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB.#ctor(Mediachase.Data.Provider.IConnectionStringHandler,EPiServer.IContentCacheRemover,EPiServer.Core.IContentCacheListingRemover,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Security.IPrincipalAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB"/> class.
            </summary>
            <param name="connectionStringHandler">The connection string handler.</param>
            <param name="contentCacheRemover">The content cache remover.</param>
            <param name="contentCacheListingRemover">The content cache listing remover.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="principalAccessor">The principal accessors.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB.List(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets the access descriptors for catalog contents.
            </summary>
            <param name="contentLinks">The content link collection.</param>
            <returns>The content security descriptor collection.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB.Save(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
            <summary>
            Saves the specified content security descriptor.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="contentSecurityDescriptor">The content security descriptor.</param>
            <param name="securitySaveType">Type of the security save.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB.DeleteByUserOrRole(System.String,EPiServer.Security.SecurityEntityType)">
            <summary>
            Deletes all ACLs on catalog content and sub contents on a specific membership user or role.
            </summary>
            <param name="userOrRoleName">Name of the user or role.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAccess.Internal.VersionCollection">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute">
            <summary>
            Extends the default content type registration with the possibility to associate the content type with a metadata class.
            </summary>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeAttributeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute.MetaClassName">
            <summary>
            Gets or sets the name of the meta class the content type should be associated with.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute">
            <summary>
                Use this attribute to declare a property to have precision and scale.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.Precision">
            <summary>
            Gets the precision.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.Scale">
            <summary>
            Gets the scale.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute">
            <summary>
                Use this attribute to declare a property to have "Use Encryption" enabled.
                This will encrypt the value when stored in MetaData plus.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute"/> class.
            </summary>
            <param name="isEncrypted">Specifies if the property is encrypted.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.IsEncrypted">
            <summary>
            Gets a value indicating whether the property is encrypted.
            </summary>
            <value>
              <c>true</c> if tokenized, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute">
            <summary>
            Serves as the class for compare value field validation attributes.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.TargetProperty">
            <summary>
            The property to validate against.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.LocalizationService">
            <summary>
            The localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"> The value of the object to validate.</param>
            <param name="context"> The validation context.</param>
            <returns> return ValidationResult.Success if valid, otherwise return ValidationResult with ErrorMessage.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute">
            <summary>
                Use this attribute to declare a property to include the value in default search results.
                This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute"/> class.
            </summary>
            <param name="includedInDefaultSearch">Specifies if the property should be included in the default search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.IncludedInDefaultSearch">
            <summary>
            Gets a value indicating whether property is included in default search
            </summary>
            <value>
              <c>true</c> if included in default search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute">
            <summary>
                Use this attribute to declare a property to be included in the search results.
                This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute"/> class.
            </summary>
            <param name="includedInSearch">Specifies if the property should be included in search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.IncludedInSearch">
            <summary>
            Gets a value indicating whether property is included in search
            </summary>
            <value>
              <c>true</c> if included in search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.PositiveNumberAttribute">
            <summary>
            Serves as the class for non negative number validation attributes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.PositiveNumberAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute">
            <summary>
            Use this attribute to declare a property to be flaged as index sortable.
            This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
            <param name="isSortableInSearch">Specifies if the property is sortable in search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.IsSortableInSearch">
            <summary>
            Gets a value indicating whether property is sortable in search.
            </summary>
            <value>
              <c>true</c> if sortable in search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.SystemUiHint">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Contains UI hints with system usage. <see cref="T:EPiServer.Commerce.UIHint"/> contains UI hints for
            public use.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.TabNames">
            <summary>
                This class contains constants with the names of the built in tabs used in the catalog editing view.
                They can be used when setting a group name on a property, to control what tab it should added to.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Pricing">
            <summary>
                The pricing tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Media">
            <summary>
                The media tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Inventory">
            <summary>
                The inventory tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Assets">
            <summary>
                The assets tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.BundleEntries">
            <summary>
                The Bundle Entries tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.PackageEntries">
            <summary>
                The Package Entries tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Links">
            <summary>
                The links tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Variants">
            <summary>
            The variances tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.RelatedEntries">
            <summary>
            The related entries tab
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.SchedulingAndStatus">
            <summary>
            The scheduling group
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.MarketAndRevenue">
            <summary>
            The market and revenue group
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Tracking">
            <summary>
            The tracking group
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Coupons">
            <summary>
            The coupon group.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Personalization">
            <summary>
            The personalization group.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.RedemptionLimits">
            <summary>
            The redemption limits group.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute">
            <summary>
                Use this attribute to declare a property to be tokenized.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute"/> class.
            </summary>
            <param name="isTokenized">Specifies if the property is tokenized.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.IsTokenized">
            <summary>
            Gets a value indicating whether the property is tokenized.
            </summary>
            <value>
              <c>true</c> if tokenized, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.Tokenized">
            <summary>
            Gets the tokenized.
            </summary>
            <value>
            The tokenized.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute">
            <summary>
                Use this attribute to declare a property to be used for comparison.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
            <param name="usedInComparison">Specifies if the property is used in comparison.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.UsedInComparison">
            <summary>
            Gets a value indicating whether the property is used in comparison.
            </summary>
            <value>
              <c>true</c> if used in comparison, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute">
            <summary>
            Use this attribute to validate url property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute"/> using the default registered <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>
            and <see cref="T:EPiServer.Web.UrlSegmentOptions"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.UrlSegmentOptions)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute"/>.
            </summary>
            <param name="localizationService">Service for translating the validation error message.</param>
            <param name="urlSegmentOptions">The url segment options.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.ValidUrlAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.EntryLoaderBase">
            <summary>
            Base class for loading specialized properties from an entry.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.IContentLoader)">
            <summary>
            Base constructor.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetCatalogContentType(EPiServer.Core.ContentReference)">
            <summary>
            Gets the type of the catalog content.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetCatalogKey(EPiServer.Core.ContentReference)">
            <summary>
            Gets the catalog key for a <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content link to receive the key for.</param>
            <returns>The catalog key for a <paramref name="contentLink"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetContentLink(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            Gets the content link from a <paramref name="catalogKey"/> by loading the entry.
            </summary>
            <param name="catalogKey">The catalog key.</param>        
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetEntryContent(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            Gets the entry content base.
            </summary>
            <param name="catalogKey">The catalog key.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetEntryContent(EPiServer.Core.ContentReference)">
            <summary>
            Gets the entry content base.
            </summary>
            <param name="contentLink">The entry content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetProductVariants(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the product variants.
            </summary>
            <param name="productContent">Product contents.</param>
            <returns>An enumerable ContentReference list of variants belong to that product.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetAllVariants(EPiServer.Core.ContentReference)">
            <summary>
            Gets all variants from a content link.
            If content link is a CatalogNode, then return variants and variants of products which are direct children of it
            If content link is a Product, then return variants of it
            If content link is a variant/package, then return content of it
            </summary>
            <param name="contentLink">The content link.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.IEntryInformation">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            Information about entries in the catalog
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.IEntryInformation.GetCustomProperties(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Get the names and values of any custom properties used to differentiate this item.
            For a variant, examples could be size or color.
            </summary>
            <param name="entry">The entry to get custom properties for.</param>
            <returns>A dictionary of custom the properties, and their values. The values should in a format suitable for presentation to a user.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.IEntryInformation.GetProductUrl(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Get the product URL which associates with this item.
            </summary>
            <param name="entry">The entry to get product URL for.</param>
            <returns>The URL of the product associates with this item.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extends the default language settings handler with logic for catalog content.
            A language is enabled if it belongs to the catalog content ExistingLanguages.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.#ctor(EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.IContentLoader},Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler"/> class.
            </summary>
            <param name="defaultImplementation">The default implementation.</param>
            <param name="contentLoaderAccessor">The content loader assessor.</param>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.GetDefaultAllowedLanguage(EPiServer.Core.ContentReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.GetFallbackLanguages(EPiServer.Core.ContentReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.IsLanguageAllowed(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Check if a language is enabled for a specific content.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageBranch">The language branch.</param>
            <returns>If the content is a catalog content, <c>true</c> if the language branch is one of <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ExistingLanguages"/>, otherwise, <c>false</c>
            If it is not, fallback to use the default implementation.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.IsLanguageAllowedForCreation(EPiServer.Core.ContentReference,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.IsSettingsDefined(EPiServer.Core.ContentReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogContentLanguageSettingsHandler.MatchLanguageSettings(EPiServer.Core.IContent,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Internal.CatalogLanguageSettingsResolver">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extends the default language settings resolver with logic for catalog content.
            The logic is as follows:
            - No replacement languages
            - No fallback languages
            - All languages that are enabled for a catalog are active, the others are not.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Internal.CatalogLanguageSettingsResolver.Resolve(EPiServer.Core.ContentReference)">
            <summary>
                Gets the settings for all languages for the specified content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>An IEnumerable{ContentLanguageSetting} with the language settings for the given content.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.InventoryLoader">
            <summary>
            Loads inventories for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.#ctor(Mediachase.Commerce.InventoryService.IInventoryService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.IContentLoader)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.InventoryLoader" />.
            </summary>
            <param name="inventoryService">The inventory service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.GetStockPlacement(EPiServer.Core.ContentReference)">
            <summary>
            Gets the inventories for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get inventories for.</param>
            <returns>Collection of inventories for the content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.GetStockPlacement(EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            Gets the inventories for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get inventories for.</param>
            <param name="includeEmptyWarehouses">Determines if inventories should be included even when warehouse is out of stock.</param>
            <returns>Collection of inventories for the content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.GetStockPlacement(EPiServer.Core.ContentReference,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the inventories for the specific entry or node <paramref name="contentLink"/>, with paging.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="startIndex">The start index.</param>
            <param name="numberOfRecord">The number of record.</param>
            <param name="total">The total.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.Association">
            <summary>
            Describes an association of a catalog entry eg an accessory, up-sell or cross-sell product etc.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Group">
            <summary>
            Gets or sets the association group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.SortOrder">
            <summary>
            The sort order of the association
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Source">
            <summary>
            Gets or sets the source of the association (the item that has the association,
            e.g. a catalog entry for which we want to recommend accessories).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Target">
            <summary>
            Gets or sets the target of the association (the item we're associating to,
            e.g. an accessory to the Source product).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Type">
            <summary>
            Gets or sets the type of the association.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.IsReadOnly">
            <summary>
            Indicates whether the current object instance is read-only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Association.MakeReadOnly">
            <summary>
            Changes the object instance into a read-only object.
            </summary>
            <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I.e. the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Association.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Association.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Association.ThrowIfReadOnly">
            <summary>
            Calls <see cref="M:EPiServer.Data.Validator.ValidateNotReadOnly(EPiServer.Data.Entity.IReadOnly)"/> which throws
            an exception if the item is in read-only mode. Subtypes should call this before
            accepting any modification to the object.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationCommitter">
            <summary>
            Handles update and delete operations for <see cref="T:EPiServer.Commerce.Catalog.Linking.Association"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationCommitter.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.AssociationCommitter"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationCommitter.Remove(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Removes the specified associations, if they exist.
            </summary>
            <param name="associations">The associations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationCommitter.Update(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Updates the matching existing associations, or creates new associations where there is no match.
            </summary>
            <param name="associations">The associations to update or create.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationGroup">
            <summary>
            Describes a group of associations of a catalog entry.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.AssociationGroup.DefaultName">
            <summary>
            The default group name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.Name">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.SortOrder">
            <summary>
            Gets or sets the sort order of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.IsReadOnly">
            <summary>
            Indicates whether the current object instance is read-only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationGroup.MakeReadOnly">
            <summary>
            Changes the object instance into a read-only object.
            </summary>
            <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I.e. the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationGroup.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationGroup.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationGroup.ThrowIfReadOnly">
            <summary>
            Calls <see cref="M:EPiServer.Data.Validator.ValidateNotReadOnly(EPiServer.Data.Entity.IReadOnly)"/> which throws
            an exception if the item is in read-only mode. Subtypes should call this before
            accepting any modification to the object.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationLoader">
            <summary>
            Loads <see cref="T:EPiServer.Commerce.Catalog.Linking.Association"/> objects using data from <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationLoader.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Linking.AssociationModelFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.AssociationLoader"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="modelFactory">The model factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationLoader.GetAssociations(EPiServer.Core.ContentReference)">
            <summary>
            Gets the associations.
            </summary>
            <param name="entryLink">The entry link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.Association"/> instances describing the existing associations.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationModelFactory">
            <summary>
            Creates <see cref="T:EPiServer.Commerce.Catalog.Linking.Association"/> instances from DTO rows.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationModelFactory.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.AssociationModelFactory"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationModelFactory.CreateModel(Mediachase.Commerce.Catalog.Dto.CatalogAssociationDto.CatalogAssociationRow,Mediachase.Commerce.Catalog.Dto.CatalogAssociationDto.CatalogEntryAssociationRow,Mediachase.Commerce.Catalog.Dto.CatalogAssociationDto.AssociationTypeRow)">
            <summary>
            Creates the model based on the input data rows.
            </summary>
            <param name="groupRow">The group (CatalogAssociation) row.</param>
            <param name="associationRow">The association (CatalogEntryAssociation) row.</param>
            <param name="typeRow">The type (AssociationType) row.</param>
            <returns>
            The model representation of <paramref name="associationRow" /> with data from
            <paramref name="groupRow" /> and <paramref name="typeRow"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationType">
            <summary>
            Describes a type of association.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.AssociationType.DefaultTypeId">
            <summary>
            The default association type id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationType.Id">
            <summary>
            Gets or sets the id of the association type.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationType.Description">
            <summary>
            Gets or sets the description of the association type.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationType.IsReadOnly">
            <summary>
            Indicates whether the current object instance is read-only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationType.MakeReadOnly">
            <summary>
            Changes the object instance into a read-only object.
            </summary>
            <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I.e. the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationType.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationType.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationType.ThrowIfReadOnly">
            <summary>
            Calls <see cref="M:EPiServer.Data.Validator.ValidateNotReadOnly(EPiServer.Data.Entity.IReadOnly)"/> which throws
            an exception if the item is in read-only mode. Subtypes should call this before
            accepting any modification to the object.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.BundleEntry">
            <summary>
            Links an entry (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>)
            to a bundle (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.BundleEntry.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Linking.AssociationLoader,EPiServer.Commerce.Catalog.Linking.AssociationCommitter,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="associationLoader">The association loader service.</param>
            <param name="associationCommitter">The association committer service.</param>
            <param name="cache">The synchronized object cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository.GetAssociations(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultAssociationRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Linking.EntryRelationLoader,EPiServer.Commerce.Catalog.Linking.NodeRelationLoader,EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter,EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter,EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="entryRelationLoader">The entry relation loader.</param>
            <param name="nodeRelationLoader">The node relation loader.</param>
            <param name="entryRelationCommitter">The entry relation committer.</param>
            <param name="nodeRelationCommitter">The node relation committer.</param>
            <param name="catalogContentMoveHandler">The catalog content move handler.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.GetChildren``1(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.GetParents``1(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.SetNodeParent(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.DefaultRelationRepository.IsTypeOrSubTypeRequested``2">
            <summary>
            Determines whether instances of <typeparamref name="TAvailable"/> should be included
            when the type <typeparamref name="TRequested" /> is requested.
            </summary>
            <typeparam name="TRequested">The type of objects requested.</typeparam>
            <typeparam name="TAvailable">The type of objects available.</typeparam>
            <returns>
            <c>true</c> if either <typeparamref name="TAvailable"/> is a subtype of
            <typeparamref name="TRequested"/> (all objects are of interest) or if
            <typeparamref name="TAvailable"/> is a supertype of
            <typeparamref name="TRequested"/> (some objects may be of a subclass that is of interest)
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.EntryRelation">
            <summary>
            Abstract base for describing the relations from a catalog entry to another.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultGroupName">
            <summary>
            The default group name.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultQuantity">
            <summary>
            The default quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.GroupName">
            <summary>
            Gets or sets a key to group relations by. Can be <see cref="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultGroupName"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.Quantity">
            <summary>
            Gets or sets the quantity of <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/> to include, typically <see cref="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultQuantity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.SourceAccessor">
            <summary>
            Accesses <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.TargetAccessor">
            <summary>
            Accesses <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.AllowedParentTypes">
            <summary>
            Returns <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogEntry"/> as the valid type for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent" />.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.AllowedChildTypes">
            <summary>
            Returns <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogEntry"/> as the valid type for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child" />.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter">
            <summary>
            Handles update and delete operations for <see cref="T:EPiServer.Commerce.Catalog.Linking.EntryRelation"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter.Remove(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.EntryRelation})">
            <summary>
            Removes the specified relations, if they exist.
            </summary>
            <param name="relations">The relations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationCommitter.Update(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.EntryRelation})">
            <summary>
            Updates the matching existing relations, or creates new relations where there is no match.
            </summary>
            <param name="relations">The relations to update or create.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader">
            <summary>
            Loads <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/> objects using data from <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Linking.RelationModelFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="modelFactory">The model factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader.GetChildEntries(EPiServer.Core.ContentReference)">
            <summary>
            Gets all relations where the specified entry is the parent.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.EntryRelation"/> instances describing the existing relations.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader.GetParentEntries(EPiServer.Core.ContentReference)">
            <summary>
            Gets all relations where the specified entry is the child.
            </summary>
            <param name="childLink">The child link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.EntryRelation"/> instances describing the existing relations.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.EntryRelationLoader.GetParentNodes(EPiServer.Core.ContentReference)">
            <summary>
            Gets the parent node relations of the specified entry.
            </summary>
            <param name="childLink">The child link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> instances describing the existing relations.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationGroupDefinition">
            <summary>
            Represents a definitions of a <see cref="T:EPiServer.Commerce.Catalog.Linking.AssociationGroup"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.RelationGroupDefinition">
            <summary>
            Represents a definitions of groups for a <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1">
            <summary>
            A repository to store <see cref="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1"/> class.
            </summary>
            <param name="storeFactory">The store factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Add(`0)">
            <summary>
            Adds the specified relation group definition to the repository if it doesnt already exists.
            </summary>
            <param name="typeToAdd">The relation group definition to add.</param>
            <exception cref="T:System.ArgumentException">The RelationGroupDefinition to be added must have a Name;typeToAdd</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.List">
            <summary>
            Lists all available bundle entry group definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Delete(System.String)">
            <summary>
            Deletes the specified bundle entry group definition if it exists in the repository.
            </summary>
            <param name="name">The name of the bundle entry group definition to delete.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Store">
            <summary>
            Gets the backing DDS store.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository">
            <summary>
            Describes a service for handling associations of catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.GetAssociations(EPiServer.Core.ContentReference)">
            <summary>
            Gets the associations for the catalog content specified by the content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Removes the associations.
            </summary>
            <param name="associations">The associations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Updates matching associations and adds new associations for an entry.
            </summary>
            <param name="associations">The associations.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository">
            <summary>
            Handles CRUD operations for catalog structure objects (relations), including linking entries
            to additional categories, categories to other categories (using <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/>),
            variations to products (using <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/>) and setting up the items included
            in bundles and packages (using <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> and <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetChildren``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the children linked to a specific content.
            </summary>
            <typeparam name="T">The type of relation to filter by.</typeparam>
            <param name="parentLink">
            <see cref="T:EPiServer.Core.ContentReference"/> representing the content to get child relations for.
            </param>
            <returns>
            The linked content represented as instances of <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>, or matching ones
            if a more specific type is specified by <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetParents``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the parents which a specific content is linked to.
            </summary>
            <typeparam name="T">The type of relation to filter by.</typeparam>
            <param name="childLink">
            <see cref="T:EPiServer.Core.ContentReference"/> representing the content to get parent relations for.
            </param>
            <returns>
            The linked content represented as instances of <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>, or matching ones
            if a more specific type is specified by <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <summary>
            Removes the specified relations.
            </summary>
            <param name="relations">The relations to remove.</param>
            <remarks>
            Any relations contained in <paramref name="relations"/> that don't match an existing relation will be ignored.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <summary>
            Updates matching relations and creates new relations when there is no existing relation to match.
            </summary>
            <param name="relations">The relations to update or create.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.SetNodeParent(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Changes the parent of a catalog node to a different catalog node or a catalog.
            </summary>
            <param name="contentLink">The link to the node to change the parent of.</param>
            <param name="newParentLink">The link to the new parent.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.NodeEntryRelation">
            <summary>
            Links an entry (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>)
            to a category (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeEntryRelation.IsPrimary">
            <summary>
            Gets or sets if this node entry relation is primary or not.
            </summary>
            <remarks>
            Only one, or none NodeEntryRelation of an entry can be set as primary. If a new NodeEntryRelation is set as primary, it will take over the current primary one (if any).
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeEntryRelation.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeEntryRelation.CreateWritableCloneImplementation">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.NodeRelation">
            <summary>
            Links an entry or subcategory (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>)
            to a category (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.TargetCatalog">
            <summary>
            The catalog the relation belongs to, typically the same as <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>
            belongs to.
            </summary>
            <value>
            The <see cref="T:EPiServer.Core.ContentReference"/> of the catalog (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>).
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.SourceAccessor">
            <summary>
            Accesses <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.TargetAccessor">
            <summary>
            Accesses <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.AllowedChildTypes">
            <summary>
            Returns <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogEntry"/>  and <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogNode"/>
            as the valid types for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child" />.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.AllowedParentTypes">
            <summary>
            Returns <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogNode"/> as the valid type for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelation.Validate(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Extends base implementation by validating that <see cref="N:EPiServer.Commerce.Catalog"/> is of type catalog.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelation.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelation.CreateWritableCloneImplementation">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter">
            <summary>
            Handles update and delete operations for <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter.Remove(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.NodeRelation})">
            <summary>
            Removes the specified relations, if they exist.
            </summary>
            <param name="relations">The relations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationCommitter.Update(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.NodeRelation})">
            <summary>
            Updates the matching existing relations, or creates new relations where there is no match.
            </summary>
            <param name="relations">The relations to update or create.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.NodeRelationLoader">
            <summary>
            Loads <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/> objects using data from <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationLoader.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Linking.RelationModelFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelationLoader"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="modelFactory">The model factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationLoader.GetChildRelations(EPiServer.Core.ContentReference)">
            <summary>
            Gets all relations where the specified node is the parent.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> instances describing the existing relations.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.NodeRelationLoader.GetParentNodes(EPiServer.Core.ContentReference)">
            <summary>
            Gets all relations where the specified node is the child.
            </summary>
            <param name="childLink">The child link.</param>
            <returns><see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> instances describing the existing relations.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.PackageEntry">
            <summary>
            Links an entry (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>)
            to a package (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.PackageEntry.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.ProductVariation">
            <summary>
            Links a variation (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>)
            to a product (defined by <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.ProductVariation.CreateWritableClone">
            <summary>
            Creates the writable clone.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.Relation">
            <summary>
            Abstract base class for relations describing catalog structure.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent">
            <summary>
            The parent catalog content in the parent-child relation.
            </summary>
            <value>
            The <see cref="T:EPiServer.Core.ContentReference"/> of the catalog content (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>) that is the parent in the relation.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.Child">
            <summary>
            The child catalog content in the parent-child relation.
            </summary>
            <value>
            The <see cref="T:EPiServer.Core.ContentReference"/> of the catalog content (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>) that is the child in the relation.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
            <value>
            The sort order used when sorting all child objects of the same type with the same parent.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.Validate(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Ensures that the instance has references of valid types set for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>
            and <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.AllowedParentTypes">
            <summary>
            Gets the types allowed for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Parent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.AllowedChildTypes">
            <summary>
            Gets the types allowed for <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Child"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.ValidateType(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Core.ContentReference,System.String,Mediachase.Commerce.Catalog.CatalogContentType[])">
            <summary>
            Validates that a content reference points to a catalog content of one of
            the specified types.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLink">The content link.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="allowedTypes">The allowed types.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the reference is not of any of the allowed types.</exception>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.IsReadOnly">
            <summary>
            Indicates whether the current object instance is read-only.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.SourceAccessor">
            <summary>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.TargetAccessor">
            <summary>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.MakeReadOnly">
            <summary>
            Changes the object instance into a read-only object.
            </summary>
            <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I.e. the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.CreateWritableClone``1">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <typeparam name="T">The type to clone to.</typeparam>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable copy of the current object.
            </summary>
            <returns>
            A writable copy of the current object.
            </returns>
            <remarks>
            The cloning is a deep-copy.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.CreateWritableCloneImplementation">
            <summary>
            Implements the deep clone. Override to add any operations not handled by
            the base implementation (which includes a shallow copy by MemberwiseClone).
            </summary>
            <returns>A cloned instance in read-write mode.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.Relation.ThrowIfReadOnly">
            <summary>
            Calls <see cref="M:EPiServer.Data.Validator.ValidateNotReadOnly(EPiServer.Data.Entity.IReadOnly)"/> which throws
            an exception if the item is in read-only mode. Subtypes should call this before
            accepting any modification to the object.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.RelationModelFactory">
            <summary>
            Creates <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/> instances from DTO rows.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationModelFactory.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.RelationModelFactory"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationModelFactory.CreateModel(Mediachase.Commerce.Catalog.Dto.CatalogRelationDto.NodeEntryRelationRow)">
            <summary>
            Creates the model based on the input data row.
            </summary>
            <param name="dataRow">The data row.</param>
            <returns>The model representation of <paramref name="dataRow"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationModelFactory.CreateModel(Mediachase.Commerce.Catalog.Dto.CatalogRelationDto.CatalogNodeRelationRow)">
            <summary>
            Creates the model based on the input data row.
            </summary>
            <param name="dataRow">The data row.</param>
            <returns>The model representation of <paramref name="dataRow"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationModelFactory.CreateModel(Mediachase.Commerce.Catalog.Dto.CatalogRelationDto.CatalogEntryRelationRow)">
            <summary>
            Creates the model based on the input data row.
            </summary>
            <param name="dataRow">The data row.</param>
            <returns>
            The model representation of <paramref name="dataRow"/>, or null for unknown values in
            <see cref="P:Mediachase.Commerce.Catalog.Dto.CatalogRelationDto.CatalogEntryRelationRow.RelationTypeId"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions.RemoveAssociation(EPiServer.Commerce.Catalog.Linking.IAssociationRepository,EPiServer.Commerce.Catalog.Linking.Association)">
            <summary>
            Removes the association. This is equivalent to calling
            <see cref="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})"/> with one item.
            </summary>
            <param name="associationRepository">The association repository.</param>
            <param name="association">The association to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions.UpdateAssociation(EPiServer.Commerce.Catalog.Linking.IAssociationRepository,EPiServer.Commerce.Catalog.Linking.Association)">
            <summary>
            Adds or updates the associations for the catalog content specified by the associations
            Source.  This is equivalent to calling <see cref="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})"/> with one
            item.
            </summary>
            <param name="associationRepository">The association repository.</param>
            <param name="association">The association.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions.RemoveRelation(EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Commerce.Catalog.Linking.Relation)">
            <summary>
            Removes the relation. This is equivalent to calling
            <see cref="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})" /> with one item.
            </summary>
            <param name="relationRepository">The relation repository.</param>
            <param name="relation">The relation to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions.UpdateRelation(EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Commerce.Catalog.Linking.Relation)">
            <summary>
            Adds or updates the relation for the catalog content specified by the relations
            Source. This is equivalent to calling <see cref="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})"/> with one
            item.
            </summary>
            <param name="relationRepository">The relation repository.</param>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.#ctor(Mediachase.Commerce.Pricing.IPriceDetailService,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.PricingCommitter"/>.
            </summary>
            <param name="priceDetailService">IPriceDetailService instance.</param>
            <param name="marketService">IMarketService instance.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.SavePrice(EPiServer.Commerce.SpecializedProperties.PriceDetail)">
            <summary>
            Saves the price.
            </summary>
            <param name="priceDetail">The price value to save.</param>
            <returns>The saved price</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.DeletePrice(System.Int64)">
            <summary>
            Deletes the price.
            </summary>
            <param name="priceValueId">The price value id to delete.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.PricingLoader">
            <summary>
            Loads prices for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceDetailService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrice(System.Int64)">
            <summary>
            Gets the the price specified by the ID.
            </summary>
            <param name="priceId">The price ID.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices for the specified <paramref name="contentLink" />.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the prices.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <param name="startIndex">The start index.</param>
            <param name="numberOfRecord">The number of record.</param>
            <param name="total">The total.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits changes to catalog content and content version to the ECF database.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter},Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,EPiServer.Core.IStatusTransitionEvaluator,EPiServer.Commerce.Catalog.Provider.Internal.IDraftVersionPostProcessor)">
            <summary>
            Initilizes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler" /> class.
            </summary>
            <param name="committers">The committers.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="catalogContentVersionStore">The catalog content version store.</param>
            <param name="catalogContentVersionDB">The catalog content version database.</param>
            <param name="statusTransitionEvaluator">The status transition evaluator.</param>
            <param name="draftVersionPostProcessor">The draft version post processor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction,System.String)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Use the <see cref="T:EPiServer.IContentRepository"/> to work with content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the specified content
            </summary>
            <param name="contentLink">The content link to delete</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.UpdateStatus(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction)">
            <summary>
            Updates the status taking into account the current status,
            the save action and delayed publish.
            </summary>
            <param name="content">The content.</param>
            <param name="saveAction">The save action.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.GetCommitter(Mediachase.Commerce.Catalog.CatalogContentType)">
            <summary>
            Gets catalog content committer which can handle specific content type.
            </summary>
            <param name="contentType">The catalog content type to get committer.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Use <see cref="T:EPiServer.IContentRepository"/> instead.
            
            Fetches commerce catalog data as content instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder},Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Core.IContentCacheKeyCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader" /> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="contentBuilders">The content builders.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassMap">The meta class map.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="contentCacheKeyCreator">Handles generation of cache keys.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetItems``1(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Gets the specified content, regardless content version.
            </summary>
            <typeparam name="T"><see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> or a subclass of it.</typeparam>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns>A list of instances of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/></returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <summary>
            Loads all language instance of a specific content.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.LoadSpecificContentInstances(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Loads the specific content instances.
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The language branch.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.LoadSpecificContentVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <summary>
            Batch loads specific versions of content.
            </summary>
            <remarks>
            <see cref="P:EPiServer.Core.ContentReference.WorkID"/> must be set on all versions otherwise <see cref="T:System.ArgumentException"/> is thrown.
            This method has no cache implemented. Use the methods in <see cref="T:EPiServer.IContentRepository"/> to load content with cache enabled..
            </remarks>
            <param name="contentVersions">The versions to load.</param>
            <returns>List of content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCacheMasterKeys(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the cache master keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            that this content should depend on.
            </summary>
            <param name="content">The content.</param>
            <returns>The master cache keys.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCacheMasterKeys(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            Gets the cache master keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys" />
            that this content should depend on.
            </summary>
            <param name="content">The content.</param>
            <param name="includeContentRepositoryKeys">
            If set to <c>true</c> include a dependency to the content's keys used by the
            content repository (cleared when content is saved).</param>
            <returns>The master cache keys.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntries(EPiServer.Core.ContentReference,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets references to the child entries of a catalog or catalog node.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="totalCount">Total number of catalog entries</param>
            <returns>A list of <see cref="T:EPiServer.Core.ContentReference"/>s.</returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntries(EPiServer.Core.ContentReference)">
            <summary>
            Gets the catalog entries.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogNodes(EPiServer.Core.ContentReference)">
            <summary>
            Gets references to the child nodes of a catalog or catalog node.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns>A list of <see cref="T:EPiServer.Core.ContentReference"/>s.</returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetNodeEntryReferences(System.Int32)">
            <summary>
            Get the children of a catalog node.
            </summary>
            <param name="catalogNodeId">Catalog Node Id</param>
            <returns>List of GetChildrenReferenceResult</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntryReferences(System.Int32)">
            <summary>
            Get the direct children of a catalog.
            </summary>
            <param name="catalogId">Catalog Id.</param>
            <returns>List of GetChildrenReferenceResult</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.ConstructCatalogReferences(Mediachase.Commerce.Catalog.Dto.CatalogDto)">
            <summary>
            Constructs the catalog references.
            </summary>
            <param name="catalogDto">The catalog dto.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.ConstructCatalogNodeReferences(System.Int32,System.Int32)">
            <summary>
            Constructs the catalog node references
            </summary>
            <param name="catalogId">Id of catalog.</param>
            <param name="parentNodeId">Id of parent CatalogNode. Must be 0 if we want to add direct children of a Catalog.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider">
            <summary>
            Content provider for Commerce object
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.DefaultProviderKey">
            <summary>
            Default key of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider" />, used in the automatic registration of the
            content provider and in in creating <see cref="T:EPiServer.Core.ContentReference"/>s to catalog content in it.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.InventoryService.IInventoryService,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler,EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore,Mediachase.Commerce.Catalog.Data.ContentGuidAdmin,EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB,EPiServer.Core.IContentCacheKeyCreator,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider" /> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContentMoveHandler">The catalog content move handler.</param>
            <param name="priceService">The price service.</param>
            <param name="inventoryService">The inventory service.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="catalogContentCommitterHandler">The committer to commit changes to the ECF database.</param>
            <param name="contentVersionStore">The catalog content version store.</param>
            <param name="contentGuidAdmin">The catalog guid admin.</param>
            <param name="catalogContentDB">The catalog content DB.</param>
            <param name="contentCacheKeyCreator">Handles generation of Cache keys.</param>
            <param name="relationRepository">The repository that handles relations.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.InventoryService.IInventoryService,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler,EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore,Mediachase.Commerce.Catalog.Data.ContentGuidAdmin,EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB,EPiServer.Core.IContentCacheKeyCreator,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider" /> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContentMoveHandler">The catalog content move handler.</param>
            <param name="priceService">The price service.</param>
            <param name="inventoryService">The inventory service.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="catalogContentCommitterHandler">The committer to commit changes to the ECF database.</param>
            <param name="contentVersionStore">The catalog content version store.</param>
            <param name="contentGuidAdmin">The catalog guid admin.</param>
            <param name="catalogContentDB">The catalog content DB.</param>
            <param name="contentCacheKeyCreator">Handles generation of Cache keys.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.InventoryService.IInventoryService,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler,EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore,Mediachase.Commerce.Catalog.Internal.ContentGuidAdmin,EPiServer.Commerce.Catalog.DataAccess.CatalogContentDB,EPiServer.Core.IContentCacheKeyCreator,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider" /> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContentMoveHandler">The catalog content move handler.</param>
            <param name="priceService">The price service.</param>
            <param name="inventoryService">The inventory service.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="catalogContentCommitterHandler">The committer to commit changes to the ECF database.</param>
            <param name="contentVersionStore">The catalog content version store.</param>
            <param name="contentGuidAdmin">The catalog guid admin.</param>
            <param name="catalogContentDB">The catalog content DB.</param>
            <param name="contentCacheKeyCreator">Handles generation of Cache keys.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadContent(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
            <summary>
            Load content for given contentlink.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageSelector">The language selector.</param>
            <returns>An instance of CatalogContent</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <summary>
            Load all language instances for a given <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>An instance of CatalogContent</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
            <summary>
            Loads multiple catalog content instances from their references.
            </summary>
            <param name="contentReferences">The content references.</param>
            <param name="selector">The language selector.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Save catalog content to storage with specified action.
            </summary>
            <param name="content">The content.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ValidateForPublishing(EPiServer.Core.IContent)">
            <summary>
            Validate content before publishing.
            </summary>
            <param name="content">The content.</param>
            <returns>An enumerable with <see cref="T:EPiServer.Validation.ValidationError"/></returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ProviderCapabilities">
            <summary>
            Gets the capabilities that this content provider supports.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ProviderKey">
            <summary>
            Gets the provider key.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.VersionRepository">
            <summary>
            Gets the version repository for catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListDelayedPublish">
            <summary>
            Lists the content versions that are scheduled for publish.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadChildrenReferencesAndTypes(EPiServer.Core.ContentReference,System.String,System.Boolean@)">
            <summary>
            Loads the children references and types.
            </summary>
            <param name="contentLink">The content link to the parent.</param>
            <param name="languageID">The language ID.</param>
            <param name="languageSpecific">Output parameter which will be assigned false because catalog child listings are the same for all languages.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ResolveContent(EPiServer.Core.ContentReference)">
            <summary>
            Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult"/> with the identifiers for the content or null if no content was matched.
            </returns>
            <remarks>The ContentUri relies on correct routing for the content, if no matching routes are
            registered, it will return a Uri to the root.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ResolveContent(System.Guid)">
            <summary>
            Tries to resolve a Content from a <see cref="T:System.Guid"/>.
            </summary>
            <param name="contentGuid">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult"/> with the identifiers for the content or null if no content was matched.
            </returns>
            <remarks>The ContentUri relies on correct routing for the content, if no matching routes are
            registered, it will return a Uri to the root.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Lists references to all children content items that have matching routing/url segments.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="urlSegment">The URL segment.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.GetReferencesToContentItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets all references to the specified product content, for example, any entry that uses these content links.
            Override method to get all references to the given items.
            </summary>
            <param name="contentLinks">The content links to check references for.</param>
            <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
            <summary>
            Copies the specified content to the destination.
            </summary>
            <param name="contentLink">The content link of the content to copy.</param>
            <param name="destinationLink">The destination link.</param>
            <param name="publishOnDestination">if set to <c>true</c> the content will be published at destination.</param>
            <param name="requiredSourceAccess">The required source access.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListContentOfContentType(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Gets a list of references to catalog content of specified <see cref="T:EPiServer.DataAbstraction.ContentType"/>.
            </summary>
            <param name="contentType">The contentType to return references for.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.ContentType"/> is used.
            </summary>
            <param name="contentType">The contentType to return references for.</param>
            <returns>
            	<c>true</c> if content type is used; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.GetPagesWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean,System.Boolean)">
            <summary>
            Gets the catalog contents with instance of property definition.
            </summary>
            <param name="propertyDefinition">The definition.</param>
            <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master language are taken into account.</param>
            <param name="onlyPublished">if set to <c>true</c> only published versions are taken into account.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
            <summary>
            Determines whether there is data store on specified propertyDefinition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns>
            	<c>true</c> if property definition is used; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.CopyPrices(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Copies the prices. This method will be called after content has been copied.
            </summary>
            <param name="source">The content to copy prices from.</param>
            <param name="target">The content which just has been created.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.CopyWarehouseInventories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Copies the warehouse inventories. This method will be called after content has been copied.
            </summary>
            <param name="source">The content to copy prices from.</param>
            <param name="target">The content which just has been created.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.EnsureCode(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Core.IContent)">
            <summary>
            Ensures the code will be set to null (to be auto-generated) if this is master language clone, or copy from master language otherwise.
            </summary>
            <param name="clone">The clone.</param>
            <param name="masterLanguageClone">The master language clone.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Moves the specified content to the destination.
            </summary>
            <param name="contentLink">The content link of the content to move.</param>
            <param name="destinationLink">The destination link.</param>
            <exception cref="T:System.InvalidOperationException">Only catalog entries and nodes can be moved.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Delete(EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            Delete a content.
            </summary>
            <param name="contentLink">A link to the content that should be deleted.</param>
            <param name="forceDelete">Set to <c>true</c> if you want to delete this even if other items reference it.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SaveSecurityDescriptor(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.DeleteSecurityEntity(System.String,EPiServer.Security.SecurityEntityType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.IContent,EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/> to react to changes in the
            entry (with relations) / node / catalog the content is based on
            </summary>
            <param name="content">The content that is about to be added to cache.</param>
            <param name="cacheSettings">The cache settings.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Core.GetChildrenReferenceResult},EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            to react to item adds/removes and changed relations
            </summary>
            <param name="contentReference"></param>
            <param name="children"></param>
            <param name="cacheSettings"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IEnumerable{EPiServer.Core.MatchingSegmentResult},EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            to react to item adds/removes and changed relations
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="urlSegment">The URL segment.</param>
            <param name="childrenMatches">The children matches.</param>
            <param name="cacheSettings">The cache settings.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider">
            <summary>
            Provides information about the structure of the catalog content in
            the content provider.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Core.IContentProviderManager,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider.GetChildNodeCount(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the number of child nodes of the catalog content.
            </summary>
            <param name="content">The catalog content.</param>
            <returns>For <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.RootContent"/>: The number of catalogs.
            For <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>: The number of nodes directly under the catalog.
            For <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>: The number of nodes that reference this node as parent either directly or via a <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>,
            filtered by matching catalogs.
            For other catalog content: 0.</returns>
            <exception cref="T:System.ArgumentException">The content has to belong to the catalog content provider.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider.GetChildEntryCount(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the number of child entries of the catalog content.
            </summary>
            <param name="content">The catalog content.</param>
            <returns>For <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>: The number of entries directly under the catalog.
            For <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>: The number of entries that reference this node as parent via a <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>,
            filtered by matching catalogs.
            For other catalog content: 0.</returns>
            <exception cref="T:System.ArgumentException">The content has to belong to the catalog content provider.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider.GetChildNodeCount(System.Int32,System.Int32)">
            <summary>
            Gets the child node count through cache.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="parentNodeId">The parent node id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentStructureProvider.GetChildEntryCount(System.Int32,System.Int32)">
            <summary>
            Gets the child entry count through cache.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="parentNodeId">The parent node id.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Version repository of Catalog contents.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogEventHandler,EPiServer.Framework.Localization.LocalizationService,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration,Mediachase.Commerce.Catalog.CatalogOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogEventHandler">The catalog event handler.</param>
            <param name="localizationService">The localization service.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="catalogContentVersionDB">The catalog content version database.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="metaDataCommitter">The meta data committer.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
            <param name="catalogOptions">The catalog options</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.Initialize(EPiServer.Core.IContentEvents)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Initializes event handlers for the events in <see cref="T:EPiServer.Core.IContentEvents"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.UnInitialize(EPiServer.Core.IContentEvents)">
            <summary>
            Uninitializes event handlers for the events in <see cref="T:EPiServer.Core.IContentEvents"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ClearCache(EPiServer.Core.ContentReference)">
            <summary>
            Clear cache.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.DeleteAllVersions(EPiServer.Core.ContentReference)">
            <summary>
            Delete all versions of a content
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ImportVersion(System.Collections.Generic.IList{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <summary>
            This method is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Imports the list of content version from another versioning system, CatalogContentDraft store for example, to the current versioning system.
            </summary>
            <param name="contents">A list of content to create versions. These content must have WorkId in ContentLink.</param>
            <param name="commonDraftWorkIds">The list of work id of common drafts.</param>
            <returns>A mapping between the old content link and the inserted work Id.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.Delete(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.List(EPiServer.Core.VersionFilter,System.Int32,System.Int32,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.Load(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.LoadPublished(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.LoadPublished(EPiServer.Core.ContentReference,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.SetCommonDraft(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ListObsolete(System.Int32,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.CreateContentVersion(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a content version
            </summary>
            <param name="content">A content to create version.</param>
            <param name="currentUser">The modifier name.</param>
            <param name="publishAction">When publishing a Catalog, we need to update all drafts to have the same DefaultLanguage as the published one.</param>        
            <param name="skipSetCommonDraft">Flag to indicate whether should skip set common draft for new created draft</param>
            <returns>The work id of the created version.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ListMatchingSegments(System.Int32,System.Int32,System.String)">
            <summary>
            Lists all children directly under <paramref name="parentNodeId"/> that matches the <paramref name="urlSegment"/>
            </summary>
            <param name="parentNodeId">Id of the parent node to search under, or 0 for searching on the catalog level.</param>
            <param name="catalogId">The catalogId, or 0 to not filter by catalog.</param>
            <param name="urlSegment">The url segment.</param>
            <returns>List of matching drafts.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.UpdateMasterLanguage(EPiServer.Core.ContentReference)">
            <summary>
            Updates master language for all versions found as descendant of the content which has the given content link.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ClearCache(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            Remove the item as specified by <see cref="P:EPiServer.ContentEventArgs.ContentLink"/> from cache.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ClearCache(System.Object,EPiServer.DeleteContentEventArgs)">
            <summary>
            Remove the deleted item and any children from local and remote cache
            </summary>
            <remarks>
            If the number of deleted children is more than <see cref="F:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.REMOTE_CACHE_UPDATE_LIMIT"/> any remote cache is cleared.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.ClearCacheInternal(EPiServer.Core.ContentReference)">
            <summary>
            Removes the content with the specfied link from both the local and any remote cache.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.GetVersionListCacheKey(EPiServer.Core.ContentReference)">
            <summary>
            Get version list cache key for a specific content instance.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.GetFilterCacheKey(EPiServer.Core.VersionFilter,System.Int32,System.Int32)">
            <summary>
            Gets the version list cache key for filter queries that don't specify contentlink.
            </summary>
            <param name="filter">The filter.</param>
            <param name="startIndex">The start index.</param>
            <param name="maxRows">The maximum rows.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.GetCacheKey(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the version list cache key for a specific content in a language.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.GetVersionListEvictionPolicy(EPiServer.Core.ContentReference)">
            <summary>
            Gets an eviction policy with master key dependencies to the entry, node or catalog.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.GetFilterEvictionPolicy">
            <summary>
            Gets an eviction policy with master key dependencies for filter queries that don't
            specify contentlink.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.EnsureDraftsInAllLanguages(EPiServer.Commerce.Catalog.DataAccess.Internal.VersionCollection,EPiServer.Core.ContentReference)">
            <summary>
            Ensures that content of <paramref name="contentLink"/> have all draft for all existing languages.
            </summary>
            <param name="versionCollection">The collection which contains all available version for a <paramref name="contentLink"/>. 
            We use this to check if there is any missing version for a language. Any missing version will be added to it.
            </param>
            <param name="contentLink">The content link to get version and draft from.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentVersionStore.UpdateContentVersion(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Int32,System.Boolean)">
            <summary>
            Updates a content version related information like property, SEO, Asset.
            </summary>
            <param name="content">The content version to update.</param>
            <param name="workId">The work id of the version.</param>
            <param name="publishAction">When publishing a Catalog, we need to update all drafts to have the same DefaultLanguage as the published one.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.NeedToSyncDraft">
            <remarks>When updating this, remember to update CatalogEventArgs.CatalogContentUpdateKey too.</remarks>
            Flag to indicate whether updating a DTO should sync draft to draft table.
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.ContentUpdated">
            <summary>
            Occurs when an item in the ECF has been updated and the corresponding
            content is cleared from cache.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationsUpdated">
            <summary>
            Occurs when the relations of an item in ECF have been updated
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationsUpdated">
            <summary>
            Occurs when the associations of an item in ECF have been updated
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.LanguageConfigurationUpdated">
            <summary>
            Occurs when the language configuration of a catalog 
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler" /> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.EntryUpdated(System.Object,Mediachase.Commerce.Catalog.Events.EntryEventArgs)">
            <summary>
            Implementation of the EntryUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.EntryEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.EntryDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedEntryEventArgs)">
            <summary>
            Implementation of the EntryDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedEntryEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.NodeUpdated(System.Object,Mediachase.Commerce.Catalog.Events.NodeEventArgs)">
            <summary>
            Implementation of the NodeUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.NodeEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.NodeDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedNodeEventArgs)">
            <summary>
            Implementation of the NodeDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedNodeEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogUpdated(System.Object,Mediachase.Commerce.Catalog.Events.CatalogEventArgs)">
            <summary>
            Implementation of the CatalogUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedCatalogEventArgs)">
            <summary>
            Implementation of the CatalogDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedCatalogEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogLanguageUpdated(System.Object,Mediachase.Commerce.Catalog.Events.CatalogLanguageEventArgs)">
            <summary>
            Implementation of the CatalogLanguageUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogLanguageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.AssociationEventArgs)">
            <summary>
            Implementation of the AssociationUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.AssociationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedAssociationEventArgs)">
            <summary>
            Implementation of the AssociationDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedAssociationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.RelationEventArgs)">
            <summary>
            Implementation of the RelationUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.RelationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedRelationEventArgs)">
            <summary>
            Implementation of the RelationDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedRelationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogGetChildrenReferenceResult">
            <summary>
            Extends the default class with support for sort order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogGetChildrenReferenceResult.SortOrder">
            <summary>
            The sort order for the child node.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.Catalog"/>.
            NOTE: All operations is in this class are uncached!
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.#ctor(Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder"/> class.
            </summary>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionDB">The catalog content Database access.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Represents the base class for catalog content builder.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.#ctor(Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder"/> class.
            </summary>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionDB">The catalog content Database access.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogContext">
            <summary>
            Gets the catalog content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MetaClassContentFactory">
            <summary>
            Gets the Meta class content factory.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogPropertyLoader">
            <summary>
            Gets the Catalog property loader.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ReferenceConverter">
            <summary>
            Gets the reference converter.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogContentVersionDB">
            <summary>
            Gets the catalog content version Database access.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <summary>
            Creates a list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> of a specific <see cref="T:EPiServer.Core.ContentReference"/> in all languages that content is available in.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.LanguagesSplitter">
            <summary>
            Represent the languages splitter character.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.WorkId">
            <summary>
            Property containing the workId of the draft content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ObjectId">
            <summary>
            Property containing the object id of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ObjectTypeId">
            <summary>
            Property containing the Object Type Id of draft content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogId">
            <summary>
            Property containing the catalogId of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ClassTypeId">
            <summary>
            Property containing the class type of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MetaFieldId">
            <summary>
            Property containing the meta field Id of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MetaClassId">
            <summary>
            Property containing the meta class Id of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MetaFieldName">
            <summary>
            Property containing the meta field name of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ParentId">
            <summary>
            Property containing the parent Id of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.LanguageName">
            <summary>
            Property containing the language name of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CultureSpecific">
            <summary>
            Property containing the culture specific setting of the property.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MasterLanguageName">
            <summary>
            Property containing the master language name of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsCommonDraft">
            <summary>
            Property containing the flag to indicate whether the draft content is common draft.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MasterVersionId">
            <summary>
            Property containing the master version Id of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Status">
            <summary>
            Property containing the status of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.StartPublish">
            <summary>
            Property containing the start publish date of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.StopPublish">
            <summary>
            Property containing the stop publish date of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsActive">
            <summary>
            Property containing the is active indicator of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsPublished">
            <summary>
            Property containing the is published indicator of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Name">
            <summary>
            Property containing the name of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Code">
            <summary>
            Property containing the code of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.SeoTitle">
            <summary>
            Property containing the SEO title of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.SeoDescription">
            <summary>
            Property containing the SEO description the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.SeoKeywords">
            <summary>
            Property containing the SEO keywords of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.SeoUri">
            <summary>
            Property containing the Uri of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.SeoUriSegment">
            <summary>
            Property containing the Uri Segment of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ContentGuid">
            <summary>
            Property containing the ContentGuid of the content.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.UriSegment">
            <summary>
            Property containing the Uri Segment of the content catalog.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.AssetType">
            <summary>
            Property containing the asset type of the content asset.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.AssetKey">
            <summary>
            Property containing the asset key of the content asset.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.AssetGroupName">
            <summary>
            Property containing the group name of the content asset.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.AssetSortOrder">
            <summary>
            Property containing the sort order of the content asset.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyId">
            <summary>
            Property containing the property Id of the udttCatalogContentProperty.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeBoolean">
            <summary>
            Property containing the Boolean column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeNumber">
            <summary>
            Property containing the Number column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeFloatNumber">
            <summary>
            Property containing the FloatNumber column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeMoney">
            <summary>
            Property containing the Money column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeDecimal">
            <summary>
            Property containing the Decimal column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeDate">
            <summary>
            Property containing the Date column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeBinary">
            <summary>
            Property containing the Binary column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeString">
            <summary>
            Property containing the String column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeLongString">
            <summary>
            Property containing the LongString column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PropertyTypeGuid">
            <summary>
            Property containing the Guid column of draft property table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.TaxCategoryId">
            <summary>
            Property containing the tax category Id of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.TrackInventory">
            <summary>
            Property containing the TrackInventory column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Height">
            <summary>
            Property containing the Height column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Width">
            <summary>
            Property containing the Width column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Length">
            <summary>
            Property containing the Length column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Weight">
            <summary>
            Property containing the Weight column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MaxQuantity">
            <summary>
            Property containing the MaxQuantity column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.MinQuantity">
            <summary>
            Property containing the MinQuantity column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.PackageId">
            <summary>
            Property containing the PackageId column of the variation table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.DefaultCurrency">
            <summary>
            Property containing the DefaultCurrency column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.WeightBase">
            <summary>
            Property containing the WeightBase column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.LengthBase">
            <summary>
            Property containing the LengthBase column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.DefaultLanguage">
            <summary>
            Property containing the DefaultLanguage column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Languages">
            <summary>
            Property containing the list of enabled catalog language.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsPrimary">
            <summary>
            Property containing the IsPrimary column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Owner">
            <summary>
            Property containing the Owner column of the Catalog table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogNodeId">
            <summary>
            Property containing the CatalogNodeId column of the CatalogItemAsset table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CatalogEntryId">
            <summary>
            Property containing the CatalogEntryId column of the CatalogItemAsset table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Created">
            <summary>
            Property containing the Created column of the draft table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.CreatedBy">
            <summary>
            Property containing the user that created the draft table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.ModifiedBy">
            <summary>
            Property containing the user that modified the draft table.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.Modified">
            <summary>
            Property containing the date that the draft is modified.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsNull">
            <summary>
            Property that marks whether the property is changed to null.
            It's used to be passed to the table data type udttCatalogContentProperty
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentBuilder.IsEncrypted">
            <summary>
            Property that marks whether the property is encrypted or not.
            It's used to be passed to the table data type udttCatalogContentProperty
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension">
            <summary>
                Injects code specific to the catalog into the content type scanning mechanism.
                Responsible for handling synchronization between content types and the meta data plus layer.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner,EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler,EPiServer.Framework.Initialization.HostType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension" /> class.
            </summary>
            <param name="metaDataTypeResolver">The meta data type resolver.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
            <param name="contentTypeModelAssigner">The content type model assigner.</param>
            <param name="metaDataChangeEventHandler">The metadata change event handler.</param>
            <param name="hostType">The host type.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner,EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension" /> class.
            </summary>
            <param name="metaDataTypeResolver">The meta data type resolver.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
            <param name="contentTypeModelAssigner">The content type model assigner.</param>
            <param name="metaDataChangeEventHandler">The metadata change event handler.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.MetaDataChangeEventHandler_MetaDataChanged(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            When meta data has been changed, let's synchronize model repository.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ContentTypeModelScanners">
            <summary>
            The registred content type model scanners
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.MetaDataContext">
            <summary>
            Context used when loading and creating <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignValuesToModel(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Syncs a content type to a meta class.
            </summary>
            <param name="typeModel">The type model.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignValuesToProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Syncs properties to meta fields of a conten type/meta class.
            </summary>
            <param name="contentTypeModel">The content type model.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.Validate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
            <summary>
            Validate content types so that properties with the same name don't have different attribute values.
            </summary>
            <param name="typeModels">The type models.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ValidateNoCatalogContentExtensions(System.Collections.Generic.List{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
            <summary>
                Throws if any content type model extends CatalogContent and has the CatalogContentTypeAttribute.
            </summary>
            <param name="contentTypeModelList">A list of content type models to validate.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ValidateDuplicatedModels``1(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Func{``0,System.Object})">
            <summary>
            Throws exception if the attribute exist on one model, but not on the other.
            </summary>
            <typeparam name="T">The model attribute to validate against.</typeparam>
            <param name="model">The first property definition model.</param>
            <param name="compareWithModel">The second property definition model.</param>
            <param name="action">The action to get the attribute value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.CreateMetaField(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Creates <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaField"/> from <paramref name="propertyDefinitionModel"/>.
            </summary>
            <param name="propertyDefinitionModel">The property definition to create the meta field from.</param>
            <param name="metaDataType">The type of property.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.UpdateMetaField(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,Mediachase.MetaDataPlus.Configurator.MetaField)">
            <summary>
                Updates the specifed <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaField"/> from the specified <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/>.
            </summary>
            <param name="propertyDefinitionModel">The property definition to update the meta field from.</param>
            <param name="metaField">The meta field that will be updated</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ThrowIfAnyModelAttributeIsUnsupported(Mediachase.MetaDataPlus.Configurator.MetaDataType,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if any model attribute on <paramref name="propertyDefinitionModel"/> is not supported by the <paramref name="metaDataType"/>
            </summary>
            <param name="metaDataType">The meta data type to validate.</param>
            <param name="propertyDefinitionModel">The property definition model, which contains the model attribute to validate.</param>
            <exception cref="T:System.InvalidOperationException">Will be thrown if any attribute is unsupported.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ThrowIfModelContainsAttribute(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Type[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if any model attribute on <paramref name="propertyDefinitionModel"/> is not supported by the <paramref name="types"/>
            </summary>
            <param name="types">The model attributes to validate.</param>
            <param name="propertyDefinitionModel">The property definition model, which contains the model attribute to validate.</param>
            <exception cref="T:System.InvalidOperationException">Will be thrown if any attribute is unsupported.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.SetMetaFieldAttributes(Mediachase.MetaDataPlus.Configurator.MetaAttributeCollection,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
            <summary>
            Sets meta field attributes. Override this method to set attributes.
            </summary>
            <param name="metaFiledAttributes">The meta fild attributes that will be populated with data.</param>
            <param name="model">The property definition model, which will be used to set the value on the meta field attribute.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.SetMetaFieldAttribute``1(System.String,Mediachase.MetaDataPlus.Configurator.MetaAttributeCollection,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Func{``0,System.Object})">
            <summary>
            Sets a meta field attribute to a value specified in <paramref name="action"/>.
            </summary>
            <typeparam name="TAttribute">The attribute type, used to set the meta field attribute.</typeparam>
            <param name="name">The name of the meta field attribute</param>
            <param name="metaFiledAttributes">The meta field attributes.</param>
            <param name="model">The property definition model.</param>
            <param name="action">The action used to get the value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignMetaClassPropertiesToModel(Mediachase.MetaDataPlus.Configurator.MetaClass,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Populates the content type model with property definitions for meta fields that exist only in
            the ECF DB (i.e. are not created from the strongly typed class). This enables the
            metadata store to pick up required fields etc.
            </summary>
            <param name="metaClass"></param>
            <param name="contentTypeModel"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.IsValid(Mediachase.MetaDataPlus.Configurator.MetaDataType,Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Validates if the two types are compatible.
            </summary>
            <param name="typeFromCode">The property type created from content data model.</param>
            <param name="typeFromMetaData">The property type in Meta data plus.</param>
            <returns><c>True</c> if the types are compatible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader" /> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader.VerifyLanguageSetup(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.Int32)">
            <summary>
            Verifies the language setup so that the language of the content is one
            of the available languages of the catalog, and also that the master
            language and available languages are set.
            </summary>
            <param name="content">The content.</param>
            <param name="language">The preferred language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader" /> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="localizationService">The service used to get localized string resources.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Storage.MetaObjectAccessor)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Storage.MetaObjectAccessor)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(System.Collections.Generic.IEnumerable{Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow},EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
                Creates language properties in the specified <paramref name="content"/> instance 
                corresponding to the languages on the <paramref name="catalogLanguages"/> parameter.
            </summary>
            <param name="catalogLanguages"></param>
            <param name="content"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates properties in the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instance corresponding to the static
            attributes of the <see cref="T:Mediachase.Commerce.Catalog.Dto.CatalogEntryDto" /> and sets the property values. Uses the language
            of the content instance to populate properties corresponding to multi language attributes.
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="seoRow">The seo row to read attributes from.</param>
            <param name="variationRow">The variation row to read attributes from, if applicable (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
             Creates properties in the specified <paramref name="content"/> according to the static properties on <paramref name="nodeRow"/>.
             </summary>
             <param name="nodeRow">The node to read attributes from.</param>
             <param name="seoRow">The seo row to read attributes from.</param>
             <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadCommonPropertyVersion(System.Data.DataRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadEntryPropertyVersion(System.Data.DataRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadAssetPropertyVersion(System.Data.DataRow[],EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadContentPropertiesVersion(System.Data.DataRow[],EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.SetChangeTrackingProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates properties in the specified <paramref name="content"/> according to the static properties on <paramref name="catalogRow"/>.
            </summary>
            <param name="catalogRow">The catalog row to read attributes from.</param>
            <param name="languageRow">The catalog language row to read attributes from, if available (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadMarkets(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Loads the available markets in the entry.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to pouplate with markets.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadAssets(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Create AssetLinkCollection property from CatalogItemAsset table
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadAssets(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Create AssetLinkCollection property from CatalogItemAsset table
            </summary>
            <param name="nodeRow">The node row to read attributes from.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadMetaDataContentProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Populates the  <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> instance with values from the
            <see cref="T:Mediachase.Commerce.Storage.MetaObjectAccessor"/>. Uses the language of the content instance to populate properties
            corresponding to multi language attributes.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogEntry"/>.
            NOTE: All operations is in this class are uncached!
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.#ctor(Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,Mediachase.MetaDataPlus.Internal.CatalogMetaObjectRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder" /> class.
            </summary>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionDB">The catalog content Database access.</param>
            <param name="metaObjectRepository">The meta object repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.GetEntryNodeRelations(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the entry node relations.
            </summary>
            <param name="entryIds">The entry ids.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on <see cref="T:Mediachase.Commerce.Catalog.CatalogContentType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <summary>
            Checks if this builder handles the specified <paramref name="catalogContentType"/>.
            </summary>
            <param name="catalogContentType">Type of the commerce content.</param>
            <returns>
                <c>true</c> if <paramref name="catalogContentType"/> can be handled by this instance; 
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Creates a list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> according to each of the specified
            <see cref="T:EPiServer.Core.ContentReference"/> in <paramref name="contentLinks"/>, regardless content version.
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <summary>
            Creates a list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> version based on the list of content references
            </summary>
            <param name="contentLinks">The content links.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader">
            <summary>
            Handles converting Commerce catalog data to properties
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates properties in the <paramref name="content"/> instance corresponding to the static and metadata
            attributes of the provided data rows and sets the property values.
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="seoRow">The seo row to read attributes from.</param>
            <param name="variationRow">The variation row to read attributes from, if applicable (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Storage.MetaObjectAccessor)">
            <summary>
            Creates properties in the <paramref name="content"/> instance corresponding to the static and metadata
            attributes of the provided data rows and sets the property values.
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="seoRow">The seo row to read attributes from.</param>
            <param name="variationRow">The variation row to read attributes from, if applicable (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
            <param name="metaObjectAccessor">The meta object accessor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates properties in the specified <paramref name="content"/> instance corresponding to the static
            properties on the provided data row.
            </summary>
            <param name="catalogRow">The catalog row to read attributes from.</param>
            <param name="languageRow">The catalog language row to read attributes from, if available (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
             Creates properties in the specified <paramref name="content"/> instance corresponding to the static and metadata
             attributes of the provided data rows and sets the property values.
             </summary>
             <param name="nodeRow">The node to read attributes from.</param>
             <param name="seoRow">The seo row to read attributes from.</param>
             <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Storage.MetaObjectAccessor)">
            <summary>
             Creates properties in the specified <paramref name="content"/> instance corresponding to the static and metadata
             attributes of the provided data rows and sets the property values.
             </summary>
             <param name="nodeRow">The node to read attributes from.</param>
             <param name="seoRow">The seo row to read attributes from.</param>
             <param name="content">The content to populate with properties.</param>
             <param name="metaObjectAccessor">The meta object accessor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadCommonPropertyVersion(System.Data.DataRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Loads common property for a specific draft content.
            </summary>
            <param name="row">The datarow to read data from.</param>
            <param name="content">The catalog content to load data to.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadEntryPropertyVersion(System.Data.DataRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Loads entry property for a specific draft content.
            </summary>
            <param name="row">The datarow to read data from.</param>
            <param name="content">The catalog content to load data to.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadAssetPropertyVersion(System.Data.DataRow[],EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Loads Asset information for a specific draft content.
            </summary>
            <param name="rowsCollection">The row collection to read data from.</param>
            <param name="content">The catalog content to load data to.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadContentPropertiesVersion(System.Data.DataRow[],EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Populates the content property for a specific draft content
            </summary>
            <param name="rowsCollection">The row collection ro read data from</param>
            <param name="content">the catalog content to load properties to</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadMetaDataContentProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Populates the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instance with values from the
            <see cref="T:Mediachase.Commerce.Storage.MetaObjectAccessor"/>. Uses the language of the content instance to populate properties
            corresponding to multi language attributes.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.SetChangeTrackingProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Sets change tracking properties for a content.
            </summary>
            <param name="accessor">The meta accessor to read meta data.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Populates the access control list information for catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager.#ctor(EPiServer.Commerce.Catalog.DataAccess.Internal.CatalogContentAccessControlListDB)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager" /> class.
            </summary>
            <param name="catalogContentAclDb">The default implementation.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager.PopulateAccessControlList(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase})">
            <summary>
            Populates access control list for node contents.
            </summary>
            <param name="contents">The node contents.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager.Save(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
            <summary>
            Saves the specified content security descriptor.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="contentSecurityDescriptor">The content security descriptor.</param>
            <param name="securitySaveType">Type of the security save.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager.DeleteByUserOrRole(System.String,EPiServer.Security.SecurityEntityType)">
            <summary>
            Deletes all ACLs on catalog content and sub contents on a specific membership user or role.
            </summary>
            <param name="userOrRoleName">Name of the user or role.</param>
            <param name="entityUserRole">The entity.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentFactory">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extends the default <see cref="T:EPiServer.Construction.IContentFactory"/> to do processing specific to
            <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase" /> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentFactory.#ctor(EPiServer.Construction.IContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentFactory" /> class.
            </summary>
            <param name="defaultImplementation">The default implementation.</param>
            <param name="languageLoader">The language loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentFactory.CreateContent(EPiServer.DataAbstraction.ContentType,EPiServer.Construction.BuildingContext)">
            <summary>
            Creates the content, using default implementation but verifying
            the language setup according to the catalog.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="buildingContext">The building context.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory">
            <summary>
            Creates <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase" /> instances based on a <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.#ctor(EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.Construction.IContentFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory" /> class.
            </summary>
            <param name="metaClassMap">The meta class map.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="languageLoader">The language loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.#ctor(EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.Construction.IContentFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader,EPiServer.Core.Internal.ExternalApplicationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory" /> class.
            </summary>
            <param name="metaClassMap">The meta class map.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="languageLoader">The language loader.</param>
            <param name="externalApplicationOptions">The external application options.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create``1(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <param name="language">The requested language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create``1(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an instance of type <typeparamref name="T" /> and with properties from metafields.
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <param name="language">The requested language, or null for master language.</param>
            <param name="metaClassId">The meta class id.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>
            A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase" /> of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on the specified <paramref name="metaClassId"/>.
            </summary>
            <param name="baseEntryType">The base entry type, if any, used as fallback if no meta class matches.</param>
            <param name="metaClassId">The meta class id.</param>
            <param name="language">The requested language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> if any match is found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on the specified content type <paramref name="name"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="language">The language.</param>
            <param name="catalogId">The catalog id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create(System.Type,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="language">The language.</param>
            <param name="catalogId">The catalog id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.AddMetaClassPropertiesForWeaklyTypedMetaClass(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Int32)">
            <summary>
            Adds properties corresponding to meta field on a catalog entry/node which does not have a
            corresponding strongly typed model (and hence isn't included in the scanning).
            </summary>
            <param name="content">The content.</param>
            <param name="metaClassId">The meta class id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataContentBuilder">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataContentBuilder.#ctor(Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,Mediachase.MetaDataPlus.Internal.CatalogMetaObjectRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataContentBuilder" /> class.
            </summary>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionDB">The catalog content Database access.</param>
            <param name="metaObjectRepository">The meta object repository.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Maps a the meta fields of a meta class to property definition models.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver" /> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.MetaDataContext">
            <summary>
            Context used when loading <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ExtractProperties(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extracts information about the meta fields of a meta class as <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/> instances,
            if they can be mapped to property types.
            </summary>
            <param name="metaClassId">The meta class id.</param>
            <param name="propertiesToSkip">Names of properties to skip (e.g. because they are already included as
            a result of scanning).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ExtractProperties(System.Collections.Generic.IEnumerable{Mediachase.MetaDataPlus.Configurator.MetaField})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extracts information about the meta fields of a meta class as <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/> instances,
            if they can be mapped to property types.
            </summary>
            <param name="metaFields">The meta fields.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ConfigureProperties(System.Collections.Generic.ICollection{EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Configures the properties by adding default UI hints
            </summary>
            <param name="propertyDefinitionModels">The property definition models.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver">
            <summary>
            Maps a <see cref="T:System.Type"/> to a <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataType(EPiServer.Core.PropertyDataType)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:EPiServer.Core.PropertyDataType"/>
            </summary>
            <param name="propertyDataType">The property data type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataType(System.Type)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> representing the <paramref name="type"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataTypeFromBackingType(System.Type)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:System.Type"/> representing the backing type of a property
            </summary>
            <param name="backingType">The backing type</param>
            <returns>The <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> representing the backing type</returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Byte">
            <summary>
            PropertyData type for a byte
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int16">
            <summary>
            PropertyData type for an int16.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int32">
            <summary>
            PropertyData type for an int32.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int64">
            <summary>
            PropertyData type for an int64.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Double">
            <summary>
            PropertyData type for a double.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Single">
            <summary>
            PropertyData type for a single.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Float">
            <summary>
            PropertyData type for a float.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Decimal">
            <summary>
            PropertyData type for a decimal.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.String">
            <summary>
            PropertyData type for a string
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Boolean">
            <summary>
            PropertyData type for a boolean.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.DateTime">
            <summary>
            PropertyData type for a date time.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Url">
            <summary>
            PropertyData type for an URL.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.XhtmlString">
            <summary>
            PropertyData type for an XhtmlString.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.ContentArea">
            <summary>
            PropertyData type for an ContentArea.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.LinkItemCollection">
            <summary>
            PropertyData type for an LinkItemCollection.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.PageReference">
            <summary>
            PropertyData type for an PageReference.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.ContentReference">
            <summary>
            PropertyData type for an ContentReference.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogNode"/>.
            NOTE: All operations is in this class are uncached!
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.NodeResponseGroup">
            <summary>
            The default node response group
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.#ctor(Mediachase.Commerce.Catalog.Internal.ReducedCacheCatalogSystemAccessor,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.DataAccess.CatalogContentVersionDB,Mediachase.MetaDataPlus.Internal.CatalogMetaObjectRepository,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder" /> class.
            </summary>
            <param name="catalogContextAccessor">The catalog context accessor.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionDB">The catalog content Database access.</param>
            <param name="metaObjectRepository">The meta object repository.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.GetLanguageBranches(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.Root"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.Internal.CatalogContentAccessControlManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder"/> class.
            </summary>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogContentAccessControlManager">The catalog content access control manager.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.CreateVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.#ctor(EPiServer.Core.IContentEvents,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Core.IContentCacheKeyCreator)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.ContentEventHandler" /> class.
            </summary>
            <param name="contentEvents">The content events to handle.</param>
            <param name="synchronizedObjectInstanceCache">The object instance cache.</param>
            <param name="contentCacheKeyCreator">Handles generation of Cache keys.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.Initialize">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Initializes event handlers for the events in <see cref="T:EPiServer.Core.IContentEvents"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.ContentEventsOnPublishedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            When catalog content is published we need to clear the cache for all children of the catalog. 
            DefaultLanguage on CatalogContent determines MasterLanguage on child content.
            </summary>
            <param name="sender"></param>
            <param name="contentEventArgs"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.ContentEventsOnCreatedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            When we create entries as children to Products/Packages/Bundles the values of e.TargetLink (the product) and 
            e.Content.ParentLink (the actual parent (node/catalog)) differs. CMS will clear the cache for e.TargetLink. 
            We need to clear the cache for children of the actual parent (e.Content.ParentLink).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction">
            <summary>
            Defines flags that can be used to mask the <see cref="T:EPiServer.DataAccess.SaveAction"/> when working with catalog content
            and the content provider.
            Use the extension methods of <see cref="T:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions"/> to work with these extra flags.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction.ClearVersions">
            <summary>
            When this flag is set in the <see cref="T:EPiServer.DataAccess.SaveAction"/> used when saving a catalog content,
            any previously existing vesions will be deleted from the database, and no additional version
            data (except for the saved data itself) will be kept.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.IgnoreMetaDataPlusSynchronizationAttribute">
            <summary>
            This attribute is used on properties that should not be synchronized to the Meta Data Plus layer.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler">
            <summary>
            Handles move operations for nodes (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>) and entries (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Changes the parent of a catalog node or entry to a different catalog node or a catalog.
            </summary>
            <param name="contentLink">The link to the node or entry to change the parent of.</param>
            <param name="newParentLink">The link to the new parent.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.SetParentNodeForNode(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Changes the parent of a catalog node to a different catalog node or a catalog.
            </summary>
            <param name="contentLink">The link to the node to change the parent of.</param>
            <param name="newParentLink">The link to the new parent.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.SetParentNodeForEntry(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Changes the parent of a catalog entry to a different catalog node or a catalog.
            </summary>
            <param name="contentLink">The link to the entry to change the parent of.</param>
            <param name="newParentLink">The link to the new parent.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.GenerateSortOrderForLastRelation(System.Int32)">
            <summary>
            Generates the sort order for the last <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeEntryRelation"/> in this category.
            </summary>
            <param name="nodeId">The category id.</param>
            <remarks>For mocking purpose.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler.MoveCatalogNode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the catalog node to new parent, recursively.
            This function will update the parent catalog node id of the moving catalog node
            and catalog id (if needed) for all child objects of it.
            </summary>
            <param name="nodeId">The catalog node id.</param>
            <param name="newParentNodeId">The catalog node id to set as parent node for the node.</param>
            <param name="newCatalogId">
                The target catalog id. If this is different than the current catalog id, it will be set on the node,
                descendent nodes and node entry relations related to the node. For any primary node entry relations,
                the catalog id of the entries will also be updated.
            </param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Internal.IDraftVersionPostProcessor">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Responsibility for post-processing a draft version of catalog content.
            A common use case is trying to add the draft version to the current project mode when the project mode is enabled
            and there's an active project.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.IDraftVersionPostProcessor.Process(EPiServer.Core.ContentReference)">
            <summary>
            Processes a draft version of a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> after it had been saved to the database.
            </summary>
            <param name="contentReference">The content reference of the draft version to be processed.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Internal.DefaultDraftVersionPostProcessor">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Catalog.Provider.Internal.IDraftVersionPostProcessor"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Internal.SaveActionExtensions">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extension methods to work with <see cref="T:EPiServer.DataAccess.SaveAction"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Internal.SaveActionExtensions.GetPrimaryAction(EPiServer.DataAccess.SaveAction)">
            <summary>
            Gets the primary action of a combined save action.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Contains mappings between content type models and meta classes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap"/> class.
            </summary>
            <param name="contentTypeModelRepository">Service to work with content type models.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetContentTypeModel(System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Gets the content type model.
            </summary>
            <param name="metaClassId">The meta class id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetContentTypeModel(System.String)">
            <summary>
            Gets the content type model from the name (according to <see cref="T:Mediachase.Commerce.Catalog.Objects.EntryType"/>).
            </summary>
            <param name="baseEntryType">Type of the base entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetMetaClassName(System.Type)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Gets the name of the meta class from the a registered model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>The meta class name from the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/> of the type registered
            in the <see cref="T:EPiServer.DataAbstraction.ContentTypeRepository"/>, or null if it is not registered or lacks the attribute.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetMetaClassId(System.Type)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Gets the meta class id.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>The id of the meta class if found, otherwise 0.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.ThrowIfNotUnique(System.Collections.Generic.Dictionary{System.Type,System.String},System.String)">
            <summary>
            Throws an exception if the same meta class name is used on several content types.
            </summary>
            <param name="mappings">The existing mappings.</param>
            <param name="metaClassName">The name to check.</param>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.MetaDataChanged">
            <summary>
            Meta data changed event.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.RuntimeModel.IPropertyDefinitionTypeResolver,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler" /> class.
            </summary>
            <param name="metaDataPropertyResolver">The meta data property mapper.</param>
            <param name="propertyDefinitionSynchronizer">The property definition synchronizer.</param>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="propertyDefinitionRepository">The property definition repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler" /> class.
            </summary>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="propertyDefinitionRepository">The property definition repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.InitializeEvents">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Initializes event handlers for the events in <see cref="T:EPiServer.Commerce.MetaDataEventManager"/> and
            <see cref="T:Mediachase.Commerce.Catalog.EventContext"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.AlreadyInitialized">
            <summary>
            Gets flag to indicate whether this handler was initialized or not.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldUpdated(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            When a meta field was updated, let's sync the model properties.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The meta data update event arguments, which contains information regarding updated meta field.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldLink(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            Add the property definition model following the metaclass and metafield updated
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldUnlink(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            Remove the property definition model following the metaclass and metafield updated
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.IsIncludedInPropertyDefinitionModels(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel,System.String)">
            <summary>
            Determines whether a PropertyDefinitionModel with specific name is included in a ContentTypeModel.
            </summary>
            <param name="contentTypeModel">The content type model.</param>
            <param name="modelName">Name of the PropertyDefinitionModel.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.ClearCache">
            <summary>
            Clears content type and property definition caches.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.GetMetaClassName(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Get metaclass name from contentTypeModel
            </summary>
            <param name="contentTypeModel">The contentType model</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration">
            <summary>
            Keeps information related to properties corresponding to meta fields for catalog content
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration.GetReservedNames(System.Type)">
            <summary>
            Gets names of properties for that are treated separately from model
            specific meta data, e.g. "Code" which isn't a meta field but such a
            meta field name would conflict with the Code property.
            </summary>
            <param name="catalogContentModelType">Type of the content model.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Maps between meta data types and property data types.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper"/> class.
            </summary>
            <param name="objectSerializerFactory">The object serializer factory.</param>
            <param name="linkMapper">The link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.#ctor(EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper"/> class.
            </summary>
            <param name="linkMapper">The link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.GetPropertyDataType(Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Gets the property data type corresponding to a meta data type.
            </summary>
            <param name="metaDataType">The meta data type.</param>
            <returns>The corresponding property data type, or null if none can be found.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.AssignMetaFieldValueToProperty(EPiServer.Core.PropertyData,System.Object,Mediachase.MetaDataPlus.Configurator.MetaDataType,System.String)">
            <summary>
            Assigns the meta field value to the property.
            </summary>
            <param name="property">The property.</param>
            <param name="metaFieldValue">The meta field value.</param>
            <param name="metaDataType">The type of the meta field.</param>
            <param name="blockPropertyMetaFieldName">The name of the meta field, only needed when working with block properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.SetMetaObjectValueFromProperty(EPiServer.Core.PropertyData,Mediachase.MetaDataPlus.Configurator.MetaField,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Sets a property value to a meta field.
            </summary>
            <param name="property">The property to get the value from.</param>
            <param name="metaField">The meta field corresponding to the property.</param>
            <param name="metaObj">The meta object.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.ShouldBeStoredAsString(EPiServer.Core.PropertyData,System.Object)">
            <summary>
            Returns true only if the <paramref name="property" /> has a <see cref="T:EPiServer.Core.PropertyDataType" />
            which should be stored as string and the <paramref name="propertyValueForStoring" /> is not
            of a primitive type or a nullable primitive type.
            </summary>
            <param name="property">The property.</param>
            <param name="propertyValueForStoring">The property value in the storage (database) format
            as returned by PropertyData.SaveData.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.SetDefaultValue(Mediachase.MetaDataPlus.Configurator.MetaField,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Sets a valid default value for a required meta field that is not set.
            </summary>
            <param name="metaField">The meta field.</param>
            <param name="metaObj">The meta object to set the value in.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ParentsInfo">
            <summary>
            Holds information about a parent of a catalog content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.CatalogId">
            <summary>
            Gets or sets the catalog id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.EntryId">
            <summary>
            Gets or sets the entry id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.EntryType">
            <summary>
            Gets or sets the entry type.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter">
            <summary>
            Commits instances of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> to the ECF database.
            </summary>
            <remarks>This committer works with published version only. Use the ContentVersionCommitter to work with draft version.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.IApplicationContext)">
            <summary>
            Initializes a new instance of a catalog content committer.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context used when committing.</param>
            <param name="applicationContext">The application context.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ForContentType">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> to the ECF database.
            </summary>
            <remarks>By default, content will be synced back to content provider. In order prevent this, use the overload method with syncDraft flag instead, or modify the DisableVersionSync app setting.</remarks>
            <param name="content">The content to save.</param>
            <returns>The content reference of the saved content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Save(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> to the ECF database.
            </summary>
            <param name="content">The content to save.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The content reference of the saved content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates a new catalog corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new catalog.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Boolean)">
            <summary>
            Creates a new catalog corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The ID of the new catalog.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.CreateCatalogRow(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates a new catalog row using <paramref name="content"/>.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ValidateCreateCatalog(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Validates if it's possible to create a catalog.
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:EPiServer.Core.EPiServerException">If the parent isn't the root catalog.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Int32)">
            <summary>
            Updates an existing catalog.
            </summary>
            <param name="content">The catalog to update.</param>
            <param name="catalogId">The catalog id of the content that is being updated.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Int32,System.Boolean)">
            <summary>
            Updates an existing catalog.
            </summary>
            <param name="content">The catalog to update.</param>
            <param name="catalogId">The catalog id of the content that is being updated.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,Mediachase.Commerce.Catalog.Dto.CatalogDto)">
            <summary>
            Updates the static attributes on the specified catalog.
            </summary>
            <param name="content">The catalog content containing the values that should be used to update the catalog.</param>
            <param name="catalogDto">The catalog dto that should be updated.</param>
            <returns>The updated catalog dto.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ValidateName(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Int32)">
            <summary>
            Validates that the name of the catalog is unique.
            </summary>
            <param name="content">The catalog to validate.</param>
            <param name="catalogId">The id of the catalog.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes a catalog and everything it contains, except for things that are also associated
            with another catalog.
            </summary>
            <param name="contentLink">The catalog link to delete</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Commits changes for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instances to the ECF database.
             </summary>
             <remarks>This committer works with published version only. Use the ContentVersionCommitter to work with draft version.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator,Mediachase.Commerce.Catalog.Data.UniqueValueGenerator,EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter,EPiServer.Commerce.Catalog.Linking.IRelationRepository,Mediachase.Commerce.Assets.IAssetServiceEx,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,Mediachase.Commerce.IApplicationContext,EPiServer.Commerce.Catalog.Provider.Internal.CatalogContentMoveHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter" /> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="parentEvaluator">The parent evaluator.</param>
            <param name="uniqueValueGenerator">The unique value generator.</param>
            <param name="metaDataCommitter">The meta data committer.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="assetService">The asset service.</param>
            <param name="metaClassToContentTypeMap">The meta class to content type map.</param>
            <param name="applicationContext">The application context.</param>
            <param name="catalogContentMoveHandler">The catalog content move handler.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.ForContentType">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Saves the specified content, new or updated.
             </summary>
             <remarks>By default, content will be synced back to content provider. In order prevent this, use the overload method with syncDraft flag instead, or modify the DisableVersionSync app setting.</remarks>
             <param name="content">The content.</param>
             <returns>
             The content reference, newly generated if the content was new.
             </returns>
             <exception cref="T:System.ArgumentException">This class only supports content of the type specified by ForContentType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Saves the specified content, new or updated.
             </summary>
             <param name="content">The content.</param>
             <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
             <returns>
             The content reference, newly generated if the content was new.
             </returns>
             <exception cref="T:System.ArgumentException">This class only supports content of the type specified by ForContentType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Save(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes specific entry content.
            </summary>
            <param name="contentLink">The entry content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Int32)">
            <summary>
            Updates an existing entry.
            </summary>
            <param name="content">The entry.</param>
            <param name="entryId">The entry id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Int32,System.Boolean)">
            <summary>
            Updates an existing entry.
            </summary>
            <param name="content">The entry.</param>
            <param name="entryId">The entry id.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateExisting(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},System.Boolean)">
            <summary>
            Updates an existing entry.
            </summary>
            <param name="contents">The entries.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates a new entry corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new entry.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Boolean)">
            <summary>
            Creates a new entry corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The ID of the new entry.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateNew(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},System.Boolean)">
            <summary>
            Creates new entries.
            </summary>
            <param name="contents">The contents.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The collection of ID of the new entries.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.RefreshContentSeoData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.Int32)">
            <summary>
            After saving an <paramref name="entryDto"/>, the SEO data might be generated. We need to update generated SEO data to the <paramref name="content"/>.
            </summary>
            <param name="content">The entry content to update SEO data.</param>
            <param name="entryDto">The saved entry DTO, which contains SEO info.</param>
            <param name="entryId">The catalog entry id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.ValidateCode(System.String,System.Int32)">
            <summary>
            Validates the code.
            </summary>
            <param name="code">The code.</param>
            <param name="entryId">The entry Id.</param>
            <exception cref="T:System.ArgumentException">Thrown if the code is not unique.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateEntryRow(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Provider.ParentsInfo)">
            <summary>
            Creates a new entry row with values from the content and some required defaults.
            </summary>
            <param name="content">The content.</param>
            <param name="parentInfo">The parent info.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.Int32)">
            <summary>
            Updates the static attributes.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
            <param name="catalogEntryId">The catalog entry id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateSeoData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.Int32)">
            <summary>
            Update seo data from the content to the dto.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
            <param name="catalogEntryId">The entry id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.SetVariationData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Sets the variation data.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CommitAssets(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.Int32)">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Commits the assets.
             </summary>
             <param name="content">The content.</param>
             <param name="entry">The entry dto.</param>
             <param name="entryId">The entry id</param>
             <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.SetRelations(EPiServer.Commerce.Catalog.Provider.ParentsInfo,System.Int32)">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Sets the relations to the parent category, if one is selected, and to parent entry
             if the content is a variation of a product or part of a bundle or package.
             </summary>
             <param name="parentsInfo">The parents info.</param>
             <param name="entryId">The entry id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Describes a class which can save <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instances to their
            corresponding database format. Specifies what subtype it handles, so the best match
            can be used.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.ForContentType">
            <summary>
            Gets the type the committer can commit.
            </summary>
            <value>CatalogContentType</value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Saves the specified content, new or updated.
            </summary>
            <remarks>By default, content will be synced back to content provider. In order prevent this, use the overload method with syncDraft flag instead, or modify the DisableVersionSync app setting.</remarks>
            <param name="content">The content.</param>
            <returns>The content reference, newly generated if the content was new.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Save(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Boolean)">
            <summary>
            Saves a batch of content.
            </summary>
            <remarks>By default, content will be synced back to content provider. In order prevent this, use the overload method with syncDraft flag instead, or modify the DisableVersionSync app setting.</remarks>
            <param name="contents">The contents.</param>
            <param name="syncDraft">Flag to indicate if this action should sync drafts or not.</param>
            <returns>A list of content references for saved contents, newly generated if the content was new.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            Saves the specified content, new or updated.
            </summary>
            <param name="content">The content.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The content reference, newly generated if the content was new.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the specified content
            </summary>
            <param name="contentLink">The content link to delete</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits content property values to the corresponding meta data plus storage format.
            </summary>
            <remarks>This committer works with published version only. Use the ContentVersionCommitter to work with draft version.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,Mediachase.Commerce.Markets.IMarketService,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.MetaDataPlus.Internal.CatalogMetaObjectRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter" /> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="marketService">The market service.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogMetaObjectRepository">The meta object repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.CommitMetaAttributes``1(``0,System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Commits the meta attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content">The content.</param>
            <param name="objectId">The object ID.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.CommitMetaAttributes``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Commits the meta attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="contents">The content map.</param>
            <param name="objectId">The object id.</param>
            <param name="syncDraft">The flag to indicate if we should sync back to draft version or not.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.CommitMetaAttributes``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Commits the meta attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="contents">The content.</param>
            <param name="syncDraft">The flag to indicate if we should sync back to draft version or not.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.SetValueForField(EPiServer.Core.PropertyDataCollection,Mediachase.MetaDataPlus.Configurator.MetaField,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Sets meta field's value in a meta object from property collection
            </summary>
            <param name="properties">The property collection</param>
            <param name="metaField">The meta field</param>
            <param name="metaObj">The meta object</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits changes for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instances to the ECF database.
            </summary>
            <remarks>This committer works with published version only. Use the ContentVersionCommitter to work with draft version.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator,Mediachase.Commerce.Catalog.Data.UniqueValueGenerator,EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter,Mediachase.Commerce.Assets.IAssetServiceEx,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,Mediachase.Commerce.IApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter" /> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="parentEvaluator">The parent evaluator.</param>
            <param name="uniqueValueGenerator">The unique value generator.</param>
            <param name="metaDataCommitter">The meta data committer.</param>
            <param name="assetService">The asset service.</param>
            <param name="metaClassToContentTypeMap">The meta class to content type map.</param>
            <param name="applicationContext">The application context.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.ForContentType">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Saves the specified content, new or updated.
            </summary>
            <remarks>By default, content will be synced back to content provider. In order prevent this, use the overload method with syncDraft flag instead, or modify the DisableVersionSync app setting.</remarks>
            <param name="content">The content.</param>
            <returns>
            The content reference, newly generated if the content was new.
            </returns>
            <exception cref="T:System.ArgumentException">This class only supports content of the type specified by ForContentType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Saves the specified content, new or updated.
            </summary>
            <param name="content">The content.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>
            The content reference, newly generated if the content was new.
            </returns>
            <exception cref="T:System.ArgumentException">This class only supports content of the type specified by ForContentType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Save(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes specific node content.
            </summary>
            <param name="contentLink">The node content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,System.Int32)">
            <summary>
            Updates an existing node.
            </summary>
            <param name="content">The node.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateExisting(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.NodeContent},System.Boolean)">
            <summary>
            Updates an existing node.
            </summary>
            <param name="contents">The nodes.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,System.Int32,System.Boolean)">
            <summary>
            Updates an existing node.
            </summary>
            <param name="content">The node.</param>
            <param name="nodeId">The node id.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Creates a new node corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new node.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,System.Boolean)">
            <summary>
            Creates a new node corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <param name="syncDraft">Flag to indicate whether the saved content will be synced back to content provider.</param>
            <returns>The ID of the new node.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.RefreshContentSeoData(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.Int32)">
            <summary>
            After saving an <paramref name="nodeDto"/>, the SEO data might be generated. We need to update generated SEO data to the <paramref name="content"/>.
            </summary>
            <param name="content">The node content to update SEO data.</param>
            <param name="nodeDto">The saved node DTO, which contains SEO info.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.ValidateCode(System.String,System.Int32)">
            <summary>
            Validates the code.
            </summary>
            <param name="code">The code.</param>
            <param name="nodeId">The node Id.</param>
            <exception cref="T:System.ArgumentException">Thrown if the code is not unique.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CreateNodeRow(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,EPiServer.Commerce.Catalog.Provider.ParentsInfo)">
            <summary>
            Creates a new node row with values from the content and some required defaults.
            </summary>
            <param name="content">The content.</param>
            <param name="parentInfo">The parent info.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.Int32)">
            <summary>
            Updates the static attributes.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The node.</param>
            <param name="nodeId"></param>
            <returns>The updated <see cref="T:Mediachase.Commerce.Catalog.Dto.CatalogNodeDto"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateSeoData(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.Int32)">
            <summary>
            Update seo data from the content to the dto.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The node.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CommitAssets(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits the assets.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The node.</param>
            <param name="nodeId">The node id.</param>
            <returns>The updated <see cref="T:Mediachase.Commerce.Catalog.Dto.CatalogNodeDto"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Finds information about the parent (catalog, node...) from the content link.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator" /> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator" /> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.GetParentInfo(EPiServer.Core.ContentReference)">
            <summary>
            gets the parents info node or catalog parent and entry(in the case is based on a product) 
            </summary>
            <param name="parentLink"></param>
            <returns>The parents info</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ProviderUtility">
            <summary>
                Utility methods used by the provider classes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ProviderUtility.GetBlockName(System.String)">
            <summary>
                Gets the (top)block property name from a meta field name.
                Ex: "EPiBlock_MyBlock_MySubBlock_MyProperty" would return "MyBlock".
            </summary>
            <param name="metaFieldName">The name of the meta field.</param>
            <returns>The block name.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions">
            <summary>
            Extension methods to work with <see cref="T:EPiServer.DataAccess.SaveAction"/> together with <see cref="T:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions.SetExtendedActionFlag(EPiServer.DataAccess.SaveAction,EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction)">
            <summary>
            Sets the extended action bits on the action.
            </summary>
            <param name="baseAction">The base action.</param>
            <param name="extendedAction">The extended action.</param>
            <returns><see cref="T:EPiServer.DataAccess.SaveAction"/> with the bits from both <paramref name="baseAction"/>
            and <paramref name="extendedAction"/> set.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions.HasExtendedActionFlag(EPiServer.DataAccess.SaveAction,EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction)">
            <summary>
            Determines whether the action has the extended action bit(s) set.
            </summary>
            <param name="action">The action to query.</param>
            <param name="extendedAction">The extended action to query for.</param>
            <returns></returns>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader._mapUserKey">
            <summary>
            Gets or sets the map user key.
            </summary>
            <value>
            The map user key.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.ICurrentMarket,Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader" />.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="currentMarketService">The current market service.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference,System.DateTime)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="validOn">The date and time, in UTC, that the price is valid on.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference,Mediachase.Commerce.Currency,System.DateTime)">
             <summary>
             Gets the default price from the price service.
             </summary>
             <param name="contentLink">The content link for a catalog entry.</param>
             <param name="currency">The currency to use when receiving the price.</param>
            <param name="validOn">The date and time, in UTC, that the price is valid on.</param>
             <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency,System.DateTime)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <param name="validOn">The date and time, in UTC, that the price is valid on.</param>
            <returns>
            Price definition for the catalog entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference,Mediachase.Commerce.Currency)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="currency">The currency to use when receiving the price.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetCustomerPrices(EPiServer.Core.ContentReference)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetCustomerPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="currency">The currency to use when receiving the price. Use null or Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricings">List of the customer pricing. Pass emtpy list to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices from list of entry contents.
            </summary>
            <param name="entryContents">The entry contents.</param>
            <param name="marketId">The market id.</param>
            <param name="customerPricings">List of the customer pricings.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.PriceFilter)">
            <summary>
            Gets the prices from list of entry contents.
            </summary>
            <param name="entryContents">The entry contents.</param>
            <param name="marketId">The market id.</param>
            <param name="priceFilter">The price filter.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ThumbnailUrlResolver">
            <summary>
            Service to get thumbnail urls for content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.#ctor(EPiServer.IContentLoader,EPiServer.Web.IBlobResolver,EPiServer.Commerce.Catalog.AssetUrlResolver,EPiServer.Web.Routing.UrlResolver,EPiServer.Framework.Modules.IModuleResourceResolver,EPiServer.Web.IVirtualPathResolver)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Catalog.ThumbnailUrlResolver" />.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="blobResolver">The blob resolver.</param>
            <param name="assetUrlResolver">The asset url resolver.</param>
            <param name="urlResolver">The url resolver.</param>
            <param name="moduleResourceResolver">The module resource resolver.</param>
            <param name="virtualPathResolver">The virtual path resolver.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.GetThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.String)">
            <summary>
            Get relative url of the thumbnail from the asset of the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/>.
            </summary>
            <param name="content">The asset container.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The relative url for the content's thumbnail.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.GetThumbnailUrl(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Get relative url of the thumbnail from the asset of a content.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The relative url for the content's thumbnail.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.GetAbsoluteThumbnailUrl(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Get absolute url of the thumbnail from the asset of a content.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The absolute url for the content's thumbnail.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.HasBlobProperty(EPiServer.Core.IContentImage,System.String)">
            <summary>
            Check the <see cref="T:EPiServer.Core.IContentMedia"/> has property named <paramref name="propName"/> of <see cref="T:EPiServer.Framework.Blobs.Blob"/> type 
            and decorated with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute"/>.
            </summary>
            <param name="mediaContent">The instance of <see cref="T:EPiServer.Core.IContentImage"/> to check.</param>
            <param name="propName">Name of the property.</param>
            <returns><c>true</c> if there is a blob for this property; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetFullPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns "TheBTheC".
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property name to get.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetFullPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns "TheBTheC".
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property name to get.</param>
            <param name="separator">Optional separator between levels, defaults to no separator.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetExpressionPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns {"TheB", "TheC"}.
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property to get the path for.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetExpressionPath(System.Linq.Expressions.Expression)">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            Calling this method with the body of the expression a => a.TheB.TheC returns
            {"TheB", "TheC"}.
            </summary>
            <param name="expression">The expression body to get the path for.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.DateTimeExtensions.FormatTimeSince(System.DateTime)">
            <summary>
            Displays the time since an object was sent
            </summary>
            <param name="dateTime">The send time of the object</param>
            <returns>If time is within the current day, the time will be returned as number of hours and minutes,
            else the time will be returned as a short date string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.DateTimeExtensions.FormatTimeSince(System.DateTime,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Displays the time since an object was sent
            </summary>
            <param name="dateTime">The send time of the object</param>
            <param name="localizationService">The localization service.</param>
            <returns>If time is within the current day, the time will be returned as number of hours and minutes,
            else the time will be returned as a short date string</returns>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.IContentRepositoryExtensions">
            <summary> 
            Extensions methods for batch saving <see cref="T:EPiServer.IContentRepository"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.IContentRepositoryExtensions.Publish(EPiServer.IContentRepository,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase})">
            <summary>
            Publishes multiple catalog contents at once without syncing drafts.
            </summary>
            <param name="contentRepository">The instance of <see cref="T:EPiServer.IContentRepository"/> this extension method is used for.</param>
            <param name="contents">Contents to be saved.</param>
            <remarks>IMPORTANT! 
            This method bypasses the content publishing pipeline and therefore does not validate for error, nor fire content level events, nor handle versions.
            It does not create new versions, but commits data in the contents to the published versions.
            </remarks> 
        </member>
        <member name="M:EPiServer.Commerce.Extensions.IContentRepositoryExtensions.Publish(EPiServer.IContentRepository,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase},EPiServer.Commerce.Extensions.PublishAction)">
            <summary>
            Publishes multiple catalog contents at once.
            </summary>
            <param name="contentRepository">The instance of <see cref="T:EPiServer.IContentRepository"/> this extension method is used for.</param>
            <param name="contents">Contents to be saved.</param>
            <param name="publishAction">Flag for publish behavior.</param>
            <remarks>IMPORTANT! 
            This method bypasses the content publishing pipeline and therefore does not validate for error, nor fire content level events, nor handle versions.
            It does not create new versions, but commits data in the contents to the published versions.
            </remarks> 
        </member>
        <member name="M:EPiServer.Commerce.Extensions.PageExtensions.RegisterClientScriptFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers the client script file with this page using key and file relative path
            </summary>
            <param name="page">The asp.net template page</param>
            <param name="key">The unique key identifyer for the script. If an existing key is provided, nothing will be registered</param>
            <param name="rootRelativePath">Relative path of the file</param>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.PageExtensions.RegisterStyleSheetFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers the CSS file to the header of this page, using key and file relative path.
            This function only works with server side header of HTML page. Otherwise it will do nothing.
            </summary>
            <param name="page">The asp.net template page</param>
            <param name="key">The unique key identifyer for the CSS file. If an existing key is provided, nothing will be registered</param>
            <param name="rootRelativePath">relative path of the file</param>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.PublishAction">
            <summary> 
            Flag to indicate publish behavior.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Extensions.PublishAction.None">
            <summary>
            Just save data, nothing more.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Extensions.PublishAction.SyncDraft">
            <summary>
            Sync data with drafts.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions">
            <summary>  
            Makes EPiServer.Commerce services part of the public API.  
            </summary>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.CurrentMarket(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.ICurrentMarket"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.ICurrentMarket"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.MarketService(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.Markets.IMarketService"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.Markets.IMarketService"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.CatalogSystem(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.FormatContentText(System.String)">
            <summary>
            Formats content text for HTML output
            </summary>
            <param name="text">The text to format</param>
            <returns>The formatted text</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.JavascriptEncode(System.String)">
            <summary>
            Gets the string that is suitable for use in client script
            </summary>
            <param name="source">The source.</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.StripPreviewText(System.String,System.Int32)">
            <summary>
            Strips a text to a given length without splitting the last word.
            </summary>
            <param name="source">The source string.</param>
            <param name="maxLength">Max length of the text</param>
            <returns>A shortened version of the given string</returns>
            <remarks>Will return empty string if input is null or empty</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToHtmlEncoded(System.String)">
            <summary>
            Get the string that is suitable for
            display on web page
            </summary>
            <param name="source">The source.</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToJavaScriptEncoded(System.String)">
            <summary>
            Get the string that is suitable for
            use in client script
            </summary>
            <param name="source">The source.</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToShorten(System.String)">
            <summary>
            If a string is too long (exceed shortStringSize), this function shorten it.
            </summary>
            <param name="source">The source.</param>
            <returns>shorten string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToShorten(System.String,System.Int32,System.Boolean)">
            <summary>
            If a string is too long (exceed shortStringSize), this function shorten it.
            <remarks>
            If maxsize less or equal 3, we cannot use DotDotDot.
            If source.Length is less than maxSize, we leave the sourse string unchanged.
            </remarks>
            </summary>
            <param name="source">The source.</param>
            <param name="maxSize">Max size of the returned string. If maxSize is negative, return string.Empty</param>
            <param name="useDotDotDot">use trailing ... (triple dot) or not</param>
            <returns>shorten string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the specified source contains value incasesensitive.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified source contains value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Argument Null Exception when soure is null or value is null</exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderRepositoryExtensions">
            <summary>
            Extension method for <see cref="T:EPiServer.Commerce.Order.IOrderRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderRepositoryExtensions.Create``1(EPiServer.Commerce.Order.IOrderRepository,System.String)">
            <summary>
            Creates an order for the current user.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <param name="name">Ther order name.</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderRepositoryExtensions.Load(EPiServer.Commerce.Order.IOrderRepository)">
            <summary>
            Loads all orders for the current user.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderRepositoryExtensions.Load``1(EPiServer.Commerce.Order.IOrderRepository)">
            <summary>
            Loads all orders for the current user.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderRepositoryExtensions.Load``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid)">
            <summary>
            Loads all orders with default name of a specific type for a customer.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <param name="customerId">The customer guid.</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderRepositoryExtensions.Load(EPiServer.Commerce.Order.IOrderRepository,System.Guid)">
            <summary>
            Loads all orders with default name for a customer.
            </summary>
            <param name="customerId">The customer guid.</param>
            <param name="orderRepository">The order repository.</param>
            <returns>The orders.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator">
            <summary>
             The default line item calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.#ctor(EPiServer.Commerce.Order.ITaxCalculator)">
            <summary>
            Initialize a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator"/> class.
            </summary>
            <param name="taxCalculator">The tax calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.GetExtendedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the extended price of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item to calculate the extended price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="LineItemGetExtendedPrice" lang="cs" />
            </example>
            <returns>The rounded extended price.</returns>
            <exception cref="T:System.Exception">Thrown when calculation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.GetDiscountedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the discounted price of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="LineItemGetDiscountedPrice" lang="cs" />
            </example>
            <returns>The line item discounted price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.GetLineItemPrices(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the extended and discounted prices of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="LineItemGetLineItemPrices" lang="cs" />
            </example>
            <returns>The prices for the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.GetSalesTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Gets the sales tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="LineItemGetSalesTax" lang="cs" />
            </example>
            <returns>The sales tax for the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.GetSalesTax(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Gets the sales tax of a collection of <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s.
            </summary>
            <param name="lineItems">The line items.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="LineItemGetSalesTaxes" lang="cs" />
            </example>
            <returns>The sales tax for the line items.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.CalculateExtendedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the extended price of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item to calculate the extended price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The rounded extended price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.ValidateExtendedPrice(Mediachase.Commerce.Money)">
            <summary>
            Validates the extended price.
            </summary>
            <param name="money">The calculated value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.CalculateDiscountedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the discounted price of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item to calculate the discounted price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The discounted price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.ValidateDiscountedPrice(Mediachase.Commerce.Money)">
            <summary>
            Validates the discounted price.
            </summary>
            <param name="money">The calculated value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.CalculateSalesTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Calculates sales tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <returns>The sales tax for the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.CalculateSalesTax(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Calculates sales tax of a collection of <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s.
            </summary>
            <param name="lineItems">The line items.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <returns>The sales taxes for a group of line items.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultLineItemCalculator.ValidateSalesTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the sales tax.
            </summary>
            <param name="money">The sales tax.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator">
            <summary>
            The default order form calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.#ctor(EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.ITaxCalculator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator"/> class.
            </summary>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="taxCalculator">The tax calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.#ctor(EPiServer.Commerce.Order.IShippingCalculator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator"/> class.
            </summary>
            <param name="shippingCalculator">The shipping calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total for the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetTotal" lang="cs" />
            </example>
            <returns>The total for the order form.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetSubTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total of all shipments in the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency to be used in the calculation</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetSubTotal" lang="cs" />
            </example>
            <returns>The subtotal for the order form.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetHandlingTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the handling total for the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency to be used in the calculations</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetHandlingTotal" lang="cs" />
            </example>
            <returns>returns 0</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetShippingSubTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping subtotal of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetShippingSubTotal" lang="cs" />
            </example>
            <returns>The shipping subtotal of the order form with full precision.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order form discount price.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetOrderDiscountTotal" lang="cs" />
            </example>
            <returns>The order form discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetDiscountTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order form discount total.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetDiscountTotal" lang="cs" />
            </example>
            <returns>The order form discount total.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetOrderFormTotals(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order form totals.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetOrderFormTotals" lang="cs" />
            </example>
            <returns>An order form totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.GetTaxTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderFormGetTaxTotal" lang="cs" />
            </example>
            <returns>The total tax of the order form with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.CalculateTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the total for the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total for the order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.ValidateTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.CalculateSubtotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the total of all shipments in the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency to be used in the calculation</param>
            <returns>The subtotal for the order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.ValidateSubtotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the subtotal.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.CalculateHandlingTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the handling total for the order form. It's intended be overridden.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>returns 0</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.ValidateHandlingTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the handling total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.CalculateShippingSubTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the shipping subtotal of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The shipping subtotal of the order form with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.ValidateShippingSubTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping subtotal.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.CalculateTaxTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates tax total of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The tax total of the order form with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderFormCalculator.ValidateTaxTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the tax total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator">
            <summary>
             The default order group calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.#ctor(EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Order.IReturnOrderFormCalculator,Mediachase.Commerce.Markets.IMarketService)">
             <summary>
             Creates a new instance of <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator"/>.
             </summary>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="returnOrderFormCalculator">The return order form calculator.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetTotal" lang="cs" />
            </example>
            <returns>Rounded valur for the total of the order group.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the subtotal of all order forms in the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetSubTotal" lang="cs" />
            </example>
            <returns>Rounded value for the total of all order forms in the order.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetHandlingTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the handling total for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetHandlingTotal" lang="cs" />
            </example>
            <returns>The handling total of the order group.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown when calculation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetShippingSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the shipping subtotal of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetShippingSubTotal" lang="cs" />
            </example>
            <returns>Rounded value for the shipping subtotal of the order group.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="currency">The currency.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetOrderDiscountTotal" lang="cs" />
            </example>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetOrderGroupTotals(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the order group totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetOrderGroupTotals" lang="cs" />
            </example>
            <returns>An order group totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.GetTaxTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the tax total of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="OrderGroupGetTaxTotal" lang="cs" />
            </example>
            <returns>Rounded value for the tax toal of the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates the total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The total for the order group with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.ValidateTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates the subtotal for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The subtotal of the order group with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.ValidateSubTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the subtotal.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateHandlingTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates the handling total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The handling total of the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.ValidateHandlingTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the handling total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateShippingSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates shipping subtotal of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The shipping subtotal of the order group with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.ValidateShippingSubTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping subtotal.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.CalculateTaxTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Calculates tax total of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The tax total of the order group with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupCalculator.ValidateTaxTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the tax total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupTotalsCalculator">
            <summary>
            Calculates the total values from all the information on an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupTotalsCalculator.#ctor(EPiServer.Commerce.Order.IOrderGroupCalculator,EPiServer.Commerce.Order.ITaxCalculator,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupTotalsCalculator"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupTotalsCalculator.GetTotals(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets order group totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>An order group totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultOrderGroupTotalsCalculator.UpdateProperties(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.OrderGroupTotals)">
            <summary>
            Updates properties on the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> that need updated calculated totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupTotals">The order group totals.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
            
             The default return line item calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.#ctor(EPiServer.Commerce.Order.ITaxCalculator)">
            <summary>
            Initialize a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator"/> class.
            </summary>
            <param name="taxCalculator">The tax calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.GetExtendedPrice(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the extended price for an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="returnLineItem">The return line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnLineItemGetExtendedPrice" lang="cs" />
            </example>
            <returns>The rounded extended price of the return line item.</returns>
            <exception cref="T:System.Exception">Thrown when calculation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.GetDiscountedPrice(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the discounted price for an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="returnLineItem">The return line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnLineItemGetDiscountedPrice" lang="cs" />
            </example>
            <returns>The discounted price of the return line item.</returns>
            <exception cref="T:System.Exception">Thrown when calculation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.GetSalesTax(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Gets sales tax for the return line item.
            </summary>
            <param name="returnLineItem">The return line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnLineItemGetSalesTax" lang="cs" />
            </example>
            <returns>The sales tax for the return line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.GetLineItemPrices(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the extended and discounted prices of an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="returnLineItem">The return line item to calculate the extended price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnLineItemGetLineItemPrices" lang="cs" />
            </example>
            <returns>The prices for the return line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.CalculateExtendedPrice(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the extended price for an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="returnLineItem">The return line item to calculate the extended price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The rounded extended price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.CalculateDiscountedPrice(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the discounted price for an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="returnLineItem">The return line item to calculate the extended price for.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The discounted price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.CalculateSalesTax(EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Calculates sales tax for the return line item.
            </summary>
            <param name="returnLineItem">The return line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <param name="shippingAddress">The shipping address to be used in the calculations.</param>
            <returns>The sales tax for the return line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.ValidateExtendedPrice(Mediachase.Commerce.Money)">
            <summary>
            Validates the extended price.
            </summary>
            <param name="money">The calculated value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.ValidateDiscountedPrice(Mediachase.Commerce.Money)">
            <summary>
            Validates the discounted price.
            </summary>
            <param name="money">The calculated value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnLineItemCalculator.ValidateSalesTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the sales tax.
            </summary>
            <param name="money">The calculated value.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator">
            <summary>
            The default return order form calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.#ctor(EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.ITaxCalculator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator"/> class.
            </summary>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="taxCalculator">The tax calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.#ctor(EPiServer.Commerce.Order.IShippingCalculator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator"/> class.
            </summary>
            <param name="shippingCalculator">The shipping calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total for an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetTotal" lang="cs" />
            </example>
            <returns>The total for the return order form.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetSubTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total of all shipments in an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetSubTotal" lang="cs" />
            </example>
            <returns>The subtotal for the return order form.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetHandlingTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the handling total for an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetHandlingTotal" lang="cs" />
            </example>
            <returns>return 0.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetOrderDiscountTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the discount price of an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetOrderDiscountTotal" lang="cs" />
            </example>
            <returns>The discount price of the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetDiscountTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Gets the discount total of an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetDiscountTotal" lang="cs" />
            </example>
            <returns>The discount total from all return items in the return order form, excepts shipment discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetReturnTaxTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets sales tax total for the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ReturnOrderFormGetReturnTaxTotal" lang="cs" />
            </example>
            <returns>The sales tax total for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.GetReturnOrderFormTotals(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order form totals for an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency.</param>
            <returns>An order form totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.CalculateTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the total for the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.CalculateSubtotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the total of all shipments in the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The subtotal for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.ValidateSubtotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the subtotal.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.CalculateHandlingTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the handling total for the return order form. It's intended be overridden.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The handling total for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.ValidateHandlingTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the handling total
            </summary>
            <param name="money">The calculated value</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.CalculateReturnTaxTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the sales tax total of the <paramref name="returnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The sales tax total of the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnOrderFormCalculator.ValidateReturnTaxTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the tax total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
            
             The return order calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator.#ctor(EPiServer.Commerce.Order.IReturnOrderFormCalculator,EPiServer.Commerce.Order.IOrderGroupCalculator,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Marketing.IPromotionEngine,Mediachase.Commerce.Markets.IMarketService)">
             <summary>
             Creates a new instance of <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator"/>
             </summary>
            <param name="returnOrderFormCalculator">The return order form calculator.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator.CalculateReturnTotal(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm,System.Boolean)">
            <summary>
            Calculates the return total of an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="purchaseOrder">The origin purchase order where the return form belongs to.</param>
            <param name="returnOrderForm">The return order form.</param>
            <param name="isCompletingReturnForm">The flag indicating whether the return form is being completed.</param>
            <returns>The return total for an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator.GetInvalidatedPromotions(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm,System.Boolean)">
            <summary>
            Get promotions which are no longer applicable to an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> because an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> was added to the order.
            </summary>
            <param name="purchaseOrder">The origin purchase order where the return form belongs to.</param>
            <param name="returnOrderForm">The return order form.</param>
            <param name="isCompletingReturnForm">The flag indicating whether the return form is being completed.</param>
            <returns>The invalidated promotions of the <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator.GetOrderTotal(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Gets the total of a purchase order.
            </summary>
            <remarks>
            The calculation related to Return does not take shipping related values into account, including the shipping cost and shipment level discount amount.
            Formula:
            GetSubTotal + GetHandlingTotal - GetOrderDiscountTotal (+ SalesTax, if the PricesIncludeTax setting is false)
            </remarks>
            <returns>The total for returns.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultReturnPurchaseOrderCalculator.GetExcludedLineItems(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm,System.Boolean)">
            <summary>
            Get LineItems to remove from Return Total calculation.
            </summary>
            <param name="order">The origin purchase order.</param>
            <param name="currentReturnForm">The current return form of order.</param>
            <param name="isCompletingReturnForm"><c>true</c> if completing return form, otherwise, <c>false</c> .</param>
            <returns>LineItems to remove from Return Total calculation.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator">
            <summary>
            The default shipping calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.#ctor(EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator)">
            <summary>
            Initialize a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator"/> class.
            </summary>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.#ctor(EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.ITaxCalculator,EPiServer.ServiceLocation.ServiceCollectionAccessor{Mediachase.Commerce.Orders.IShippingPlugin},EPiServer.ServiceLocation.ServiceCollectionAccessor{Mediachase.Commerce.Orders.IShippingGateway})">
            <summary>
            Initialize a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator"/> class.
            </summary>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="taxCalculator">The tax calculator.</param>
            <param name="shippingPluginsAccessor"></param>
            <param name="shippingGatewaysAccessor"></param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingCost(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping cost of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping cost of the order group.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingCost(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping cost of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping cost of the order form.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingCost(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping cost of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetShippingCost" lang="cs" />
            </example>
            <returns>The shipping cost of the shipment with full precision.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingItemsTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total of prices of all line items in an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetShippingItemsTotal" lang="cs" />
            </example>
            <returns>The subtotal of the shipment.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingReturnItemsTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total of prices of all return line items in an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            The shipment must belong to an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetShippingReturnItemsTotal" lang="cs" />
            </example>
            <returns>The return subtotal of the shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetDiscountedShippingAmount(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping cost with all shipping discounts applied of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetDiscountedShippingAmount" lang="cs" />
            </example>
            <returns>The discounted subtotal of the shipment.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShipmentDiscountPrice(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipment discount.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency.</param>
            <returns>The shipment discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingTotals(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping totals of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetShippingTotals" lang="cs" />
            </example>
            <returns>A shipping totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetReturnShippingTotals(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping totals of a return <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetReturnShippingTotals" lang="cs" />
            </example>
            <returns>A shipping totals of a return <see cref="T:EPiServer.Commerce.Order.IShipment"/> that excludes value of shipping cost and shipping tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping tax of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetShippingTax" lang="cs" />
            </example>
            <returns>The shipping tax of the shipment with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetSalesTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the sales tax of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetSalesTax" lang="cs" />
            </example>
            <returns>The sales tax of the shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetReturnShippingTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping tax for an <see cref="T:EPiServer.Commerce.Order.IShipment"/> that contains <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            The shipment must belong to an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="shipment">The return shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetReturnShippingTax" lang="cs" />
            </example>
            <returns>The shipping tax of the return shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetReturnSalesTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the sales tax for an <see cref="T:EPiServer.Commerce.Order.IShipment"/> that contains <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            The shipment must belong to an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="shipment">The return shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="ShippingGetReturnSalesTax" lang="cs" />
            </example>
            <returns>The sales tax of the return shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingCost(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets shipping cost of the <paramref name="orderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping cost of the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateShippingCostForOrder(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping cost.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingCost(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the shipping cost of the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping cost of the order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateShippingCostForOrderForm(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping cost.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.GetShippingMethods">
            <summary>
            Gets all the shipping methods in the system.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingCost(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the shipping cost for the <paramref name="shipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The subtotal of the shipment with full precision.</returns>
            <exception cref="T:System.InvalidOperationException">The currency returned from the shipping provider cannot be converted to the <paramref name="currency"/>.</exception>
            <exception cref="T:System.TypeInitializationException">The shipping method points to an unexisting class name.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CanBeConverted(Mediachase.Commerce.Money,Mediachase.Commerce.Currency)">
            <summary>
            Determines whether the result can be converted to a specific currency.
            </summary>
            <param name="moneyFrom">The money from.</param>
            <param name="currencyTo">The currency to.</param>
            <returns>
            	<c>true</c> if the result can be converted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateShippingCostForShipment(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping cost.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingItemsTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the subtotal for all line items in an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The subtotal of the shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingReturnItemsTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the total of prices for all return line items in an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The return subtotal of the shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateShippingItemTotal(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping item total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateShippingTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the shipping tax of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping tax with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateSalesTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the sales tax of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The sales tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateReturnShippingTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the shipping tax of all return line items of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The return shipping tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.CalculateReturnSalesTax(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the sales tax of all return line items of an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The return sales tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateShippingTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping tax.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultShippingCalculator.ValidateSalesTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the sales tax.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If validation fails.</exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator">
            <summary>
            The default tax calculator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.#ctor(EPiServer.IContentRepository,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator"/> class.
            </summary>
            <param name="contentRepository">The content Repository.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.#ctor(EPiServer.IContentRepository,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator"/> class.
            </summary>
            <param name="contentRepository">The content Repository.</param>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetTaxTotal(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <remarks>
            Gets the result by looping over all order forms and calling GetTaxTotal.
            </remarks>
            <returns>The total tax for the order.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetTaxTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total for the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total tax for the order form</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetReturnTaxTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total for an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The total tax for the return order form.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetShippingTaxTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping tax total for the shipment.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping tax for the shipment.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetShippingReturnTaxTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total for a return shipment that contains <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="shipment">The return shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The shipping tax for the return shipment.</returns>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetSalesTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Money)">
            <summary>
            Gets the sales tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="basePrice">The base price.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="TaxGetSalesTax" lang="cs" />
            </example>
            <returns>The sales tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetSalesTax(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Currency)">
            <summary>
            Gets the sales tax of a collection of <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s.
            </summary>
            <param name="lineItems">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="currency">The currency.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="TaxGetSalesTax" lang="cs" />
            </example>
            <returns>The sales tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetShippingTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Money)">
            <summary>
            Gets the shipping tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="basePrice">The base price.</param>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Orders/OrderCalculatorsSample.cs" region="TaxGetShippingTax" lang="cs" />
            </example>
            <returns>The shipping tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateTaxTotal(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <remarks>
            Gets the result by looping over all order forms and calling GetTaxTotal.
            </remarks>
            <returns>The total tax for the order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.ValidateTaxTotalForOrder(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping item total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateTaxTotal(EPiServer.Commerce.Order.IOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total for the order form.
            </summary>
            <param name="orderForm">The order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total tax for the order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.ValidateTaxTotalForOrderForm(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping item total.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateReturnTaxTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the tax total for the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total tax for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateShippingTaxTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping tax total for the shipment.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The shipping tax for the shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateShippingReturnTaxTotal(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the shipping tax total for the return shipment that contains <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>s.
            </summary>
            <param name="shipment">The return shipment.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>        
            <returns>The shipping tax for the return shipment.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateSalesTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Money)">
            <summary>
            Calculates the sales tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="basePrice">The base price.</param>
            <returns>The sales tax.</returns>
            <remarks>
            IMPORTANT - It will take the <see cref="P:EPiServer.Commerce.Order.IOrderGroup.PricesIncludeTax"/> setting on the order where the line item belongs to into account when calculating the sales tax.
            This means that if the value is <c>True</c>, then sales tax will be calculated based on the assumption that <paramref name="basePrice"/> already includes tax.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateSalesTax(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Currency)">
            <summary>
            Calculates the sales tax of a collection of <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s.
            </summary>
            <param name="lineItems">The line items</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="currency">The currency.</param>
            <returns>The sales tax.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetExtendedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the extended price of the line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="currency">The currency.</param>
            <returns>The discounted price of the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.ValidateSalesTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the sales tax.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.CalculateShippingTax(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,EPiServer.Commerce.Order.IOrderAddress,Mediachase.Commerce.Money)">
            <summary>
            Calculates the shipping tax of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="shippingAddress">The shipping address.</param>
            <param name="basePrice">The base price.</param>
            <returns>The shipping tax.</returns>
            <remarks>
            IMPORTANT - It will take the <see cref="P:EPiServer.Commerce.Order.IOrderGroup.PricesIncludeTax"/> setting on the order where the line item belongs to into account when calculating the shipping tax.
            This means that if the value is <c>True</c>, then shipping tax will be calculated based on the assumption that <paramref name="basePrice"/> already includes tax.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.ValidateShippingTax(Mediachase.Commerce.Money)">
            <summary>
            Validates the shipping tax.
            </summary>
            <param name="money">The calculated value.</param>
            <exception cref="N:System.ComponentModel.DataAnnotations">If validation fails.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetTaxValues(System.String,System.String,EPiServer.Commerce.Order.IOrderAddress)">
            <summary>
            Gets the tax values.
            </summary>
            <param name="taxCategory">The tax category.</param>
            <param name="languageCode">The language code.</param>
            <param name="orderAddress">The order address.</param>
            <returns>The tax values.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetTaxCategoryName(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets the tax category name from the line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns>The tax category name.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Calculator.DefaultTaxCalculator.GetTaxCategoryNameById(System.Int32)">
            <summary>
            Gets the tax category name by tax category id.
            </summary>
            <param name="taxCategoryId">The tax category id.</param>
            <returns>The tax category name.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultFulfillmentWarehouseProcessor">
            <summary>
            Gets <see cref="T:Mediachase.Commerce.Inventory.IWarehouse"/> for <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultInventoryProcessor">
            <summary>
            Processes inventory requests for <see cref="T:Mediachase.Commerce.InventoryService.InventoryRecord"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultInventoryProcessor.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Internal.LineItemQuantityValidator,EPiServer.Commerce.Internal.InventoryRequester,EPiServer.Commerce.Order.IFulfillmentWarehouseProcessor,Mediachase.Commerce.InventoryService.IInventoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.DefaultInventoryProcessor" /> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="lineItemQuantityValidator">The line item inventory validator.</param>
            <param name="inventoryRequester">The inventory requester.</param>
            <param name="fulfillmentWarehouseProcessor">The fulfillment warehouse processor.</param>
            <param name="inventoryService">The inventory service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultInventoryProcessor.UpdateInventoryOrRemoveLineItem(EPiServer.Commerce.Order.IShipment,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates and or updates the inventory for the shipment. Removes the line item if no available inventory.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultInventoryProcessor.AdjustInventoryOrRemoveLineItem(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Orders.OrderStatus,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Adjusts the inventory for shipment by reserving or completing reservation to the <see cref="T:Mediachase.Commerce.InventoryService.IInventoryService"/>. Removes the line item if no available inventory.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="orderStatus">The order status.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultLineItemValidator">
            <summary>
            Validates a <see cref="T:EPiServer.Commerce.Order.ILineItem"/> to make sure the line item is still valid to be purchased.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Core.IPublishedStateAssessor)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.DefaultLineItemValidator" /> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="publishedStateAssessor">The published state assessor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.Validate(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.MarketId,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the specified line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="marketId">The market id.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <returns><c>True</c> if it passes all validations without error, <c>False</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.IsValidMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.IMarket)">
            <summary>
            Determines whether is valid market for the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="market">The market.</param>
            <returns>True if market is valid.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.IsValidMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.MarketId)">
            <summary>
            Determines whether is valid market for the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="marketId">The market id.</param>
            <returns>True if market is valid.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.IsValidCatalog(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.DateTime)">
            <summary>
            Determines whether is valid catalog for the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="requestDate">The request date.</param>
            <returns>True if the catalog is valid.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultLineItemValidator.IsValidEntry(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Determines whether is valid entry for the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns><c>True</c> if the entry is valid, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultOrderNumberGenerator">
            <summary>
            Default order number generator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderNumberGenerator.GenerateOrderNumber(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Generates order number.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The order number.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultOrderRepository">
            <summary>
            Default repository for <see cref="T:EPiServer.Commerce.Order.ICart"/>, <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>, and <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>./>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.#ctor(EPiServer.Commerce.Order.ICartProvider,EPiServer.Commerce.Order.IPurchaseOrderProvider,EPiServer.Commerce.Order.IPaymentPlanProvider,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IOrderRepositoryCallback})">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Order.DefaultOrderRepository" />.
            </summary>
            <param name="cartProvider">The cart provider.</param>
            <param name="purchaseOrderProvider">The purchase order provider.</param>
            <param name="paymentPlanProvider">The payment plan provider.</param>
            <param name="objectInstanceCache">The object instance cache</param>
            <param name="orderRepositoryCallback">The order repository callback.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Create``1(System.Guid,System.String)">
            <summary>
            Creates an order.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="customerId">The customer guid.</param>
            <param name="name">The name of the order.</param>
            <returns>The created order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderLink">The order link.</param>
            <returns>The order.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load``1(System.Int32)">
            <summary>
            Loads an order.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="orderGroupId">The order group id.</param>
            <returns>The order.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load``1(System.Guid,System.String)">
            <summary>
            Loads all orders of a specific type for a customer.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load(System.String)">
            <summary>
            Loads a specific purchase order by the tracking number.
            </summary>
            <param name="trackingNumber">The tracking number.</param>
            <returns>
            The matching <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load(System.Guid,System.String)">
            <summary>
            Loads all orders for a customer.
            </summary>
            <param name="customerId">The customer guid.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Save(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves the order.
            </summary>
            <param name="order">The order.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.SaveAsPaymentPlan(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves as payment plan.
            </summary>
            <param name="cart">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.SaveAsPurchaseOrder(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves as purchase order.
            </summary>
            <param name="cart">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultPaymentProcessor">
            <summary>
            Processes <see cref="T:EPiServer.Commerce.Order.IPayment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultPaymentProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.DefaultPaymentProcessor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultPaymentProcessor.ProcessPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Processes the payment.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
            <param name="shipment">The shipment.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultPlacedPriceProcessor">
            <summary>
            Service for updating and retrieving <see cref="P:EPiServer.Commerce.Order.ILineItem.PlacedPrice"/> for <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultPlacedPriceProcessor.UpdatePlacedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates the <see cref="T:EPiServer.Commerce.Order.ILineItem"/> item placed price or raises <see cref="T:EPiServer.Commerce.Order.ValidationIssue"/> if there is no valid price.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <returns>False if is there is no valid price</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultPlacedPriceProcessor.GetPlacedPrice(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Decimal,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency)">
            <summary>
            Gets the placed price.
            </summary>
            <param name="entry">The entry.</param>
            <param name="quantity">The quantity.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <returns>A <see cref="T:Mediachase.Commerce.Money"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultReturnOrderNumberGenerator">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
            
            Default return order number generator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderNumberGenerator.GenerateReturnOrderFormNumber(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Generates return order form number.
            </summary>
            <param name="purchaseOrder">The purchase order where the return form belongs to.</param>
            <returns>The return order form number.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderNumberGenerator.GenerateExchangeOrderNumber(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Generates the exchange order number.
            </summary>
            <param name="exchangeOrder">The exchange order.</param>
            <returns>The exchange order number.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultReturnOrderService">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
             
            Handles operations on <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> such as complete, cancel a return or acknowledge receipt items of a return.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.#ctor(EPiServer.Commerce.Order.IOrderRepository,EPiServer.Commerce.Order.IOrderGroupCalculator,EPiServer.Commerce.Order.IReturnOrderFormCalculator,EPiServer.Commerce.Order.IInventoryProcessor,EPiServer.Commerce.Order.IPurchaseOrderFactory,EPiServer.Commerce.Order.IReturnOrderNumberGenerator,EPiServer.Commerce.Marketing.IPromotionEngine,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.DefaultReturnOrderService"/> class.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="returnOrderFormCalculator">The return order form calculator.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
            <param name="purchaseOrderFactory">The purchase order factory.</param>
            <param name="returnOrderNumberGenerator">The return order number generator.</param>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.AcknowledgeReceiptOfItems(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Acknowledges receipt of items of an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.CancelReturn(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Cancels a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.CompleteReturn(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Completes an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="purchaseOrder">The purchase order that the return form was created for.</param>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.CreateExchangeOrder(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Creates an exchange order for an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="purchaseOrder">The purchase order that the exchange order is created for.</param>
            <param name="originalShipment">The original shipment that contains items that need to be returned.</param>
            <returns>The exchange order of type <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.InvalidatePromotions(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Invalidates promotions which are no longer applicable after returning items.
            </summary>
            <param name="purchaseOrder">The original <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</param>
            <param name="returnOrderForm">The current <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm" /> in the <paramref name="purchaseOrder"/>.</param>
            <remarks>
            It will update the <see cref="P:EPiServer.Commerce.Order.IOrderForm.Promotions"/> of the <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>
            Also it will update the discount amount of <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>s of the <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultReturnOrderService.CalculateExchangePaymentTotal(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Calculates the exchange payment total.
            </summary>
            <param name="purchaseOrder">The origin purchase order.</param>
            <param name="exchangeOrder">The exchange order.</param>
            <param name="returnForm">The return order form.</param>
            <returns>The exchange payment total.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.ICartProvider">
            <summary>
            Handles loading and persistence for <see cref="T:EPiServer.Commerce.Order.ICart"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.ICartProvider.SaveAsPurchaseOrder(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves the <see cref="T:EPiServer.Commerce.Order.ICart"/> as <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="cart">The <see cref="T:EPiServer.Commerce.Order.ICart"/>.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.ICartProvider.SaveAsPaymentPlan(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves the <see cref="T:EPiServer.Commerce.Order.ICart"/> as <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
            <param name="cart">The <see cref="T:EPiServer.Commerce.Order.ICart"/>.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IFulfillmentWarehouseProcessor">
            <summary>
            Gets <see cref="T:Mediachase.Commerce.Inventory.IWarehouse"/> for <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IInventoryProcessor">
            <summary>
            Processes inventory requests for <see cref="T:Mediachase.Commerce.InventoryService.InventoryRecord"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IInventoryProcessor.UpdateInventoryOrRemoveLineItem(EPiServer.Commerce.Order.IShipment,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates and or updates the inventory for the shipment. Removes the line item if no available inventory.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IInventoryProcessor.AdjustInventoryOrRemoveLineItem(EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Orders.OrderStatus,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Adjusts the inventory for shipment by reserving or completing reservation to the <see cref="T:Mediachase.Commerce.InventoryService.IInventoryService"/>. Removes the line item if no available inventory.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="orderStatus">The order status.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.ILineItemExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Order.ILineItem"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.ILineItemExtensions.GetEntryContent(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader)">
            <summary>
            Gets the entry content from the line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> for the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.ILineItemExtensions.GetEntryContent(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets the entry content from the line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> for the line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.ILineItemExtensions.GetEntryDiscount(EPiServer.Commerce.Order.ILineItem)">
            <summary>
                Gets the entry discount amount for the specific line item, which are set by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine" />.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns>The entry discount amount for the specific line item</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.ILineItemValidator">
            <summary>
            Validates a <see cref="T:EPiServer.Commerce.Order.ILineItem"/> to make sure the line item is still valid to be purchased.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.ILineItemValidator.Validate(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.IMarket,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the specified line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="market">The market.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.ILineItemValidator.Validate(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.MarketId,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the specified line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="marketId">The market id.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.CartMigrator">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Handles migrating carts/wishlist of a customer to another customer.
            The common scenario is switching from anonymous user to logged in user.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartMigrator.#ctor(EPiServer.Commerce.Order.IOrderRepository)">
            <summary>
            Initializes an instance of <see cref="T:EPiServer.Commerce.Order.Internal.CartMigrator"/>.
            </summary>
            <param name="orderRepository">The order repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartMigrator.MigrateCarts(System.Guid,System.Guid)">
            <summary>
            Migrates all carts of a customer to another customer.
            </summary>
            <param name="sourceCustomerId">The source customer identifier.</param>
            <param name="destinationCustomerId">The destination customer identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartMigrator.MigrateWishList(System.Guid,System.Guid,Mediachase.Commerce.IMarket)">
            <summary>
            Migrates wishlist of a customer to another customer.
            </summary>
            <param name="sourceCustomerId">The source customer identifier.</param>
            <param name="destinationCustomerId">The destination customer identifier.</param>
            <param name="currentMarket">The current market.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.CartProvider">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Handles loading and persistence for <see cref="T:EPiServer.Commerce.Order.ICart"/>
            </summary>
            <seealso cref="T:EPiServer.Commerce.Order.ICartProvider" />
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.#ctor(Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.IOrderGroupTotalsCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},EPiServer.Globalization.LanguageResolver,Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.CartProvider" />
            </summary>
            <param name="currentMarket">The current market service</param>
            <param name="orderGroupTotalsCalculator">The calculator that used to calculate the totals for an order group.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="languageResolver">The language resolved.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.#ctor(Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.IOrderGroupCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},EPiServer.Globalization.LanguageResolver,Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.CartProvider" />
            </summary>
            <param name="currentMarket">The current market service</param>
            <param name="orderGroupCalculator">The calculator that used to calculate the totals for an order group.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="languageResolver">The language resolved.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.Create(System.Guid,System.String)">
            <summary>
            Creates an <see cref="T:EPiServer.Commerce.Order.ICart"/> for a specific customer.
            </summary>
            <param name="customerId">The customer id</param>
            <param name="name">The order name</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order using an order reference.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.Load(System.Int32)">
            <summary>
            Loads the order
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.Load(System.Guid,System.String)">
            <summary>
            Loads the orders.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <remarks> If the <paramref name="name"/> is null or empty, it returns all carts of the customer.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.Save(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Order.ICart"/>.
            </summary>
            <param name="cart">The cart.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.SaveAsPaymentPlan(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves the <see cref="T:EPiServer.Commerce.Order.ICart" /> as <see cref="T:EPiServer.Commerce.Order.IPaymentPlan" />.
            </summary>
            <param name="cart">The cart.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPaymentPlan" />.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.CartProvider.SaveAsPurchaseOrder(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves the <see cref="T:EPiServer.Commerce.Order.ICart" /> as <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder" />.
            </summary>
            <param name="cart">The cart.</param>
            <returns> An <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder" />.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Filter class used in <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB"/> to filter which carts to retrieve.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter.#ctor">
            <summary>
            Creates new instance of <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter.#ctor(System.Guid,System.String)">
            <summary>
            Creates new instance of <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter"/> with <paramref name="customerId"/> and <paramref name="name"/>.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="name">The name of cart.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter.CartId">
            <summary>
            Specifies that only cart which has specified identifier should be returned.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter.Name">
            <summary>
            Specifies that only carts which has specified name should be returned.
            </summary>
            <remarks>This option should not be used without CustomerId option.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter.ExcludedCartNames">
            <summary>
            Gets or sets the cart names that will be excluded when searching for carts.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Represents database access class to manipulate <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.#ctor(Mediachase.Data.Provider.IConnectionStringHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB"/> class.
            </summary>
            <param name="connectionHandler">The connection string handler.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.Save(EPiServer.Commerce.Order.Internal.SerializableCart)">
            <summary>
            Saves a <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> to the database.
            The cart will be stored in SerializableCart table.
            </summary>
            <param name="cart">The <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> needs to be saved.</param>
            <returns>The cart identifier.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.Load(EPiServer.Commerce.Order.Internal.DataAccess.CartFilter)">
            <summary>
            Loads <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>s by a given <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter"/>.
            </summary>
            <param name="cartFilter">The filter options when loading serializable cart.</param>
            <returns>The collection of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.FindCarts(EPiServer.Commerce.Order.Internal.DataAccess.CartFilter)">
            <summary>
            Finds <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>s by a given <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter"/>.
            </summary>
            <param name="cartFilter">The filter options when finding cart.</param>
            <returns>The collection of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.FindCarts(EPiServer.Commerce.Order.Internal.DataAccess.CartFilter,System.Int32@)">
            <summary>
            Finds <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>s by a given <see cref="T:EPiServer.Commerce.Order.Internal.DataAccess.CartFilter"/>.
            </summary>
            <param name="cartFilter">The filter options when finding cart.</param>
            <param name="totalRecords">The total records.</param>
            <returns>The collection of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.Delete(EPiServer.Commerce.Order.ICart)">
            <summary>
            Deletes a <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.
            </summary>
            <param name="cart">The cart to delete.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.FindCarts(EPiServer.Commerce.Order.OrderSearchFilter,System.Int32@)">
            <summary>
            Finds <see cref="T:EPiServer.Commerce.Order.ICart"/> by a set of parameters.
            </summary>
            <param name="filter">The filter options when finding cart.</param>
            <param name="totalRecords">The total records returned.</param>
            <returns>A collection of <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.FindCarts(EPiServer.Commerce.Orders.OrderSearchField,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Finds <see cref="T:EPiServer.Commerce.Order.ICart"/> by search field and search value.
            </summary>
            <param name="searchField">The search field use to search. For example: Email, CustomerName.</param>
            <param name="searchValue">The search value.</param>
            <param name="excludedCartNames">The cart names that will be excluded when finding carts.</param>
            <param name="startIndex">The starting index of record to retrieve.</param>
            <param name="recordsToRetrieve">The number of records to retrieve.</param>    
            <param name="returnTotalCount">The flag to indicate if the search should return the total count of matched carts.</param>
            <param name="totalRecords">The total records returned.</param>
            <returns>A collection of <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.SaveBatchCarts(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.Internal.SerializableCart})">
            <summary>
            Saves a list of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> to the database.
            Carts will be stored in SerializableCart table.
            </summary>
            <param name="carts">The list of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> needs to be saved.</param>
            <remarks>
            Used to migrate existing serializable cart.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB.InsertBatchCarts(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.Internal.SerializableCart})">
            <summary>
            Insert a list of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> to the database.
            Carts will be stored in SerializableCart table.
            </summary>
            <param name="carts">The list of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/> needs to be inserted.</param>
            <remarks>
            Use to insert serializable carts.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultOrderActivityService">
            <summary>
            Default implement of <see cref="T:EPiServer.Commerce.Order.Internal.IOrderActivityService"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderActivityService.Create(System.String,System.String,Mediachase.Commerce.Orders.OrderNoteTypes,System.Guid,System.String,EPiServer.Commerce.Order.OrderActivityEvent)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderActivityService.Get``1(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultOrderEvents">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IOrderEvents"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.DefaultOrderEvents.Instance">
            <summary>
            Singleton instance of <see cref="T:EPiServer.Commerce.Order.Internal.DefaultOrderEvents"/>.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Order.Internal.DefaultOrderEvents.SavingOrder">
            <inheritdoc />
        </member>
        <member name="E:EPiServer.Commerce.Order.Internal.DefaultOrderEvents.SavedOrder">
            <inheritdoc />
        </member>
        <member name="E:EPiServer.Commerce.Order.Internal.DefaultOrderEvents.DeletingOrder">
            <inheritdoc />
        </member>
        <member name="E:EPiServer.Commerce.Order.Internal.DefaultOrderEvents.DeletedOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultOrderRepository">
            <summary>
            Default repository for <see cref="T:EPiServer.Commerce.Order.ICart"/>, <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>, and <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>./>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.#ctor(EPiServer.Commerce.Order.ICartProvider,EPiServer.Commerce.Order.IPurchaseOrderProvider,EPiServer.Commerce.Order.IPaymentPlanProvider,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Order.Internal.DefaultOrderEvents,EPiServer.ServiceLocation.ServiceCollectionAccessor{EPiServer.Commerce.Order.IOrderRepositoryCallback})">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Order.Internal.DefaultOrderRepository" />.
            </summary>
            <param name="cartProvider">The cart provider.</param>
            <param name="purchaseOrderProvider">The purchase order provider.</param>
            <param name="paymentPlanProvider">The payment plan provider.</param>
            <param name="objectInstanceCache">The object instance cache</param>
            <param name="orderEvents">The order events.</param>
            <param name="accessor">The accessor for <see cref="T:EPiServer.Commerce.Order.IOrderRepositoryCallback"/></param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Create``1(System.Guid,System.String)">
            <summary>
            Creates an order.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="customerId">The customer guid.</param>
            <param name="name">The name of the order.</param>
            <returns>The created order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Load(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderLink">The order link.</param>
            <returns>The order.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Load``1(System.Int32)">
            <summary>
            Loads an order.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="orderGroupId">The order group id.</param>
            <returns>The order.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Load``1(System.Guid,System.String)">
            <summary>
            Loads all orders of a specific type for a customer.
            </summary>
            <typeparam name="TOrderGroup">The type of <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</typeparam>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Load(System.String)">
            <summary>
            Loads a specific purchase order by the tracking number.
            </summary>
            <param name="trackingNumber">The tracking number.</param>
            <returns>
            The matching <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Load(System.Guid,System.String)">
            <summary>
            Loads all orders for a customer.
            </summary>
            <param name="customerId">The customer guid.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders.</returns>
            <remarks>
            Instances of <see cref="T:Mediachase.Commerce.Orders.Cart"/>, <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/> and <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            returned by this method are deep clones of their cached instances.
            I.e. modifying objects of those types returned by this method will not modify the cache.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Save(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves the order.
            </summary>
            <param name="order">The order.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.SaveAsPaymentPlan(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves as payment plan.
            </summary>
            <param name="cart">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.SaveAsPurchaseOrder(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves as purchase order.
            </summary>
            <param name="cart">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepository.RemoveRelatedExchangeOrderCache(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Removes cache of related exchange order in completed return forms.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IOrderRepositoryCallback"/>. Does nothing.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnCreating(System.Guid,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnCreated(EPiServer.Commerce.Order.OrderReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnUpdating(EPiServer.Commerce.Order.OrderReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnUpdated(EPiServer.Commerce.Order.OrderReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnDeleting(EPiServer.Commerce.Order.OrderReference)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderRepositoryCallback.OnDeleted(EPiServer.Commerce.Order.OrderReference)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this.
            
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IOrderSearchService"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService.#ctor(EPiServer.Commerce.Order.Internal.ICartSearchService)">
            <summary>
            Initialize new instance of <see cref="T:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService"/>.
            </summary>
            <param name="cartSearch">The cart search service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService.#ctor(EPiServer.Commerce.Order.Internal.ICartSearchService,Mediachase.Commerce.Core.Features.IFeatureSwitch)">
            <summary>
            Initialize new instance of <see cref="T:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService"/>.
            </summary>
            <param name="cartSearch">The cart search service.</param>
            <param name="featureSwitch">The feature switch.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService.Find``1(EPiServer.Commerce.Order.OrderSearchFilter)">
            <summary>
            Finds orders with a specific <see cref="T:EPiServer.Commerce.Order.OrderSearchFilter"/> for a specific <typeparamref name="TOrderGroup"/>.
            </summary>
            <typeparam name="TOrderGroup">The given order type for filter.</typeparam>
            <param name="filter">The search filter.</param>
            <returns>A collection of order of <typeparamref name="TOrderGroup"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService.Search``1(EPiServer.Commerce.Orders.OrderSearchField,System.String,System.Int32,System.Int32)">
            <summary>
            Finds orders with search value for a specific <typeparamref name="TOrderGroup"/>.
            </summary>
            <typeparam name="TOrderGroup">The given order type for filter.</typeparam>
            <param name="searchField">The search field use to search. For example: Email, CustomerName, TrackingNumber.</param>
            <param name="searchValue">The search value.</param>
            <param name="startIndex">The starting index of record to retrieve.</param>
            <param name="recordsToRetrieve">The number of records to retrieve.</param>        
            <returns>The order search results.</returns>   
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultOrderSearchService.GetExcludedCartNames">
            <summary>
            Gets the cart names that are excluded by setting.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultPaymentPlanProcessor">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IPaymentPlanProcessor"/> to handle operations on <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPaymentPlanProcessor.#ctor(EPiServer.Commerce.Order.ILineItemValidator,EPiServer.Commerce.Order.IInventoryProcessor,EPiServer.Commerce.Marketing.IPromotionEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.DefaultPaymentPlanProcessor" /> class.
            </summary>
            <param name="lineItemValidator">The line item validator.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
            <param name="promotionEngine">The promotion engine.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPaymentPlanProcessor.CancelPaymentPlan(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
            <param name="paymentPlan">The payment plan.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IPurchaseOrderProcessor"/> to handle operations on <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.#ctor(EPiServer.Commerce.Order.ILineItemValidator,EPiServer.Commerce.Order.IInventoryProcessor,EPiServer.Commerce.Marketing.IPromotionEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor" /> class.
            </summary>
            <param name="lineItemValidator">The line item validator.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
            <param name="promotionEngine">The promotion engine.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.CancelOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            After processed, the <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderStatus.Cancelled"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.ProcessOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Processes an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            After processed, the <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderStatus.InProgress"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.HoldOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Holds an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            After processed, the <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderStatus.OnHold"/>.
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.ReleaseOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Releases an on-hold <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            After processed, the <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderStatus.InProgress"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultPurchaseOrderProcessor.ValidateOrderStatus(Mediachase.Commerce.Orders.OrderStatus,Mediachase.Commerce.Orders.OrderStatus)">
            <summary>
            Validates the order status transition.
            </summary>
            <param name="oldStatus">The old status.</param>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Default implementation of <see cref="T:EPiServer.Commerce.Order.IShipmentProcessor"/> to handle operations on <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.#ctor(EPiServer.Commerce.Order.IOrderGroupCalculator,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.IOrderGroupFactory,EPiServer.Commerce.Order.IPaymentProcessor,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentRepository,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.ILineItemValidator,EPiServer.Commerce.Order.IInventoryProcessor,EPiServer.Commerce.Marketing.IPromotionEngine,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor" /> class.
            </summary>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <param name="paymentProcessor">The payment processor.</param>
            <param name="picklistCache">The picklist cache.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="lineItemValidator">The line item validator.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.CancelShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Cancelled"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.CompleteShipment(EPiServer.Commerce.Order.IPurchaseOrder,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IShipment})">
            <summary>
            Completes a list of <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Shipped"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipments">The enumerable of <see cref="T:EPiServer.Commerce.Order.IShipment"/>.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.ReleaseShipment(EPiServer.Commerce.Order.IPurchaseOrder,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IShipment})">
            <summary>
            Releases a list of <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Released"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipments">The enumerable of <see cref="T:EPiServer.Commerce.Order.IShipment"/>.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.AddShipmentToPicklist(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment,System.Int32)">
            <summary>
            Adds an <see cref="T:EPiServer.Commerce.Order.IShipment"/> to picklist.
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Packing"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <param name="pickListId">The pick list id.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.RemoveShipmentFromPicklist(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Removes an <see cref="T:EPiServer.Commerce.Order.IShipment"/> from picklist. 
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Released"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.DefaultShipmentProcessor.CapturePayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Captures payment for <see cref="T:EPiServer.Commerce.Order.IShipment"/> on an <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
            <param name="order">The purchase order.</param>
            <param name="shipment">The shipment that needed to capture payment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Extensions.NotifyCollectionChangedEventArgsExtensions.GetNewItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Extracts the items in <see cref="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems"/> of
            the specified type, if the <see cref="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action"/>
            is <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> or
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/>, otherwise an empty
            enumeration is returned.
            </summary>
            <typeparam name="T">The type of item to return.</typeparam>
            <param name="args">The event args to get items from.</param>
            <returns>The added/replaced items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.ILineItemCalculatorExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Order.ILineItemCalculator"/> and <see cref="T:EPiServer.Commerce.Order.IReturnLineItemCalculator"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ILineItemCalculatorExtensions.GetRawExtendedPrice(EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the unrounded extended price of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
            <param name="calculator">The line item calculator.</param>
            <param name="lineItem">The line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The extended price of the line item with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ILineItemCalculatorExtensions.GetRawExtendedPrice(EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IReturnLineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the unrounded extended price of an <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.
            </summary>
            <param name="calculator">The return line item calculator.</param>
            <param name="returnLineItem">The return line item.</param>
            <param name="currency">The currency to be used in the calculations.</param>
            <returns>The extended price of the return line item with full precision.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.IOrderActivityService">
            <summary>
            Services for order activity.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderActivityService.Create(System.String,System.String,Mediachase.Commerce.Orders.OrderNoteTypes,System.Guid,System.String,EPiServer.Commerce.Order.OrderActivityEvent)">
            <summary>
            Creates an order activity.
            </summary>
            <param name="title">The tile of note.</param>
            <param name="detail">The detail content of note.</param>
            <param name="customerId">The customer id.</param>
            <param name="type">The order activity type.</param>
            <param name="channel">The channel of note.</param>
            <param name="activityEvent">The event type of note.</param>
            <returns>An order activity.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderActivityService.Get``1(System.Int32,System.Int32)">
            <summary>
            Gets an order activity.
            </summary>
            <param name="orderGroupId">The order group id.</param>
            <param name="orderActivityId">The order activity id.</param>
            <returns>An order activity</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.IOrderGroupExtensions">
             <summary>
             This class is intended to be used internally by EPiServer. We do not support any backward
             compatibility on this. Please DO NOT use this in your project.
            
             Extension methods for <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
             </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderGroupExtensions.UpdateOrderStatus(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Updates status of <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> base on its shipments status.
            </summary>
            <param name="order">The purchase order.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderGroupExtensions.UpdateOrderStatus(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Updates status of <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/> base on its shipments status.
            </summary>
            <param name="paymentPlan">The payment plan.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderGroupExtensions.UpdateShipmentsStatus(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Updates shipments status of <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> if order status is Cancelled or OnHold
            </summary>
            <param name="order">The purchase order.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.IOrderGroupExtensions.UpdateShipmentsStatus(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Updates shipments status of <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/> if order status is Cancelled or OnHold
            </summary>
            <param name="paymentPlan">The payment plan.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs">
            <summary>
            Class represents arguments object for <see cref="T:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedHandler"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.OrderGroup">
            <summary>
            The order group containing the <seealso cref="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.LineItem"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.LineItem">
            <summary>
            The line item having the changed property.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.IncludeShipmentShippingTax">
            <summary>
            The flag indicating whether change of the property affects to the shipping tax of the shipment containing the <seealso cref="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.LineItem"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.IncludeShipmentShippingCost">
            <summary>
            The flag indicating whether change of the property affects to the shipping cost of the shipment containing the <seealso cref="P:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.LineItem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.ILineItem,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs"/>.
            </summary>
            <param name="orderGroup">The order group containing the <paramref name="lineItem"/>.</param>
            <param name="lineItem">The line item having the changed property.</param>
            <param name="includeShipmentShippingTax">The flag indicating whether change of the property affects to the shipping tax of the shipment containing the <paramref name="lineItem"/>.</param>
            <param name="includeShipmentShippingCost">The flag indicating whether change of the property affects to the shipping cost of the shipment containing the <paramref name="lineItem"/>.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedHandler">
            <summary>
            A delegate for handling property changed of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/> that affects to tax values.
            </summary>
            <param name="arguments">The arguments wrapped in an object of <see cref="T:EPiServer.Commerce.Order.Internal.LineItemTaxAffectedPropertyChangedArgs"/>.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.OperationKeysTransformer">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Transforms the operation keys of all shipments of a <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
            <remarks>
            The common scenario is when converting a <see cref="T:EPiServer.Commerce.Order.ICart"/> to a purchase order 
            or a payment plan in the serializabled carts mode.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.OperationKeysTransformer.Transform(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Transforms operation keys of all shipments of a <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.OrderActivityHandler`1.AddOrderActivity(`0,System.String,System.String,System.String,EPiServer.Commerce.Order.OrderActivityEvent)">
            <summary>
            Add order activity to Order group.
            </summary>
            <param name="orderGroup">Order group object</param>
            <param name="channel">Order activity channel</param>
            <param name="title">Order activity title</param>
            <param name="detail">Order activity detail</param>
            <param name="activityEvent">Order activity event</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.OrderActivityHandler`1.AddShipmentActivity(`0,System.String,EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.OrderActivityEvent)">
            <summary>
            Add order activity to shipment.
            </summary>
            <param name="orderGroup">Order group object</param>
            <param name="channel">Order activity channel</param>
            <param name="shipment">Shipment of order</param>
            <param name="activityEvent">Order activity event</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedArgs">
            <summary>
            Class represents arguments object for <see cref="T:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedHandler"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedArgs.OrderGroup">
            <summary>
            The order group having the changed property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedArgs.#ctor(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedArgs"/>.
            </summary>
            <param name="orderGroup">The order group having the changed property.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedHandler">
            <summary>
            A delegate for handling property changed of an <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> that affects to tax values.
            </summary>
            <param name="arguments">The arguments wrapped in an object of <see cref="T:EPiServer.Commerce.Order.Internal.OrderGroupTaxAffectedPropertyChangedArgs"/>.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.PaymentPlanProvider">
            <summary>
            Provider for <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.#ctor(Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.IOrderGroupCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},EPiServer.Globalization.LanguageResolver,Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.PaymentPlanProvider" />
            </summary>
            <param name="currentMarket">The current market service</param>
            <param name="orderGroupCalculator">The calculator that used to calculate the totals for an order group.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="languageResolver">The language resolved.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.Create(System.Guid,System.String)">
            <summary>
            Creates an <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/> for a specific customer.
            </summary>
            <param name="customerId">The customer id</param>
            <param name="name">The order name</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order using an order reference.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.Load(System.Int32)">
            <summary>
            Loads the order
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.Load(System.Guid,System.String)">
            <summary>
            Loads payment plans.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <remarks> If the <paramref name="name"/> is null or empty, it returns all payment plans of the customer.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PaymentPlanProvider.Save(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
            <param name="paymentPlan">The payment plan.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider">
            <summary>
            Provider for <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.#ctor(Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.IOrderGroupCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},EPiServer.Globalization.LanguageResolver,Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider" />
            </summary>
            <param name="currentMarket">The current market service</param>
            <param name="orderGroupCalculator">The calculator that used to calculate the totals for an order group.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="languageResolver">The language resolved.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.Create(System.Guid,System.String)">
            <summary>
            Creates and <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> for a specific customer.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="name">The name.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order using an order reference.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.Load(System.Int32)">
            <summary>
            Loads the order
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.Load(System.Guid,System.String)">
            <summary>
            Loads orders.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </returns>
            <remarks> If the <paramref name="name"/> is null or empty, it returns all orders of the customer.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.PurchaseOrderProvider.Save(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation">
            <summary>
            Helper class for promotion invalidation for return order.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation.RemoveAllReturnItems(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Tries to remove original line items of all return line items with return quantities from an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="order">The purchase order.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation.GetPromotionsDelta(System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PromotionInformation},System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PromotionInformation},Mediachase.Commerce.Currency)">
            <summary>
            Gets the difference in a <paramref name="allPromotionsBefore"/> comparing with a <paramref name="allPromotionsAfter"/>,
            If the promotion information item in the source has type of DiscountType.Order then compare the PromotionInformation.OrderForm.SavedAmount.
            If the promotion information item in the source has type of DiscountType.LineItem or DiscountType.Manual then compare by PromotionInformationEntry.EntryCode
            and PromotionInformationEntry.SavedAmount
            </summary>
            <example>
                var before = new[] { new PromotionInformation { Entries = { new PromotionInformationEntry { SavedAmount = 10, EntryCode = "Test1" },
                                                                            new PromotionInformationEntry { SavedAmount = 10, EntryCode = "Test2" }} } };
                var after = new[] { new PromotionInformation { Entries = { new PromotionInformationEntry { SavedAmount = 5, EntryCode = "Test1" },
                                                                            new PromotionInformationEntry { SavedAmount = 8, EntryCode = "Test2" }} } };
                GetPromotionsDelta(before, after) should return:
                new[] { new PromotionInformation { Entries = { new PromotionInformationEntry { SavedAmount = 5, EntryCode = "Test1" },
                                                               new PromotionInformationEntry { SavedAmount = 2, EntryCode = "Test2" }} } };
            </example>
            <param name="allPromotionsBefore">The source promotion information collection.</param>
            <param name="allPromotionsAfter">The promotion information collection to compare with.</param>
            <param name="currency">The currency.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation.UpdateDiscountAmountsForReturnLineItems(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IReturnLineItem},System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PromotionInformation})">
            <summary>
            Updates discount amount for <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>s.
            </summary>
            <param name="returnLineItems">List of <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>.</param>
            <param name="invalidatedPromotionInfos">List of invalidated <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation.UpdateSavedAmount(EPiServer.Commerce.Marketing.PromotionInformation,EPiServer.Commerce.Marketing.PromotionInformation)">
            <summary>
            Updates saved amount of the <paramref name="before"/> based on the <paramref name="after"/>.
            The saved amount in <paramref name="before"/> will be subtracted by the amount in <paramref name="after"/>.
            </summary>
            <param name="before">The promotion information to be updated.</param>
            <param name="after">The promotion information to be referenced.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ReturnOrderPromotionInvalidation.GetMostMatchedPromotion(EPiServer.Commerce.Marketing.PromotionInformation,System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PromotionInformation},Mediachase.Commerce.Currency)">
            <summary>
            Gets the most matched promotion information with a given <paramref name="originalPromotion"/> 
            from <paramref name="searchingPromotionList"/> by the discount type.
            </summary>
            <param name="originalPromotion">The original promotion information.</param>
            <param name="searchingPromotionList">The list of promotion information to search on.</param>
            <param name="currency">The currency.</param>
            <returns>The most matched promotion information.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableCart">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents a cart in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCart.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCart.#ctor(System.Collections.Generic.ICollection{EPiServer.Commerce.Order.Internal.SerializableOrderForm},System.Collections.Generic.ICollection{EPiServer.Commerce.Order.Internal.SerializableNote})">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.
            This constructor is required for the JSON deserializer to be able
            to identify concrete classes to use when deserializing the interface properties.
            </summary>
            <param name="forms">The order form collection.</param>
            <param name="notes">The order note collection.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.DefaultName">
            <summary>
            Gets the default name for the cart.
            </summary>
            <value>default name for the cart.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.WishListName">
            <summary>
            Gets the name for the Wishlist.
            </summary>
            <value>name for the Wishlist.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.ExchangeName">
            <summary>
            Gets the exchange name for the cart.
            </summary>
            <value>exchange name for the cart.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Id">
            <summary>
            Gets or sets the cart identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Created">
            <summary>
            Gets or sets the modified date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Currency">
            <summary>
            Gets or sets the currency used in the cart.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Forms">
            <summary>
            Gets the collection of order forms in the cart.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Market">
            <summary>
            Gets or sets the market.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.MarketId">
            <summary>
            Gets or sets the market id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.MarketName">
            <summary>
            Gets or sets the market name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.PricesIncludeTax">
            <summary>
            Gets or sets the value indicating if the price of the order group includes tax or not.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Modified">
            <summary>
            Gets the modified date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Notes">
            <summary>
            Gets the cart notes.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.OrderLink">
            <summary>
            Gets an instance of the class <see cref="T:EPiServer.Commerce.Order.OrderReference"/>, which contains the unique identity for the cart.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.OrderStatus">
            <summary>
            Gets or sets the cart status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.IsTaxTotalUpToDate">
            <summary>
            Gets or sets the flag indicating whether the <see cref="P:EPiServer.Commerce.Order.Internal.IOrderGroupCalculatedAmount.TaxTotal"/> is up-to-date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCart.TaxTotal">
            <summary>
            Gets or sets the tax total.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCart.DeepClone">
            <summary>
            Clones the cart.
            </summary>
            <returns>The cloned cart.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableCartBuilder">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            
            Create sub-components for IOrderGroup.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.SortOrder">
            <summary>
            The sort order of the builder.
            </summary>
            <remarks>
            In case there are multiple registered builders for a type in <see cref="P:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.ForType"/>, 
            the one which has the highest sort order value will be chosen.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.ForType">
            <summary>
            The type(s) of order group that this builder will work with.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateOrderForm(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the order form.
            </summary>
            <param name="orderGroup">The parent order group.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderForm"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateShipment(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the shipment.
            </summary>
            <param name="orderGroup">The parent order group.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IShipment"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateLineItem(System.String,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the line item.
            </summary>
            <param name="code">The line item code.</param>
            <param name="orderGroup">The parent order group.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ILineItem"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateOrderAddress">
            <summary>
            Creates the order address.
            </summary>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderAddress"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateOrderNote">
            <summary>
            Creates the order note.
            </summary>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderNote"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreatePayment">
            <summary>
            Creates the payment.
            </summary>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreatePayment(System.Type)">
            <summary>
            Creates the payment with a specified implementation.
            </summary>
            <param name="paymentType">The payment implementation type.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateCardPayment">
            <summary>
            Creates the card payment.
            </summary>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICreditCardPayment"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartBuilder.CreateTaxValue">
            <summary>
            Creates the tax value.
            </summary>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ITaxValue"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableCartProvider">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward
            compatibility on this. Please DO NOT use this in your project.
            
            Handles loading and persistence for <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCart"/>.
            </summary>
            <seealso cref="T:EPiServer.Commerce.Order.ICartProvider" />
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.#ctor(EPiServer.Commerce.Order.Internal.OperationKeysTransformer,EPiServer.Commerce.Order.Internal.DataAccess.SerializableCartDB,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.IPurchaseOrderProvider,EPiServer.Commerce.Order.IPaymentPlanProvider,EPiServer.Commerce.Order.IOrderGroupFactory,EPiServer.Commerce.Order.IOrderNumberGenerator,EPiServer.Commerce.Marketing.ICouponUsage,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCartProvider" />.
            </summary>
            <param name="operationKeysTransformer">The operation keys transformer.</param>
            <param name="serializableCartDB">The serializable cart database access.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="currentMarket">The current market service.</param>
            <param name="purchaseOrderProvider">The purchase order provider.</param>
            <param name="paymentPlanProvider">The payment plan provider.</param>
            <param name="orderGroupFactory">The factory for creating order group sub-objects.</param>
            <param name="orderNumberGenerator">The order number generator.</param>
            <param name="couponUsage">The coupon usage report service.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.Create(System.Guid,System.String)">
            <summary>
            Creates an <see cref="T:EPiServer.Commerce.Order.ICart"/> for a specific customer.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The cart name.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes a cart using its order link.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.Load(System.Int32)">
            <summary>
            Loads an <see cref="T:EPiServer.Commerce.Order.ICart"/> by its identifier.
            </summary>
            <param name="cartId">The cart id.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.ICart"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.Load(System.Guid,System.String)">
            <summary>
            Loads a collection of <see cref="T:EPiServer.Commerce.Order.ICart"/> by customer identifier and cart name.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <remarks> If the <paramref name="name"/> is null or empty, it returns all carts of the customer.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.Save(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves an <see cref="T:EPiServer.Commerce.Order.ICart"/>.
            </summary>
            <param name="cart">The cart.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.OrderReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.SaveAsPaymentPlan(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves an <see cref="T:EPiServer.Commerce.Order.ICart" /> as <see cref="T:EPiServer.Commerce.Order.IPaymentPlan" />.
            </summary>
            <param name="cart">The cart.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPaymentPlan" />.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCartProvider.SaveAsPurchaseOrder(EPiServer.Commerce.Order.ICart)">
            <summary>
            Saves an <see cref="T:EPiServer.Commerce.Order.ICart" /> as <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder" />.
            </summary>
            <param name="cart">The cart.</param>
            <returns> An <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder" />.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents a credit card payment in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.#ctor(EPiServer.Commerce.Order.Internal.SerializableOrderAddress)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment"/>.
            This constructor is required for the JSON deserializer to be able
            to identify concrete classes to use when deserializing the interface properties.
            </summary>
            <param name="billingAddress">The billing address.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.CardType">
            <summary>
            Gets or sets the type of the card. Types typically are VISA, MasterCard, AMEX.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.CreditCardNumber">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.CreditCardSecurityCode">
            <summary>
            Gets or sets the credit card security code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.ExpirationMonth">
            <summary>
            Gets or sets the expiration month. Goes from 1 to 12.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.ExpirationYear">
            <summary>
            Gets or sets the expiration year.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableCreditCardPayment.ProviderPaymentId">
            <summary>
            Gets or sets the provider payment identifier.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableLineItem">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents a line item in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableLineItem.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableLineItem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableLineItem.#ctor(System.Int32,System.String)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableLineItem"/>.
            This constructor is required for the JSON deserializer to be able
            to set the readonly properties.
            </summary>
            <param name="lineItemId">The line item id.</param>
            <param name="code">The line item code.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.LineItemId">
            <summary>
            Gets the identity of the line item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.Code">
            <summary>
            Gets the code of the variation content the line item represent.
            This property works as the connection between the line item and the variation content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.PlacedPrice">
            <summary>
            Gets or sets the price for one item that this line item represent.
            This property don't take any discounts in consideration. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.Quantity">
            <summary>
            Gets or sets the number of items this line item contains.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.ReturnQuantity">
            <summary>
            Gets or sets the returned in stock quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.InventoryTrackingStatus">
            <summary>
            Gets or sets the inventory tracking status on whether to check inventory.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.IsInventoryAllocated">
            <summary>
            Gets or sets a value indicating whether this instance has allocated inventory for the <see cref="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.Quantity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.IsGift">
            <summary>
            Gets or sets a value indicating whether the line item is a gift item.
            </summary>
            <value>
              <c>true</c> if the line item is a gift item; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.AllowBackordersAndPreorders">
            <summary>
            Gets or sets a value indicating whether [allow backorders and preorders].
            </summary>
            <value>
            	<c>true</c> if [allow backorders and preorders]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.InStockQuantity">
            <summary>
            Gets or sets the in stock quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.BackorderQuantity">
            <summary>
            Gets or sets the backorder quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.PreorderQuantity">
            <summary>
            Gets or sets the preorder quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.InventoryStatus">
            <summary>
            Gets or sets the inventory status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.MaxQuantity">
            <summary>
            Gets or sets the max quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.MinQuantity">
            <summary>
            Gets or sets the min quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.EntryAmount">
            <summary>
            Gets or sets the discount amount set for this specific line item.
            This property is normally set by the promotion system.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.OrderAmount">
            <summary>
            Gets the discount amount not specifically set for this line item.
            This property contains the total order level discount for the whole order divided by the number of line items the order contains.
            </summary>
            <value>
            The order level discount amount.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.TaxCategoryId">
            <summary>
            Gets or sets the tax category id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.SalesTax">
            <summary>
            Gets or sets the sales tax amount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.IsSalesTaxUpToDate">
            <summary>
            Gets or sets the flag indicating whether the <see cref="P:EPiServer.Commerce.Order.Internal.ILineItemCalculatedAmount.SalesTax"/>. is up-to-date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.ParentOrderGroup">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableLineItem.EPiServer#Commerce#Order#Internal#ILineItemCalculatedAmount#PricesIncludeTax">
            <summary>
            Gets the setting of including tax in price from the order group.
            </summary>
            <remarks>It does not need to be included in serialization.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableNote">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents an order note in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.OrderNoteId">
            <summary>
            Gets or sets the order note id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.Detail">
            <summary>
            Gets or sets the detail.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.Type">
            <summary>
            Gets or sets the note type.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.LineItemId">
            <summary>
            Gets or sets the lineitem id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.CustomerId">
            <summary>
            Gets or sets the customer id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.Created">
            <summary>
            Gets or sets the created date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.EventType">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.EventSource">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableNote.Channel">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableOrderAddress">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents an order address in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableOrderAddress"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Id">
            <summary>
            Gets the identity of the order address. Use this to map the address id to Shipment and Billing of OrderForm.
            </summary>
            <value>The identity of the order address.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>The name of the first.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.LastName">
            <summary>
            Gets or sets last name.
            </summary>
            <value>The name of the last.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
            <value>The organization.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Line1">
            <summary>
            Gets or sets the line 1.
            </summary>
            <value>The line1.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Line2">
            <summary>
            Gets or sets the line 2.
            </summary>
            <value>The line2.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
            <value>The country code.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
            <value>The name of the country.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.RegionCode">
            <summary>
            Gets or sets the region code.
            </summary>
            <value>The region code.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.RegionName">
            <summary>
            Gets or sets the name of the region.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.DaytimePhoneNumber">
            <summary>
            Gets or sets the daytime phone number.
            </summary>
            <value>The daytime phone number.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.EveningPhoneNumber">
            <summary>
            Gets or sets the evening phone number.
            </summary>
            <value>The evening phone number.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.FaxNumber">
            <summary>
            Gets or sets the fax number.
            </summary>
            <value>The fax number.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.Shipment">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableOrderAddress.ShippingAddressChanged">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableOrderForm">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents an order form in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableOrderForm.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableOrderForm"/>.
            </summary>      
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableOrderForm.#ctor(System.Collections.Generic.ICollection{EPiServer.Commerce.Order.Internal.SerializableShipment},System.Collections.Generic.ICollection{EPiServer.Commerce.Order.Internal.SerializablePayment})">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableOrderForm"/>.
            This constructor is required for the JSON deserializer to be able
            to identify concrete classes to use when deserializing the interface properties.
            </summary>
            <param name="shipments">The shipment collection.</param>
            <param name="payments">The payment collection.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.OrderFormId">
            <summary>
            Gets or sets the unique identity for the order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.AuthorizedPaymentTotal">
            <summary>
            Gets or sets the amount that has is on hold, waiting for being captured.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.CapturedPaymentTotal">
            <summary>
            Gets or sets the amount that has been transfered.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.HandlingTotal">
            <summary>
            Gets or sets the handling total.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.Shipments">
            <summary>
            Gets the shipments on the order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.Promotions">
            <summary>
            Gets the promotions.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.CouponCodes">
            <summary>
            Gets the supplied coupon codes.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.Payments">
            <summary>
            Gets the payments on the order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.EPiServer#Commerce#Order#IOrderForm#PricesIncludeTax">
            <summary>
            Gets the setting of including tax in price from the order group.
            </summary>
            <remarks>It does not need to be included in serialization.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableOrderForm.ParentOrderGroup">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializablePayment">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents a payment in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializablePayment.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializablePayment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializablePayment.#ctor(EPiServer.Commerce.Order.Internal.SerializableOrderAddress)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializablePayment"/>.
            This constructor is required for the JSON deserializer to be able
            to identify concrete classes to use when deserializing the interface properties.
            </summary>
            <param name="billingAddress">The billing address.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.AuthorizationCode">
            <summary>
            Gets or sets the authorization code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.BillingAddress">
            <summary>
            Gets or sets the billing address.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.CustomerName">
            <summary>
            Gets or sets the name of the customer.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.ImplementationClass">
            <summary>
            Gets or sets the implementation class.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.PaymentId">
            <summary>
            Gets the payment identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.PaymentMethodId">
            <summary>
            Gets or sets the payment method identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.PaymentMethodName">
            <summary>
            Gets or sets the name of the payment method.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.PaymentType">
            <summary>
            Gets or sets the type of the payment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.ProviderTransactionID">
            <summary>
            Gets or sets the provider transaction identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.TransactionID">
            <summary>
            Gets or sets the transaction identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.TransactionType">
            <summary>
            Gets or sets the type of the transaction.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.ValidationCode">
            <summary>
            Gets or sets the validation code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializablePayment.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.SerializableShipment">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            This class represents a shipment in the new cart system. It works with the new database model for cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.#ctor">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.#ctor(System.Collections.Generic.ICollection{EPiServer.Commerce.Order.Internal.SerializableLineItem},EPiServer.Commerce.Order.Internal.SerializableOrderAddress)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Order.Internal.SerializableShipment"/>.
            This constructor is required for the JSON deserializer to be able
            to identify concrete classes to use when deserializing the interface properties.
            </summary>
            <param name="lineItems">The line item collection.</param>
            <param name="shippingAddress">The shipping address.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShipmentId">
            <summary>
            Gets or sets the shipment identifier.
            </summary>
            <value>The shipment identifier.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShippingMethodId">
            <summary>
            Gets or sets the shipment method used by the shipment.
            </summary>
            <value>The shipping method id.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShippingMethodName">
            <summary>
            Gets the name of the shipping method.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShippingAddress">
            <summary>
            Gets or sets the shipping address.
            </summary>
            <value>The shipping address.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShipmentTrackingNumber">
            <summary>
            Gets or sets a string used for tracking the shipment
            </summary>
            <value>The shipment tracking number.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.OrderShipmentStatus">
            <summary>
            Gets or sets the order shipment status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.PickListId">
            <summary>
            Gets or sets the pick list id.
            </summary>
            <value>The pick list id.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.WarehouseCode">
            <summary>
            Gets or sets the warehouse code
            </summary>
            <value>The warehouse code.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.LineItems">
            <summary>
            Gets the collection of line items
            </summary>
            <value>The line items.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.Properties">
            <summary>
            Gets or sets the property bag for dealing with custom meta fields.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShipmentDiscount">
            <summary>
            Gets or sets the shipment discount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.IsShippingCostUpToDate">
            <summary>
            Gets or sets the flag indicating whether the <see cref="P:EPiServer.Commerce.Order.Internal.IShipmentCalculatedAmount.ShippingCost"/> is up-to-date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.IsShippingTaxUpToDate">
            <summary>
            Gets or sets the flag indicating whether the <see cref="P:EPiServer.Commerce.Order.Internal.IShipmentCalculatedAmount.ShippingTax"/> is up-to-date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShippingCost">
            <summary>
            Gets or sets the shipping cost.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ShippingTax">
            <summary>
            Gets or sets the shipping tax.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.OperationKeys">
            <summary>
            Gets or sets the shipment operation keys mapping.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.ContainsOperationKeyFor(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets the inventory operation keys map.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.GetOperationKeys(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets inventory operation keys by line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns>A collection of operation keys corresponded with the line item, empty list if no key found.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.AddOperationKeys(EPiServer.Commerce.Order.ILineItem,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the inventory operation keys map.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="operationKeys">The collection of operation keys.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.InsertOperationKeys(EPiServer.Commerce.Order.ILineItem,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inserts inventory operation keys map with a line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="operationKeys">The collection of operation keys.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.RemoveOperationKey(EPiServer.Commerce.Order.ILineItem,System.String)">
            <summary>
            Removes an inventory operation key map with a line item.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="operationKey">The operation key.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.ClearOperationKeys">
            <summary>
            Clears all inventory operation keys map.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.SerializableShipment.ParentOrderGroup">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.SerializableShipment.GetLineItemIndex(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets line item index in the list of line items of the shipment.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns>The index of the line item.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Converts an <see cref="T:Mediachase.Commerce.IMarket"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter.#ctor(Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter"/> class.
            </summary>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.IMarket"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The market.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.Serialization.MarketConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a <see cref="T:Mediachase.Commerce.IMarket"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs">
            <summary>
            Class represents arguments object for <see cref="T:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedHandler"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.OrderGroup">
            <summary>
            The order group containing the <seealso cref="P:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.Shipment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.Shipment">
            <summary>
            The shipment having the changed property.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.IncludeLineItemSalesTax">
            <summary>
            The flag indicating whether change of the property affects to the sales tax values of line items contained in the <seealso cref="P:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.Shipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs"/>.
            </summary>
            <param name="orderGroup">The order group containing the <paramref name="shipment"/>.</param>
            <param name="shipment">The shipment having the changed property.</param>
            <param name="includeLineItemSalesTax">The flag indicating whether change of the property affects to the sales tax values of line items contained in the <paramref name="shipment"/>.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedHandler">
            <summary>
            A delegate for handling property changed of an <see cref="T:EPiServer.Commerce.Order.IShipment"/> that affects to tax values.
            </summary>
            <param name="arguments">The arguments wrapped in an object of <see cref="T:EPiServer.Commerce.Order.Internal.ShipmentTaxAffectedPropertyChangedArgs"/>.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.ProfileMigrator">
            <summary>
            Class to migrate orders/carts/wishlists when a customer logs in.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.ProfileMigrator.#ctor(EPiServer.Commerce.Order.IOrderRepository,Mediachase.Commerce.ICurrentMarket,EPiServer.Commerce.Order.Internal.CartMigrator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.ProfileMigrator" /> class.
            </summary>
            <param name="orderRepository">The order repository.</param>
            <param name="currentMarket">The current market.</param>
            <param name="cartMigrator">The cart migrator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.ProfileMigrator.MigrateOrders(System.Guid)">
            <summary>
            Migrates the orders.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.ProfileMigrator.MigrateCarts(System.Guid)">
            <summary>
            Migrates the existing cart, merges the items.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.ProfileMigrator.MigrateWishlists(System.Guid)">
            <summary>
            Migrates the wishlist, merges the items.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderEvents">
             <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
            
             Handles events for orders processed via <see cref="T:EPiServer.Commerce.Order.IOrderRepository"/>.
             </summary>
        </member>
        <member name="E:EPiServer.Commerce.Order.IOrderEvents.SavingOrder">
            <summary>
            Is called before an order is saved.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Order.IOrderEvents.SavedOrder">
            <summary>
            Is called after an order is saved.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Order.IOrderEvents.DeletingOrder">
            <summary>
            Is called before an order is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Order.IOrderEvents.DeletedOrder">
            <summary>
            Is called after an order is deleted.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderGroupExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ApplyDiscounts(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Commerce.Marketing.PromotionEngineSettings)">
            <summary>
            Applies the discounts.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="settings">The settings.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ApplyDiscounts(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionEngineSettings)">
            <summary>
            Applies the discounts.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="settings">The settings.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ApplyDiscounts(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Applies the discounts.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ValidateOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.ILineItemValidator,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the line items and removes from the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> if they are invalid..
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="lineItemValidator">The line item validator.</param>
            <param name="ignoredIssues">The ignored issues.</param>
            <remarks>
            The line items have <see cref="T:EPiServer.Commerce.Order.ValidationIssue"/> in <paramref name="ignoredIssues"/> will not removed.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ValidateOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.ILineItemValidator)">
            <summary>
            Validates the line items and removes from the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> if they are invalid..
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="lineItemValidator">The line item validator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ValidateOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the line items and removes from the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> if they are invalid.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ValidateOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Validates the line items and removes from the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> if they are invalid..
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="ignoredIssues">The ignored issues.</param>
            <remarks>
            The line items have <see cref="T:EPiServer.Commerce.Order.ValidationIssue"/> in <paramref name="ignoredIssues"/> will not removed.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdateInventoryOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.IInventoryProcessor)">
            <summary>
            Updates the inventory for the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if no available inventory.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdateInventoryOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates the inventory for the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if no available inventory.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">The on validation error.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AdjustInventoryOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.IInventoryProcessor)">
            <summary>
            Adjusts the inventory.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="inventoryProcessor">The inventory processor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AdjustInventoryOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Adjusts the inventory for <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if no available inventory.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ProcessPayments(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPaymentProcessor,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Processes the payments.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="paymentProcessor">The payment processor.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.ProcessPayments(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Processes the payments.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdatePlacedPriceOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.Customers.CustomerContact,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.IPlacedPriceProcessor)">
            <summary>
            Updates all of the line item placed prices for the specified <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if there is no valid price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="customerContact"></param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="placedPriceUpdater">The placed price updater.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdatePlacedPriceOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},EPiServer.Commerce.Order.IPlacedPriceProcessor)">
            <summary>
            Updates all of the line item placed prices for the specified <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if there is no valid price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="placedPriceUpdater">The placed price updater.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdatePlacedPriceOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates all of the line item placed prices for the specified <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if their is no valid price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdatePlacedPriceOrRemoveLineItems(EPiServer.Commerce.Order.IOrderGroup,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue},System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates all of the line item placed prices for the specified <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> or removes the line item if there is no valid price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <param name="ignoredIssues">The ignored issues.</param>
            <remarks>
            The line items have <see cref="T:EPiServer.Commerce.Order.ValidationIssue"/> in <paramref name="ignoredIssues"/> will not removed.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the total of discounted prices for all line items in the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The total of discounted prices for all line items in the order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetSubTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the total of discounted prices for all line items in the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The total of discounted prices for all line items in the order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The total for the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The total for the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetHandlingTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the handling total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The handling total for the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetHandlingTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the handling total for the order.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The handling total for the order group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.Currency)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="currency">The currency.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="currency">The currency.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderDiscountTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the order discount price.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The order discount price.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the shipping total for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The shipping total.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the shipping total for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The shipping total.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingSubTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the shipping subtotal for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The shipping subtotal.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingSubTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the shipping subtotal for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The shipping subtotal.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingSubTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShippingCalculator)">
            <summary>
            Gets the shipping subtotal for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <returns>The shipping subtotal.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingDiscountTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the shipping discount for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The shipping discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetRawShippingDiscountTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the unrounded shipping discount for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>Shipping discount with full precision.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetShippingDiscountTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShippingCalculator)">
            <summary>
            Gets the shipping discount for the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <returns>The shipping discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderGroupTotals(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the order group totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The order group totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetOrderGroupTotals(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the order group totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The order group totals.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetTaxTotal(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the order group tax total.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The order group tax total.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetTaxTotal(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator)">
            <summary>
            Gets the order group tax total.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <returns>The order group tax total.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderForm(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the order form.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderForm"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateShipment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the shipment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IShipment"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateLineItem(EPiServer.Commerce.Order.IOrderGroup,System.String,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the line item.
            </summary>
            <param name="code">The line item code.</param>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ILineItem"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderAddress(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory,System.String)">
            <summary>
            Creates the order address.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <param name="addressId">The address id.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderAddress"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderNote(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the order note.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderNote"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreatePayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the payment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreatePayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory,System.Type)">
            <summary>
            Creates the payment with a specified payment implementation.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <param name="paymentType">The payment implementation class type.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateCardPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the card payment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICreditCardPayment"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateTaxValue(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Creates the tax value.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="orderGroupFactory">The order group factory.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ITaxValue"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderForm(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the order form.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderForm"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateShipment(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the shipment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IShipment"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateLineItem(EPiServer.Commerce.Order.IOrderGroup,System.String)">
            <summary>
            Creates the line item.
            </summary>
            <param name="code">The line item code.</param>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ILineItem"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderAddress(EPiServer.Commerce.Order.IOrderGroup,System.String)">
            <summary>
            Creates the order address.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <param name="addressId">The address id.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderAddress"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateOrderNote(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the order note.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IOrderNote"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreatePayment(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the payment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateCardPayment(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the card payment.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICreditCardPayment"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CreateTaxValue(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates the tax value.
            </summary>
            <param name="orderGroup">The order group to create object for.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ITaxValue"/></returns>
            <remarks>This is a convenience method that will use the appropriate order group factory registered in the 
            container. Since it depends on container registration it is not recommended to use in code you intend to 
            have unit tests for.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddLineItem(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Adds the line item to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IShipment" /> on <paramref name="orderGroup" />.Forms and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="lineItem">The line item.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddLineItem(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Adds the line item to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IShipment" /> on <paramref name="orderGroup" />.Forms and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="lineItem">The line item.</param>
            <param name="orderGroupFactory">The builder to use for creating an order form and/or shipment (if needed).</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddLineItem(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Adds the line item to the  specified order form.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IShipment" /> on <paramref name="orderForm" />.Shipments and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <param name="lineItem">The line item.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddLineItem(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Adds the line item to the  specified order form.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IShipment" /> on <paramref name="orderForm" />.Shipments and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <param name="lineItem">The line item.</param>
            <param name="orderGroupFactory">The builder to use for creating an order form and/or shipment (if needed).</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddLineItem(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Adds the line item to the order group for the specified shipment.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shipment">The shipment.</param>
            <param name="lineItem">The line item.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddShipment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Adds the line item to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shipment">The shipment.</param>
            <param name="orderGroupFactory">The builder to use for creating an order form (if needed).</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddShipment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Adds the line item to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddShipment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Adds the shipment to the specified order form.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment)">
            <summary>
            Adds the payment to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.IPayment)">
            <summary>
            Adds the shipment to the specified order form.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <param name="payment">The payment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.AddPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Adds the payment to the order group.
            Will use the first <see cref="T:EPiServer.Commerce.Order.IOrderForm" /> on <paramref name="orderGroup"></paramref> and create one if it does not exist.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
            <param name="orderGroupFactory">The builder to use for creating an order form (if needed).</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetFirstForm(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the first order form from the order group. Returns null if none exists.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.IOrderForm"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetFirstShipment(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the first shipment from the first order form. Returns null if none exists.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Order.IShipment"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.GetAllLineItems(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets all line items for the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
            <param name="orderGroup">The order group.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.UpdateLineItemQuantity(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.ILineItem,System.Decimal)">
            <summary>
            Updates quantity of a line item in a shipment.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="shipment">The shipment where the line item belongs to.</param>
            <param name="lineItem">The line item that needs to change the quantity.</param>
            <param name="quantity">The new quantity.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CopyFrom(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Copies all components from an <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> with a specified <see cref="T:EPiServer.Commerce.Order.IOrderGroupFactory"/>.
            </summary>
            <param name="orderGroup">The destination order group.</param>
            <param name="sourceOrderGroup">The source order group.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderGroupExtensions.CopyFrom(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Copies all components from an <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> with a specified <see cref="T:EPiServer.Commerce.Order.IOrderGroupFactory"/>.
            </summary>
            <param name="orderGroup">The destination order group.</param>
            <param name="sourceOrderGroup">The source order group.</param>
            <param name="orderGroupFactory">The factory to use for creating sub-objects to the destination order group.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderProvider`1">
            <summary>
            Provider for an <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider`1.Create(System.Guid,System.String)">
            <summary>
            Creates an order for a specific customer.
            </summary>
            <param name="customerId">The customer id.</param>
            <param name="name">The order name.</param>
            <returns>The order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider`1.Load(System.Int32)">
            <summary>
            Loads the order.
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider`1.Load(System.Guid,System.String)">
            <summary>
            Loads the orders.
            </summary>
            <param name="customerId">The customer guid.</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider`1.Save(`0)">
            <summary>
            Persist the order group.
            </summary>
            <param name="order">The order group.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider`1.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order using an order reference.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderRepository">
            <summary>
            The order repository, which handles the persistence of orders.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Create``1(System.Guid,System.String)">
            <summary>
            Creates an order
            </summary>
            <param name="customerId">The customer guid</param>
            <param name="name">The name of the order</param>
            <returns>The created order</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderLink">The order link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load``1(System.Int32)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The order</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load``1(System.Guid,System.String)">
            <summary>
            Loads all orders of a specific type for a customer.
            </summary>
            <param name="customerId">The customer guid</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load(System.Guid,System.String)">
            <summary>
            Loads all orders for a customer.
            </summary>
            <param name="customerId">The customer guid</param>
            <param name="name">The name of the order. The name is not unique for each order, instead it's suppose to differentiate orders of the same type.</param>
            <returns>The orders</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Save(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves the order.
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.SaveAsPaymentPlan(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves a cart as a <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>.
            </summary>
            <param name="cart">The cart</param>
            <returns>The order link of the <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.SaveAsPurchaseOrder(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Saves a cart as a <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>.
            </summary>
            <param name="cart">The cart</param>
            <returns>The order link of the <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Delete(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Deletes an order.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderRepositoryCallback">
            <summary>
            The order repository callback, which handles the callback of orders.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnCreating(System.Guid,System.String)">
            <summary>
            Occurs when order group was creating.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnCreated(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Occurs when order group was created.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnUpdating(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Occurs when order group was updating.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnUpdated(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Occurs when order group was updated.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnDeleting(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Occurs when order group was deleting.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryCallback.OnDeleted(EPiServer.Commerce.Order.OrderReference)">
            <summary>
            Occurs when order group was deleted.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderRepositoryExtensions">
            <summary>
            Provides convenience extension methods when working with IOrderRepository.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryExtensions.LoadOrCreateCart``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid,System.String)">
            <summary>
            Loads the specific type of order for the specified customer. If type of order does not exist one will be created and returned.
            </summary>
            <typeparam name="TCart">The type of <see cref="T:EPiServer.Commerce.Order.ICart"/> to load or create.</typeparam>
            <param name="orderRepository">The IOrderRepository that this method extends.</param>
            <param name="customerId">The id of the customer to load the order for.</param>
            <param name="orderTypeName">
                The type of order to load (or create). 
                The name is not unique for each order, instead it differentiates orders for a customer (e.g. Default or Wishlist).
            </param>
            <returns>An order for the specified customer in current market.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryExtensions.LoadOrCreateCart``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid,System.String,Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Loads the specific type of order for the specified customer. If type of order does not exist one will be created and returned.
            </summary>
            <typeparam name="TCart">The type of <see cref="T:EPiServer.Commerce.Order.ICart" /> to load or create.</typeparam>
            <param name="orderRepository">The IOrderRepository that this method extends.</param>
            <param name="customerId">The id of the customer to load the order for.</param>
            <param name="orderTypeName">The type of order to load (or create).
            The name is not unique for each order, instead it differentiates orders for a customer (e.g. Default or Wishlist).</param>
            <param name="currentMarket">The current market.</param>
            <returns>
            An order for the specified customer in current market.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryExtensions.LoadCart``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid,System.String)">
            <summary>
            Loads the cart for current market if exist or returns null.
            </summary>
            <typeparam name="TCart">The type of <see cref="T:EPiServer.Commerce.Order.ICart"/> to load.</typeparam>
            <param name="orderRepository">The IOrderRepository that this method extends.</param>
            <param name="customerId">The id of the customer to load the <see cref="T:EPiServer.Commerce.Order.ICart"/> for.</param>
            <param name="orderTypeName">The type of order to load. 
                The name is not unique for each order, instead it differentiates orders for a customer (e.g. Default or Wishlist).
            </param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICart"/> for the specified customer.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryExtensions.LoadCart``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid,System.String,Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Loads the cart for current market if exist or returns null.
            </summary>
            <typeparam name="TCart">The type of <see cref="T:EPiServer.Commerce.Order.ICart"/> to load.</typeparam>
            <param name="orderRepository">The IOrderRepository that this method extends.</param>
            <param name="customerId">The id of the customer to load the <see cref="T:EPiServer.Commerce.Order.ICart"/> for.</param>
            <param name="orderTypeName">The type of order to load. 
                The name is not unique for each order, instead it differentiates orders for a customer (e.g. Default or Wishlist).
            </param>
            <param name="currentMarket"> The ICurrentMarket.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICart"/> for the specified customer.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepositoryExtensions.LoadCart``1(EPiServer.Commerce.Order.IOrderRepository,System.Guid,System.String,Mediachase.Commerce.MarketId)">
            <summary>
            Loads the cart for a specific market if exist or returns null.
            </summary>
            <typeparam name="TCart">The type of <see cref="T:EPiServer.Commerce.Order.ICart"/> to load.</typeparam>
            <param name="orderRepository">The IOrderRepository that this method extends.</param>
            <param name="customerId">The id of the customer to load the <see cref="T:EPiServer.Commerce.Order.ICart"/> for.</param>
            <param name="orderTypeName">The type of order to load. 
                The name is not unique for each order, instead it differentiates orders for a customer (e.g. Default or Wishlist).
            </param>
            <param name="marketId">The market id.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.ICart"/> for the specified customer.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentMethod">
            <summary>
            Represents a payment method for <see cref="T:Mediachase.Commerce.Orders.Payment"/>s that are processed by a Payment Gateway.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.IPaymentMethod.PaymentMethodId">
            <summary>
            Gets the id of the payment method.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.IPaymentMethod.SystemKeyword">
            <summary>
            Gets the system keyword of the payment method.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.IPaymentMethod.Name">
            <summary>
            Gets the payment method name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.IPaymentMethod.Description">
            <summary>
            Gets the description of the payment method.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentMethod.ValidateData">
            <summary>
            Validates input related to the payment method, to be used before creating the actual <see cref="T:EPiServer.Commerce.Order.IPayment"/>.
            </summary>
            <returns>Returns <c>true</c> if all input for payment is correct, else returns <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentMethod.CreatePayment(System.Decimal,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Creates and returns an instance of a new <see cref="T:EPiServer.Commerce.Order.IPayment"/> based on the current payment method.
            </summary>m>
            <param name="amount">The amount to be paid.</param>
            <param name="orderGroup">The <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> the payment belongs to.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPayment"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentPlanExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentPlanExtensions.CanBeCancelled(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/> can be cancelled.
            </summary>
            <param name="paymentPlan">The payment plan.</param>
            <returns><c>true</c> if payment plan can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentPlanProcessor">
            <summary>
            The processor responsible for processing a <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentPlanProcessor.CancelPaymentPlan(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.
            </summary>
            <param name="paymentPlan">The payment plan.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentPlanProvider">
            <summary>
            Handles loading and persistence for <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentPlanProvider.SaveAsPurchaseOrder(EPiServer.Commerce.Order.IPaymentPlan)">
            <summary>
            Saves the <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/> as <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="paymentPlan">The <see cref="T:EPiServer.Commerce.Order.IPaymentPlan"/>.</param>
            <returns>An <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentPlugin">
            <summary>
            Interface to process payment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.IPaymentPlugin.Settings">
            <summary>
            Returns the configuration data associated with a plugin.
            Sets the configuration plugin data. This data typically includes
            information like plugin URL, account info and so on.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentPlugin.ProcessPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment)">
            <summary>
            Processes the payment. Can be used for both positive and negative transactions.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
            <returns>The payment processing result.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentProcessor">
            <summary>
            Processes <see cref="T:EPiServer.Commerce.Order.IPayment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPaymentProcessor.ProcessPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Processes the payment.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
            <param name="shipment">The shipment.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPlacedPriceProcessor">
            <summary>
            Service for updating and retrieving <see cref="P:EPiServer.Commerce.Order.ILineItem.PlacedPrice"/> for <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPlacedPriceProcessor.UpdatePlacedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates the <see cref="T:EPiServer.Commerce.Order.ILineItem" /> item placed price or raises <see cref="T:EPiServer.Commerce.Order.ValidationIssue" /> if there is no valid price.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <returns><c>true</c> if price is valid; otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPlacedPriceProcessor.GetPlacedPrice(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Decimal,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the placed price.
            </summary>
            <param name="entry">The entry.</param>
            <param name="quantity">The quantity.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <returns>A <see cref="T:Mediachase.Commerce.Money"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPlacedPriceProcessor.UpdatePlacedPrice(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Updates the <see cref="T:EPiServer.Commerce.Order.ILineItem" /> placed price or raises <see cref="T:EPiServer.Commerce.Order.ValidationIssue" /> if there is no valid price.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <param name="onValidationError">A callback that is invoked if a validation issue is detected.</param>
            <returns><c>true</c> if price is valid; otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPlacedPriceProcessor.GetPlacedPrice(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Decimal,Mediachase.Commerce.Customers.CustomerContact,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency)">
            <summary>
            Gets the placed price.
            </summary>
            <param name="entry">The entry.</param>
            <param name="quantity">The quantity.</param>
            <param name="customerContact">The customer contact.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <returns>A <see cref="T:Mediachase.Commerce.Money"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IProfileMigrator">
            <summary>
            Migrates the orders, carts, wishlist when an anonymous user logs in.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IProfileMigrator.MigrateOrders(System.Guid)">
            <summary>
            Migrates the orders.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IProfileMigrator.MigrateCarts(System.Guid)">
            <summary>
            Migrates the carts.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IProfileMigrator.MigrateWishlists(System.Guid)">
            <summary>
            Migrates the wishlists.
            </summary>
            <param name="anonymousId">The anonymous identifier.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPurchaseOrderExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.IsPaid(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> is paid.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns><c>true</c> if order is paid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.IsPaid(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IOrderGroupCalculator,EPiServer.Commerce.Order.IReturnOrderFormCalculator,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> is paid.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="returnOrderFormCalculator">The return order form calculator.</param>
            <param name="marketService">The market service.</param>
            <returns><c>true</c> if order is paid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanBeCancelled(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> can be cancelled.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns><c>true</c> if order can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanBeCancelled(EPiServer.Commerce.Order.IPurchaseOrder,Mediachase.Commerce.Orders.OrderShipmentStatusService)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> can be cancelled.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="orderShipmentStatusService">The order shipment status service.</param>
            <returns><c>true</c> if order can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanBePutOnHold(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> can be put on hold.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns><c>true</c> if order can be put on hold; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.HasAwaitingStockReturns(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> has any waiting stock return form.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns><c>true</c> if order has any waiting stock return form; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.HasAwaitingReturnCompletable(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> has any awaiting completion return form.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns><c>true</c> if order has any awaiting completion return form; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanReleaseShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be released.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <returns><c>true</c> if the shipment can be released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanReleaseShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Orders.OrderShipmentStatusService)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be released.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <param name="orderShipmentStatusService">The order shipment status service.</param>
            <returns><c>true</c> if the shipment can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanCancelShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be cancelled.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <returns><c>true</c> if the shipment can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanCancelShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment,Mediachase.Commerce.Orders.OrderShipmentStatusService)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be cancelled.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <param name="orderShipmentStatusService">The order shipment status service</param>
            <returns><c>true</c> if the shipment can be cancelled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanReturnShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be returned.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <returns><c>true</c> if the shipment can be returned; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.GetAvailableForReturnLineItems(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Get line items available for return for an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.CanCompleteShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be completed.
            </summary>
            <param name="order">The order containing the shipment.</param>
            <param name="shipment">The shipment.</param>
            <returns><c>true</c> if the shipment can be completed, i.e. when it is already shipped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderExtensions.GetActiveReturnForms(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Gets the active return forms.
            </summary>
            <param name="order">The order containing the return form.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPurchaseOrderProcessor">
            <summary>
            The processor responsible for processing a <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderProcessor.CancelOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderProcessor.ProcessOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Processes an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderProcessor.HoldOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Holds an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderProcessor.ReleaseOrder(EPiServer.Commerce.Order.IPurchaseOrder)">
            <summary>
            Releases an on-hold <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPurchaseOrderProvider">
            <summary>
            Handles loading and persistence for <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPurchaseOrderRepository">
            <summary>
            The interface with purchase order specific methods.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IPurchaseOrderRepository.Load(System.String)">
            <summary>
            Loads a specific purchase order by the tracking number.
            </summary>
            <param name="trackingNumber">The tracking number.</param>
            <returns>
            The matching <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IReturnOrderFormExtensions">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
             
            Extensions for <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.CanCreateExchangeOrder(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Checks whether it can create an exchange order from a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.IsEditable(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Checks whether a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> is editable.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.IsCancellable(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Checks whether a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> is cancellable.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.IsAwaitingCompletion(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Checks whether a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> is awaiting completion.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.IsAwaitingStockReturn(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Checks whether a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> is awaiting stock return.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.GetTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the total for the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <returns>The total for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.GetTotal(EPiServer.Commerce.Order.IReturnOrderForm,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Order.IReturnOrderFormCalculator)">
            <summary>
            Gets the total for the return order form.
            </summary>
            <param name="returnOrderForm">The return order form.</param>
            <param name="market">The market to be used in the calculation.</param>
            <param name="currency">The currency to be used in the calculation.</param>
            <param name="returnOrderFormCalculator">The return order form calculator.</param>
            <returns>The total for the return order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderFormExtensions.GetAllReturnLineItems(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Gets all line items for the <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IReturnOrderService">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
             
            Handles operations on <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/> such as complete, cancel a return or acknowledge receipt items of a return.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderService.AcknowledgeReceiptOfItems(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Acknowledges receipt of items of a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderService.CancelReturn(EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Cancels a <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderService.CompleteReturn(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Completes an <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </summary>
            <param name="purchaseOrder">The purchase order that the return form was created for.</param>
            <param name="returnForm">The return order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderService.CreateExchangeOrder(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Creates an exchange order for an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="purchaseOrder">The purchase order that the exchange order is created for.</param>
            <param name="originalShipment">The original shipment that contains items need to be returned.</param>
            <returns>The exchange order of type <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IReturnOrderService.InvalidatePromotions(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IReturnOrderForm)">
            <summary>
            Invalidates promotions which are no longer applicable after returning items.
            </summary>
            <param name="purchaseOrder">The original <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/>.</param>
            <param name="returnOrderForm">The current <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm" /> in the <paramref name="purchaseOrder"/>.</param>
            <remarks>
            It will update the <see cref="P:EPiServer.Commerce.Order.IOrderForm.Promotions"/> of the <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>
            Also it will update the discount amount of <see cref="T:EPiServer.Commerce.Order.IReturnLineItem"/>s of the <see cref="T:EPiServer.Commerce.Order.IReturnOrderForm"/>.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Order.IShipmentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentExtensions.CanBePacked(EPiServer.Commerce.Order.IShipment)">
            <summary>
            Determines whether an <see cref="T:EPiServer.Commerce.Order.IShipment"/> can be packed.
            </summary>
            <param name="shipment">The shipment.</param>
            <returns><c>true</c> if the shipment can be packed and ready to ship; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IShipmentProcessor">
            <summary>
            The processor responsible for processing a <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.CancelShipment(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Cancels an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.CompleteShipment(EPiServer.Commerce.Order.IPurchaseOrder,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IShipment})">
            <summary>
            Completes a list of <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipments">The enumerable of <see cref="T:EPiServer.Commerce.Order.IShipment"/>.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.ReleaseShipment(EPiServer.Commerce.Order.IPurchaseOrder,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IShipment})">
            <summary>
            Releases a list of <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipments">The enumerable of <see cref="T:EPiServer.Commerce.Order.IShipment"/>.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.AddShipmentToPicklist(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment,System.Int32)">
            <summary>
            Adds an <see cref="T:EPiServer.Commerce.Order.IShipment"/> to picklist.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <param name="pickListId">The pick list id.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.RemoveShipmentFromPicklist(EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Removes an <see cref="T:EPiServer.Commerce.Order.IShipment"/> from picklist. 
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessor.CapturePayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Captures the payment for an <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="order">The order group.</param>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.IShipmentProcessorExtensions">
            <summary>
            Extensions of <see cref="T:EPiServer.Commerce.Order.IShipmentProcessor"/> for processing <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessorExtensions.CompleteShipment(EPiServer.Commerce.Order.IShipmentProcessor,EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Completes an <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Shipped"/>.
            </summary>
            <param name="shipmentProcessor">The shipment processor.</param>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IShipmentProcessorExtensions.ReleaseShipment(EPiServer.Commerce.Order.IShipmentProcessor,EPiServer.Commerce.Order.IPurchaseOrder,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Releases an <see cref="T:EPiServer.Commerce.Order.IShipment"/>. 
            After processed, the <see cref="T:EPiServer.Commerce.Order.IShipment"/> status is set to <see cref="P:Mediachase.Commerce.Orders.OrderShipmentStatus.Released"/>.
            </summary>
            <param name="shipmentProcessor">The shipment processor.</param>
            <param name="purchaseOrder">The purchase order.</param>
            <param name="shipment">The shipment.</param>
            <returns>The order processing result.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.ISplitPaymentPlugin">
            <summary>
            Interface to process payment associated with shipment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.ISplitPaymentPlugin.Settings">
            <summary>
            Returns the configuration data associated with a plugin.
            Sets the configuration plugin data. This data typically includes
            information like plugin URL, account info and so on.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.ISplitPaymentPlugin.ProcessPayment(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IPayment,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Process payment associated with shipment.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="payment">The payment.</param>
            <param name="shipment">The shipment.</param>
            <returns><c>True</c> if process successful, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderEventArgs">
            <summary>
            Event arguments for order events.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderEventArgs.#ctor(EPiServer.Commerce.Order.OrderReference,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Order.OrderEventArgs"/>
            </summary>
            <param name="orderLink">The order link.</param>
            <param name="orderGroup">The order group.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.OrderEventArgs.OrderLink">
            <summary>
            Gets the <see cref="T:EPiServer.Commerce.Order.OrderReference"/> of the order being processed.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.OrderEventArgs.OrderGroup">
            <summary>
            Gets the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> being processed.
            </summary>
            <remarks>In case of <see cref="E:EPiServer.Commerce.Order.IOrderEvents.DeletingOrder"/> and <see cref="E:EPiServer.Commerce.Order.IOrderEvents.DeletedOrder"/>, this will be null.
            To process orders when they are deleted, listen to <see cref="E:EPiServer.Commerce.Order.IOrderEvents.DeletingOrder"/> and load the order there.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderGroupExtensions">
            <summary>
            Provides extensions for <see cref="T:Mediachase.Commerce.Orders.OrderGroup"/> when for creating implementations of <see cref="T:EPiServer.Commerce.Order.IOrderProvider`1"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupExtensions.Initialize(Mediachase.Commerce.Orders.OrderGroup,Mediachase.Commerce.ICurrentMarket,EPiServer.ServiceLocation.ServiceAccessor{Mediachase.Commerce.Core.SiteContext},Mediachase.Commerce.Customers.CustomerContext)">
            <summary>
            Initializes the order with an <see cref="T:EPiServer.Commerce.Order.IOrderForm"/> and <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
            <param name="order">The order.</param>
            <param name="currentMarket">The current market.</param>
            <param name="siteContextAccessor">The site context accessor.</param>
            <param name="customerContext">The customer context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupExtensions.Save(Mediachase.Commerce.Orders.OrderGroup,EPiServer.Commerce.Order.IOrderGroupTotalsCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Saves the specified order group totals calculator.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupTotalsCalculator">The order group totals calculator.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupExtensions.Save(Mediachase.Commerce.Orders.OrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Saves the specified order group totals calculator.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="languageResolver">The language resolver.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupExtensions.CalculateTotals(Mediachase.Commerce.Orders.OrderGroup,EPiServer.Commerce.Order.IOrderGroupCalculator,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Calculates and updates the specified order group totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderGroupCalculator">The order group calculator.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="languageResolver">The language resolver.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupExtensions.UpdateOrderFormTotals(Mediachase.Commerce.Orders.OrderGroup,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Globalization.LanguageResolver,EPiServer.Commerce.Order.OrderGroupTotals)">
            <summary>
            Updates order form totals from order group calculated totals.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="relationRepository">The relation repository.</param>
            <param name="languageResolver">The language resolver</param>
            <param name="calculatedTotals">The totals calculated from order group.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderProcessingResult">
            <summary>
            Represents results when processing an <see cref="T:EPiServer.Commerce.Order.IPurchaseOrder"/> or <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderProcessingResult.#ctor(System.Collections.Generic.IDictionary{EPiServer.Commerce.Order.ILineItem,System.Collections.Generic.IList{EPiServer.Commerce.Order.ValidationIssue}})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.OrderProcessingResult" /> class.
            </summary>
            <param name="result">The order processing result.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.OrderProcessingResult.Result">
            <summary>
            Gets the processing result.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderValidationService">
            <summary>
            Validates and update order/cart information regarding prices, inventories and promotions.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderValidationService.#ctor(EPiServer.Commerce.Order.ILineItemValidator,EPiServer.Commerce.Order.IPlacedPriceProcessor,EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Commerce.Order.IInventoryProcessor)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Order.OrderValidationService"/>.
            </summary>
            <param name="lineItemValidator"></param>
            <param name="placedPriceProcessor"></param>
            <param name="promotionEngine"></param>
            <param name="inventoryProcessor"></param>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderValidationService.ValidateOrder(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Validates an order or a cart information regarding prices, inventories and promotions.
            This method will make sure the order/cart has updated prices and promotions information. 
            It removes line items that are no longer available, or without valid prices, or out of stock, and it applies applicable promotions.
            </summary>
            <remarks>The validation for wishlist is ignored.</remarks>
            <param name="orderGroup">The order.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.PaymentProcessingResult">
            <summary>
            Represents results when processing an <see cref="T:EPiServer.Commerce.Order.IPayment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.PaymentProcessingResult.IsSuccessful">
            <summary>
            Gets the flag indicating whether the processing is successful.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.PaymentProcessingResult.Message">
            <summary>
            Gets the message during processing.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.PaymentProcessingResult.RedirectUrl">
            <summary>
            Gets the redirect url.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentProcessingResult.CreateSuccessfulResult(System.String)">
            <summary>
            Creates successful processing result.
            </summary>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentProcessingResult.CreateSuccessfulResult(System.String,System.String)">
            <summary>
            Creates successful processing result with specific action.
            </summary>
            <param name="message">The message.</param>
            <param name="redirectUrl">The redirect url.</param>
            <returns>Instance of <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentProcessingResult.CreateUnsuccessfulResult(System.String)">
            <summary>
            Creates unsuccessful processing result.
            </summary>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:EPiServer.Commerce.Order.PaymentProcessingResult"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.IPaymentOption">
            <summary>
            Represents a payment gateway provider.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            The response from a tokenized request.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse.Content">
            <summary>
            The content from tokenized request.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse.IsSuccess">
            <summary>
            Gets or sets a value indicating if the overall operation was a success.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse.Message">
            <summary>
            The error message from tokenized request.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse.StatusCode">
            <summary>
            The status code from tokenized request.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizationGateway">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            The Tokenization Gateway API allows clients to interact with third-party APIs without handling sensitive data directly.
            </summary>
            <remarks>
            Upon receiving the request, TokenizationGateway will perform the necessary operations on the request and forward the request to the provided URL. 
            The unaltered response from the third party is returned to the client’s application.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizationGateway.Send(EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest)">
            <summary>
            Forwards a POST request with tokenized data in <see cref="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest"/> object to the specified third-party endpoint.
            </summary>
            <param name="requestData">The tokenzied payload <see cref="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest"/>.</param>
            <returns>
            The unaltered response from the third party <see cref="T:EPiServer.Commerce.Order.Payments.Tokenization.DetokenizedReponse"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizedPayment">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            Represents a tokenization payment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizedPayment.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizedPayment.ExpirationYear">
            <summary>
            Gets or sets the expire year.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.ITokenizedPayment.ExpirationMonth">
            <summary>
            Gets or sets the expire month.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizationOptions">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            Contains options for tokenization service.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizationOptions.TokenizationId">
            <summary>
            Gets or sets the tokenization Id.
            </summary>
            <remarks>Defined by the episerver:tokenization.TokenizationId AppSetting.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizationOptions.ClientSecretKey">
            <summary>
            Gets or sets the client secret key.
            </summary>
            <remarks>Defined by the episerver:tokenization.ClientSecretKey AppSetting.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizationOptions.ApiKey">
            <summary>
            Gets or sets the api key.
            </summary>
            <remarks>Defined by the episerver:tokenization.ApiKey AppSetting.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizationOptions.TestMode">
            <summary>
            Indicates the tokenization service is test or production.
            </summary>
            <remarks>
            Defined by the episerver:tokenization.TestMode AppSetting.
            Default value is false.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            Represents credit card payment with tokenization.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment.TokenizationPaymentMetaClass">
            <summary>
            Gets the Tokenization payment meta class.
            </summary>
            <value>The tokenization payment meta class.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment.ExpirationYear">
            <summary>
            Gets or sets the expiration year.
            </summary>
            <value>The expiration year.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment.ExpirationMonth">
            <summary>
            Gets or sets the expiration month.
            </summary>
            <value>The expiration month.</value>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment.Token">
            <summary>
            The token as generated by Tokenization service that references the sensitive data.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="M:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedPayment"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
            requirements as denoted by its associated normal version.
            
            Represents a tokenized request will pass through Tokenization Gateway to the 3rd-party.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest.Data">
            <summary>
            The tokenized data which will be passed through Tokenization Gateway to the 3rd-party. 
            Tokenization Gateway will replace the token with its corresponding sensitive data before forwarding to the 3rd-party.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest.DataFormat">
            <summary>
            The tokenized data format, ie: text/xml, json...
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Order.Payments.Tokenization.TokenizedRequest.Endpoint">
            <summary>
            The 3rd-party endpoint URL to which the tokenization gateway should POST the detokenized request.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.ValidationIssue">
            <summary>
            The type of validation issue found during order processing.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.None">
            <summary>
            There were no issues found.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.CannotProcessDueToMissingOrderStatus">
            <summary>
            Cannot process due to missing order status.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToCodeMissing">
            <summary>
            The catalog entry code that maps to the line item has been removed or changed.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToNotAvailableInMarket">
            <summary>
            Item has been removed from the cart because it is not available in your market.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToUnavailableCatalog">
            <summary>
            Item has been removed from the cart because the catalog of this entry is not available.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToUnavailableItem">
            <summary>
            Item has been removed from the cart because it is not available at this time.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToInsufficientQuantityInInventory">
            <summary>
            Item has been removed from the cart because there is not enough available quantity.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToInactiveWarehouse">
            <summary>
            Item has been removed from the cart because the selected warehouse is inactive.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToMissingInventoryInformation">
            <summary>
            Item has been removed due to missing inventory information.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToInvalidPrice">
            <summary>
            Item has been removed due to invalid price.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedDueToInvalidMaxQuantitySetting">
            <summary>
            Item has been removed due to invalid setting for maximum quantity.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.AdjustedQuantityByMinQuantity">
            <summary>
            Item quantity has been adjusted due to minimum quantity threshold.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.AdjustedQuantityByMaxQuantity">
            <summary>
            Item quantity has been adjusted due to maximum quantity threshold.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.AdjustedQuantityByBackorderQuantity">
            <summary>
            Item quantity has been adjusted due to backorder quantity threshold.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.AdjustedQuantityByPreorderQuantity">
            <summary>
            Item quantity has been adjusted due to preorder quantity threshold.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.AdjustedQuantityByAvailableQuantity">
            <summary>
            Item quantity has been adjusted due to available quantity threshold.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.PlacedPricedChanged">
            <summary>
            Item placed priced has changed.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RemovedGiftDueToInsufficientQuantityInInventory">
            <summary>
            Gift item has been removed from the cart because there is not enough available quantity.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Order.ValidationIssue.RejectedInventoryRequestDueToInsufficientQuantity">
            <summary>
            The inventory request for item has been rejected because there is not enough available quantity.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Initialization.CartModeInitializationModule">
            <summary>
            Initialization module to handle cart mode.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Initialization.InitializationModule">
            <summary>
            Initialization module to handle the initialization of Commerce.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Initialization.InitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes Commerce using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Commerce.Internal.AuxiliarySchemaUpdaterBase">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Base class for ISchemaUpdater implementations that do other updates than the main commerce schema updates.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.AuxiliarySchemaUpdaterBase.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Commerce.Internal.AuxiliarySchemaUpdaterBase.DatabaseInfoText">
            <summary>
            Info text that will be appended to the database name in the error message if a manual database upgrade is required, e.g.
            "The database 'EPiServer DB ({DatabaseInfoText} for Commerce DB version x.y.z)' has not been updated...".
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Internal.AuxiliarySchemaUpdaterBase.TargetConnectionName">
            <summary>
            The name of the connection to run the update script for.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Internal.CmsDatabaseSchemaUpdater">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Updates all scripts from EPiServer.Commerce.Resources.SqlUpdateCMSScript.zip embeded resource inside the EPiServer.Business.Commerce. 
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.CmsDatabaseSchemaUpdater.#ctor(EPiServer.Data.Providers.IDatabaseExecutorFactory,EPiServer.Data.SchemaUpdates.ScriptExecutor,Mediachase.Data.Provider.IConnectionStringHandler,EPiServer.Framework.Configuration.EPiServerFrameworkSection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Internal.CmsDatabaseSchemaUpdater"/> class.
            </summary>
            <param name="databaseExecutorFactory">The database executor factory.</param>
            <param name="scriptExecutor">The script executor.</param>
            <param name="connectionStringHandler">The connection string handler.</param>
            <param name="frameworkSection">The framework section.</param>
        </member>
        <member name="T:EPiServer.Commerce.Internal.CommerceDatabaseSchemaUpdater">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Updates all scripts from EPiServer.Commerce.Resources.SqlUpdateCommerceScript.zip embeded resource inside the EPiServer.Business.Commerce. 
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.CommerceDatabaseSchemaUpdater.#ctor(EPiServer.Data.Providers.IDatabaseExecutorFactory,EPiServer.Data.SchemaUpdates.ScriptExecutor,Mediachase.Data.Provider.IConnectionStringHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Internal.CommerceDatabaseSchemaUpdater"/> class.
            </summary>
            <param name="databaseExecutorFactory">The database executor factory.</param>
            <param name="scriptExecutor">The script executor.</param>
            <param name="connectionStringHandler">The connection string handler.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.CommerceDatabaseSchemaUpdater.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Internal.InventoryRequester">
             <summary>
             This class is intended to be used internally by EPiServer. We do not support any backward
             compatibility on this. Please DO NOT use this in your project.
            
             Processes inventory requests for <see cref="T:Mediachase.Commerce.InventoryService.InventoryRecord"/>.
             </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.#ctor(Mediachase.Commerce.InventoryService.BusinessLogic.OperationKeySerializer,Mediachase.Commerce.InventoryService.IInventoryService,EPiServer.Commerce.Internal.LineItemQuantityValidator,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Order.IFulfillmentWarehouseProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Internal.InventoryRequester" /> class.
            </summary>
            <param name="operationKeySerializer">The operation key serializer.</param>
            <param name="inventoryService">The inventory service.</param>
            <param name="lineItemQuantityValidator">The line item quantity validator.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="fulfillmentWarehouseProcessor">The fulfillment warehouse processor.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.GetReservedQuantityForLineItem(EPiServer.Commerce.Order.IShipmentInventory,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets the reserved quantity.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="lineItem">The line item.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.CompleteReservedQuantityForShipment(EPiServer.Commerce.Order.IShipmentInventory)">
            <summary>
            Completes the reserved quantity for shipment.
            </summary>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.CancelReservedQuantityForShipment(EPiServer.Commerce.Order.IShipmentInventory)">
            <summary>
            Completes the reserved quantity for shipment.
            </summary>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.CompleteBackOrderItemsForShipment(EPiServer.Commerce.Order.IShipment)">
            <summary>
            Releases the items for shipment.
            </summary>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.CreateInventoryRequestItems(EPiServer.Commerce.Order.IShipmentInventory,EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.InventoryService.InventoryRequestType)">
            <summary>
            Creates the inventory request items.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="lineItem">The line item.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.ReserveInventory(EPiServer.Commerce.Order.IShipment,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Reserves the inventory.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="onValidationError">The on validation error.</param>
        </member>
        <member name="M:EPiServer.Commerce.Internal.InventoryRequester.GetInventoryRequestItems(Mediachase.Commerce.Orders.ILineItemInventory,Mediachase.Commerce.InventoryService.InventoryRecord,System.Decimal)">
            <summary>
            Gets the inventory request items.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="inventoryRecord">The inventory record.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Internal.LineItemQuantityValidator">
            <summary>
            Processes inventory requests for <see cref="T:Mediachase.Commerce.InventoryService.InventoryRecord"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.LineItemQuantityValidator.GetValidatedQuantity(EPiServer.Commerce.Order.IShipmentInventory,EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.InventoryService.InventoryRecord,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Gets the validated line item quantity based on inventory information.
            </summary>
            <param name="shipmentInventory">The shipment inventory containing operation keys for the line item.</param>
            <param name="lineItem">The line item.</param>
            <param name="inventoryRecord">The inventory record.</param>
            <param name="onValidationError">The on validation error.</param>
            <returns>The validated quantity of the given line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.LineItemQuantityValidator.GetAllowedQuantity(EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,System.Action{EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.ValidationIssue})">
            <summary>
            Gets the allowed line item quantity based on <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement"/> information.
            </summary>
            <param name="lineItem">The line item.</param>
            <param name="stock">The stock.</param>
            <param name="onValidationError">The on validation error.</param>
            <returns>The allowed quantity of the given line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.LineItemQuantityValidator.GetLineItemRequestedQuantity(EPiServer.Commerce.Order.IShipmentInventory,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Gets requested quantity of an <see cref="T:EPiServer.Commerce.Order.ILineItem"/> based on <see cref="T:EPiServer.Commerce.Order.IShipmentInventory"/>.
            </summary>
            <param name="shipmentInventory">The shipment inventory.</param>
            <param name="lineItem">The line item.</param>
            <returns>The requested quantity of the given line item.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Internal.SchemaUpdaterBase">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.Update(EPiServer.Data.ConnectionStringOptions)">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Commerce.Internal.SchemaUpdaterBase.ZipFileName">
            <summary>
            Name of the embedded zip containing the DB upgrade scripts.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.GetCommerceConnection(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <summary>
            Gets the <see cref="T:EPiServer.Data.ConnectionStringOptions"/> of the Commerce database from the input collection.
            </summary>
            <param name="connectionStringOptions">All configured connections.</param>
            <returns>The commerce connection if found, otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.GetConnection(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions},System.String)">
            <summary>
            Gets the <see cref="T:EPiServer.Data.ConnectionStringOptions"/> of with the specified name.
            </summary>
            <param name="connectionStringOptions">All configured connections.</param>
            <param name="connectionName">The connection string name to match.</param>
            <returns>The matching connection if found, otherwise null.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.GetCurrentCommerceDatabaseVersion(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <summary>
            Gets the current database version of the commerce database.
            </summary>
            <param name="connectionStringOptions">All configured connections.</param>
            <returns>The current database version.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Internal.SchemaUpdaterBase.GetRequiredCommerceDatabaseVersion">
            <summary>
            Gets the commerce database version required to run this assembly version.
            </summary>
            <returns>The required commerce database version.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.AdditionalPromotionInformationContext">
            <summary>
                Context object passed into <see cref="T:EPiServer.Commerce.Marketing.IAdditionalPromotionInformationCreator"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AdditionalPromotionInformationContext.PromotionData">
            <summary>
            The promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AdditionalPromotionInformationContext.OrderForm">
            <summary>
            The order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AdditionalPromotionInformationContext.OrderGroup">
            <summary>
            The order group.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.AffectedEntries">
            <summary>
                Used for handling redemption calculations on entry promotions.
            </summary>
            <remarks>
            An example of typical usage of this class:
            <para>
            You have a "Buy 3 pay for 2" type of discount. The AffectedEntries would be filled with a quantity of three
            (corresponding to the "Buy 3" part), and you would call SetDiscountRange with parameters 2, 1 to indicate
            that the discount would be applied to the last item (skip 2 and apply to the final single quantity).
            </para>
            <para>
            Note that setting a discount range and iterating over that range might mean that the configuration of the
            underlying list might change, since individual price entries might be split to support the requests. There
            is even support for having fractional quantities.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.#ctor(System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PriceEntry})">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/>.
            </summary>
            <param name="priceEntries">The price entries.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.#ctor(EPiServer.Commerce.Marketing.AffectedEntries)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/> that is a copy of <paramref name="original"/>.
            </summary>
            <param name="original">The instance to copy.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedEntries.PriceEntries">
            <summary>
            Gets the price entries
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedEntries.BatchId">
            <summary>
            Identifier to track this specific instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedEntries.Quantity">
            <summary>
            The total quantity of entries in this instance.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.ShallowCopy">
            <summary>
            Creates a shallow copy of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.SetDiscountRange(System.Decimal,System.Decimal)">
            <summary>
            Set the range on this instance that will have actual discounting applied to it.
            </summary>
            <param name="skip">The amount of quantity to skip from the beginning of the list.</param>
            <param name="quantity">The quantity to actually use when applying discounts.</param>
            <returns>This instance.</returns>
            <remarks>You can reset the discount range by calling this method with both parameters set to 0.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.DiscountRange">
            <summary>
            Gets the subset range of this instance based on values set in <see cref="M:EPiServer.Commerce.Marketing.AffectedEntries.SetDiscountRange(System.Decimal,System.Decimal)"/>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to iterate over the contained PriceEntries.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.SavedAmountPerCode">
            <summary>
            Gets information about the saved amount per code.
            </summary>
            <returns>A Dictionary that contains the code as key and the saved amount as value.</returns>
            <remarks>Note that the iteration is done over the current discount range.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedEntries.ForEachCode``1(System.Func{EPiServer.Commerce.Marketing.PriceEntry,``0,``0})">
            <summary>
            Enumerates over all entries in the current discount range and performs calculation per entry code.
            </summary>
            <typeparam name="T">The resulting type of the calculation, usually decimal if summing up values.</typeparam>
            <param name="calculation">The actual calculation to perform. Takes a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> and an accumulator and returns the accumulator together with the new value.</param>
            <returns>A Dictionary that contains the code as key and the final result of the calculation as value.</returns>
            <remarks>
            Note that the iteration is done over the current discount range, which is usually the only 
            interesting part. If you need to iterate over the entire range of entries, reset by calling 
            SetDiscountRange(0, 0).
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedEntries.EPiServer#Commerce#Marketing#IAffectedObject#SavedAmount">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.AffectedOrder">
            <summary>
            The affected order of the promotion evaluation, used by order promotions.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedOrder.#ctor(EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.AffectedOrder"/> class. All line items in the order will be affected.
            </summary>
            <param name="orderForm">The affected order by the promotion.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedOrder.LineItems">
            <summary>
            The line items in the order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedOrder.EPiServer#Commerce#Marketing#IAffectedObject#SavedAmount">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.AffectedShipments">
            <summary>
            The affected shipment of the promotion evaluation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.AffectedShipments.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.ShipmentPrice})">
            <summary>
                Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.AffectedShipments" /> class.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedShipments.ShipmentPrices">
            <summary>
            Gets the shipment prices.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.AffectedShipments.EPiServer#Commerce#Marketing#IAffectedObject#SavedAmount">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CampaignInfoExtractor">
            <summary>
            Helper class to work with campaign item info
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveValidFrom(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Gets the effective valid from.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveValidUntil(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Gets the effective valid until.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveStatus(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Gets the effective <see cref="T:EPiServer.Commerce.Marketing.CampaignItemStatus"/> of a promotion.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns>Active if the promotion's <see cref="T:EPiServer.Commerce.Marketing.CampaignItemStatus"/> is Active and also have an
            existing schedule with applicable dates, else Inactive.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetStatusFromDates(System.DateTime,System.DateTime)">
            <summary>
            Gets the status from valid dates.
            </summary>
            <param name="validFrom">The valid from.</param>
            <param name="validUntil">The valid until.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetStatusForPromotion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Returns the <see cref="T:EPiServer.Commerce.Marketing.CampaignItemStatus"/> based on a whether a promotion is active or not.
            </summary>
            <param name="promotion">The promotion to evaluate.</param>
            <returns>Active if the promotion is active, else Inactive.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CampaignItemStatus">
            <summary>
            Status values for campaign items
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.NotSet">
            <summary>
            Default value when not set
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Active">
            <summary>
            Item active
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Pending">
            <summary>
            Item scheduled
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Expired">
            <summary>
            Item expired
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Inactive">
            <summary>
            Item inactive (includes suspended, deleted or archived items)
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter">
            <summary>
            A filter that filters on if the current user is part of any visitor groups required by a campaign.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase},EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository,EPiServer.IContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter" /> class.
            </summary>
            <param name="httpContextAccessor">Accessor to get the current http context.</param>
            <param name="visitorGroupRepository">Repository used to load visitor groups.</param>
            <param name="visitorGroupRoleRepository">Repository needed to validate if a principal belongs to a visitor group.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter.Filter(EPiServer.Commerce.Marketing.PromotionFilterContext)">
            <summary>
            Filters campaigns on if the current user belongs to any of the required visitor groups.
            </summary>
            <param name="filterContext">The filter context.</param>
            <returns>
            The same <see cref="T:EPiServer.Commerce.Marketing.PromotionFilterContext"/> after filtering and adding applied visitor groups.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter.CampaignsFilter(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Filters the campaigns on if the current user doesn't belong to any of the required visitor groups.
            </summary>
            <param name="campaignLinks">The campaign links.</param>
            <returns>Excluded campaigns for the current user.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CatalogItemSelection">
            <summary>
            All valid condition and reward catalog content items for a specific promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CatalogItemSelection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Commerce.Marketing.CatalogItemSelectionType,System.Boolean)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.CatalogItemSelection" />.
            </summary>
            <param name="items">
            The items in the selection (null or empty if <paramref name="type"/> is
            <see cref="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.All"/>.
            </param>
            <param name="type">The type describing the selection.</param>
            <param name="includesSubcategories">
            <c>true</c> to indicate that subcategories of the items referenced by <paramref name="items" /> are
            included in the selection, otherwise <c>false</c>.
            </param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.CatalogItemSelection.Items">
            <summary>
            The catalog content items (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>, and <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>) associated with the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.CatalogItemSelection.Type">
            <summary>
            Gets a value indicating the type of the catalog item selecion (<see cref="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.Undefined"/>,
            <see cref="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.Specific"/> or <see cref="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.All"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.CatalogItemSelection.IncludesSubcategories">
            <summary>
            Gets a value indicating whether selected items includes subcategories of the items referenced by <see cref="P:EPiServer.Commerce.Marketing.CatalogItemSelection.Items"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CatalogItemSelectionType">
            <summary>
             Type of catalog item selection.
             </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.Undefined">
            <summary>
            Not defined selection.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.Specific">
            <summary>
            Selection of specific catalog items.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CatalogItemSelectionType.All">
            <summary>
            Selection of all catalog items.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CollectionTargetEvaluator">
            <summary>
            Used by the promotion processors to identify which of the <see cref="T:EPiServer.Commerce.Order.ILineItem"/>
            that are included in the target property (that is exposed as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CollectionTargetEvaluator.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Linking.IRelationRepository,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.CollectionTargetEvaluator" />.
            </summary>
            <param name="contentLoader">The content loader service.</param>
            <param name="relationRepository">The relation repository service.</param>
            <param name="referenceConverter">The reference converter service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CollectionTargetEvaluator.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Linking.IRelationRepository,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,Mediachase.Commerce.Marketing.MarketingOptions,EPiServer.Core.IContentCacheKeyCreator)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.CollectionTargetEvaluator" />.
            </summary>
            <param name="contentLoader">The content loader service.</param>
            <param name="relationRepository">The relation repository service.</param>
            <param name="referenceConverter">The reference converter service.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="marketingOptions">The marketing options.</param>
            <param name="contentCacheKeyCreator">The content cache key creator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CollectionTargetEvaluator.GetApplicableCodes(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Boolean)">
            <summary>
            Gets all applicable <see cref="P:EPiServer.Commerce.Order.ILineItem.Code"/>s in the order by the targets in the promotion
            </summary>
            <param name="lineItemsInOrder">The line items in the order</param>
            <param name="targets">The target items for which the promotion is valid.</param>
            <param name="matchRecursive">Determines if a recursive logic should be used when identifying if an item is applicable for this promotion.</param>
            <returns>One <see cref="P:EPiServer.Commerce.Order.ILineItem.Code"/> for each <see cref="T:EPiServer.Commerce.Order.ILineItem"/> in lineItemsInOrder that matches any promotion target.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CollectionTargetEvaluator.GetMatchingCodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Boolean)">
            <summary>
            Gets all matching codes of line items in the order by the targets in the promotion
            </summary>
            <param name="codes">The line items in the order</param>
            <param name="targets">The target items for which the promotion is valid.</param>
            <param name="matchRecursive">Determines if a recursive logic should be used when identifying if an item is applicable for this promotion.</param>
            <returns>One <see cref="P:EPiServer.Commerce.Order.ILineItem.Code"/> for each <see cref="T:EPiServer.Commerce.Order.ILineItem"/> in lineItemsInOrder that matches any promotion target.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CollectionTargetEvaluator.PossibleTargetsCache">
            <summary>
            Caches the possible targets for each lineitem in a cart, to avoid having to traverse the content tree 
            to find a match between a promotion's target and a lineitem.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CouponData">
            <summary>
                Contains information regarding coupons on <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.CouponData.Code">
            <summary>
            Gets or sets a single coupon code.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute">
            <summary>
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> for preventing duplicate members in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute"/> using the default registered <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute"/>.
            </summary>
            <param name="localizationService">Service for translating the validation error message.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute.IsValid(System.Object)">
            <summary>
            Gets whether the property conforms to the validation rule or not.
            </summary>
            <param name="value">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> property being validated.</param>
            <returns>True if valid, else false.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DataAnnotations.DistinctListAttribute.FormatErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionRegionAttribute">
            <summary>
            Defines which part of a promotion a property belongs to. This attribute is used for UI styling.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DataAnnotations.PromotionRegionAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionRegionAttribute"/>.
            </summary>
            <param name="name">The name of the region.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DataAnnotations.PromotionRegionAttribute.RegionName">
            <summary>
            Gets the name of the region to use in UI container element.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute">
            <summary>
            Defines per-class settings for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> subclass instances.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute.FixedRedemptionsPerOrder">
            <summary>
            Gets or sets the number of redemptions per order. If this value is set (> 0)
            the per order form redemption limit field will be hidden in UI and this value
            will always be used instead.
            </summary>
            <value>
            The number of redemptions per order. A value of zero means instances of the type
            may use different values as set on <see cref="P:EPiServer.Commerce.Marketing.PromotionData.RedemptionLimits"/>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DefaultCouponFilter">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Marketing.ICouponFilter"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DefaultCouponFilter.Filter(EPiServer.Commerce.Marketing.PromotionFilterContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DefaultCouponFilter.GetCodeEqualityComparer">
            <summary>
            Gets the comparer used when comparing the supplied coupon codes with the ones defined on the promotions.
            </summary>
            <returns><see cref="P:System.StringComparer.OrdinalIgnoreCase" /></returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DefaultPromotionExcludedCatalogItemService">
            <summary>
            Default implementation of <see cref="T:EPiServer.Commerce.Marketing.IPromotionExcludedCatalogItemService"/>.
            </summary>
            <remarks>This iplementation uses <see cref="T:EPiServer.Commerce.Marketing.CollectionTargetEvaluator"/> to match the entry codes.
            Custom development might filter by catalog content types, for example.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DefaultPromotionExcludedCatalogItemService.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator)">
            <summary>
            Initialises a new instance of <see cref="T:EPiServer.Commerce.Marketing.DefaultPromotionExcludedCatalogItemService"/>.
            </summary>
            <param name="collectionTargetEvaluator">The collection target evaluator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DefaultPromotionExcludedCatalogItemService.GetExcludedLineItemCodes(EPiServer.Commerce.Marketing.PromotionData,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the line item codes that are excluded by the promotion setting.
            </summary>
            <param name="promotionData">The promotion.</param>
            <param name="codes">Codes of line items in the order.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DiscountedEntry">
            <summary>
            An entry being affected by one or more promotions.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountedEntry.#ctor(EPiServer.Core.ContentReference,System.Collections.Generic.IList{EPiServer.Commerce.Marketing.DiscountPrice})">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.DiscountedEntry"/>.
            </summary>
            <param name="entryLink"><see cref="T:EPiServer.Core.ContentReference"/> to the product or variant entry.</param>
            <param name="discountPrices">A list of discount prices and promotions related to the <paramref name="entryLink"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DiscountedEntry.EntryLink">
            <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference"/> to the product or variant entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DiscountedEntry.DiscountPrices">
            <summary>
            Gets a list of <see cref="T:EPiServer.Commerce.Marketing.DiscountPrice"/>s holding each applicable promotion and the price for the entry if the promotion is applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DiscountPrice">
            <summary>
            The representation of a price resulted by an <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountPrice.#ctor(EPiServer.Commerce.Marketing.EntryPromotion,Mediachase.Commerce.Money,Mediachase.Commerce.Money)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.DiscountPrice"/>.
            </summary>
            <param name="promotion">An <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion"/> applicable to an entry.</param>
            <param name="discountedPrice">The entry's PlacedPrice subtracted by the SavedAmount caused by the promotion.</param>
            <param name="defaultPrice">The entry's current DefaultPrice delivered by the registered <see cref="T:Mediachase.Commerce.Pricing.IPriceService"/>.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DiscountPrice.Promotion">
            <summary>
            An <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion"/> applicable to an entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DiscountPrice.Price">
            <summary>
            The entry's ExtendedPrice calculated by the <see cref="T:EPiServer.Commerce.Order.ILineItemCalculator" />.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.DiscountPrice.DefaultPrice">
            <summary>
            The entry's current DefaultPrice delivered by the registered <see cref="T:Mediachase.Commerce.Pricing.IPriceService"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.DiscountUpdater">
            <summary>
            Handles the final calculation and setting of discount amounts.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountUpdater.#ctor(Mediachase.Commerce.Currency,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.DiscountUpdater"/>.
            </summary>
            <param name="currency">The currency to use in calculations.</param>
            <param name="lineItemCalculator">The line item calculator to use when updating line item discounts.</param>
            <param name="returnLineItemCalculator">The return line item calculator to use when updating return line item discounts.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountUpdater.#ctor(EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.DiscountUpdater"/>.
            </summary>
            <param name="processorContext">The context to pull data from (currency, order sub total etc).</param>
            <param name="lineItemCalculator">The line item calculator to use when updating line item discounts.</param>
            <param name="returnLineItemCalculator">The return line item calculator to use when updating return line item discounts.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountUpdater.UpdateLineItemDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry})">
            <summary>
            Calculates discount amounts based on price entries and applies those to the corresponding line items.
            </summary>
            <param name="prices">The price entries that describes the new price.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountUpdater.UpdateShippingDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.ShipmentPrice})">
            <summary>
            Calculates discount based on shipping prices and applies those to the corresponding shipments.
            </summary>
            <param name="prices">The shipping prices that describes the new price.</param>
            <remarks>
            Assumes that there will only be one ShipmentPrice per shipment, although
            this assumption is not verified nor enforced.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.DiscountUpdater.UpdateGiftItemDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionGiftItem})">
            <summary>
            Calculates and sets discounts to ensure that gift items are free.
            </summary>
            <param name="gifts">The gift items in the current order form.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryFilterHandler">
            <summary>
            Handles excluded entries of order form from promotion engine.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterHandler.#ctor(EPiServer.Commerce.Marketing.IEntryFilter,EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.EntryFilterHandler"/> class.
            </summary>        
            <param name="entryFilter">The entry filter.</param>
            <param name="orderForm">The order form.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterHandler.ExcludeItems">
            <summary>
            Removes excluded line items from the order form.
            </summary>        
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterHandler.RestoreItems">
            <summary>
            Restores excluded line items back to the order form.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryFilterSettings">
            <summary>
            The entry filter settings which can be use for <see cref="T:EPiServer.Commerce.Marketing.Internal.EntryFilter"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterSettings.AddFilter``1(System.Predicate{``0})">
            <summary>
            Adds a filter predicate to entry filter settings.
            </summary>
            <typeparam name="T">The type of object to execute the filter predicate for.</typeparam>
            <param name="filter">The predicate filter.</param>
            <remarks>When filtering, an item will be evaluated against all predicate filters that have a compatible type. 
            If any of the filter predicates return false, the item will be excluded.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterSettings.GetCompositeFilter(System.Type)">
            <summary>
            Gets all filters for a specific type and combines into a composite filter.
            </summary>
            <param name="itemType">The item type.</param>
            <returns>A filter predicate that combines (chains) all the registered filter predicates that have a compatible type.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterSettings.ClearFilters">
            <summary>
            Clears all filters of all types in the settings.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryFilterSettings.HasFilter">
            <summary>
            Checks if any filter has been added to the instance.
            </summary>
            <returns><c>true</c> if some filters has been added; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryPromotion">
            <summary>
                Represents a content based entry promotion item.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/PercentagePromotionSample.cs" region="PercentagePromotionSample" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.EntryPromotion.DiscountType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1">
            <summary>
            Responsible for evaluating if an entry promotion is valid for a specific <see cref="T:EPiServer.Commerce.Order.IOrderForm" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1.#ctor(EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Initializes a new instance of an <see cref="T:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1" />.
            </summary>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1.CreateRedemptionDescription(EPiServer.Commerce.Marketing.AffectedEntries)">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> using affected <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries" />.
            </summary>
            <param name="affectedEntries">The affected entries.</param>
            <returns><see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> with <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries" />.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1.GetMaxRedemptions(EPiServer.Commerce.Marketing.RedemptionLimitsData)">
            <summary>
            Gets the maximum number of redemptions according to the provided configuration.
            </summary>
            <param name="redemptions">Contains information regarding Redemption Limits on <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.</param>
            <returns>Max redemptions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1.GetRedemptions(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/>s affected by a given promotion.
            </summary>
            <param name="promotionData">The promotion used to evaluate the product codes.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="applicableCodes">A collection of product codes to be checked against a promotion.</param>
            <returns>A list of applicable <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryRewardApplicator">
            <summary>
                Modifies entry prices in a <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.EntryRewardApplicator" /> class.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.EntryRewardApplicator.DiscountType">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.ApplyDiscount(EPiServer.Commerce.Marketing.AffectedEntries,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
                Sets a saved amount using <paramref name="discountAmount" /> and validates that the total discount is not
                higher than the total placed price for the line item.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="discountAmount">The discount amount in money.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discount amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.ApplyPercentage(EPiServer.Commerce.Marketing.AffectedEntries,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
                Sets a saved amount based on <paramref name="percentage" /> and validates that the total discount is not
                higher than the total placed price for the line item.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="percentage">The percentage to use.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discount amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.ApplyFixedPrice(EPiServer.Commerce.Marketing.AffectedEntries,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="fixedPrice"></param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.ApplyFreeItems(EPiServer.Commerce.Marketing.AffectedEntries,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
                Set saved amount by giving the items away for free.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discount amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.EntryRewardApplicator.AddGiftItem(EPiServer.Commerce.Marketing.AffectedEntries,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ExclusionLevel">
            <summary>
            Specifies whether promotion excludes from being applied per order or per unit.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.ExclusionLevel.Order">
            <summary>
            Promotions are excluded from being applied to an order, when excluded by other promotions.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.ExclusionLevel.Unit">
            <summary>
            Promotions can partly be prevented from being applied on one or more individual item when excluded by other promotions. Order level and shipping level promotions are still excluded in full.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Extensions.PurchaseAmountExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Marketing.Promotions.PurchaseAmount"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseAmountExtensions.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.PurchaseAmount,Mediachase.Commerce.Currency)">
            <summary>
            Verifies that the purchase amount condition can potentially be fulfilled.
            </summary>
            <param name="purchaseAmount">The purchase amount condition.</param>
            <param name="orderCurrency">The order currency.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseAmountExtensions.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.PurchaseAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentEvaluator)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the purchase amount condition.
            </summary>
            <param name="purchaseAmount">The purchase amount condition.</param>
            <param name="context">The promotion processor context.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseAmountExtensions.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.PurchaseAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Decimal,EPiServer.Commerce.Marketing.FulfillmentEvaluator)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the purchase amount condition.
            </summary>
            <param name="purchaseAmount">The purchase amount condition.</param>
            <param name="context">The promotion processor context.</param>
            <param name="excludedEntriesTotal">The total of price entry that excluded (by) the promotion.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
            <remarks>The fulfillment status calculated by the order subtotal without excluded price entries.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Extensions.PurchaseQuantityExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseQuantityExtensions.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity)">
            <summary>
            Verifies that the purchase quantity condition can potentially be fulfilled.
            </summary>
            <param name="purchaseQuantity">The purchase amount.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseQuantityExtensions.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the purchase quantity condition.
            </summary>
            <param name="purchaseQuantity">The purchase quantity condition.</param>
            <param name="orderForm">The order form.</param>
            <param name="targetEvaluator">The service that is used to evaluate an order against a promotion's target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.PurchaseQuantityExtensions.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the purchase quantity condition.
            </summary>
            <param name="purchaseQuantity">The purchase quantity condition.</param>
            <param name="orderForm">The order form.</param>
            <param name="targetEvaluator">The service that is used to evaluate an order against a promotion's target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="applicableCodes">Out all applicable <see cref="P:EPiServer.Commerce.Order.ILineItem.Code"/>s in the order by the targets in the promotion.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Extensions.ShippingPromotionExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Marketing.ShippingPromotion"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Extensions.ShippingPromotionExtensions.CanBeFulfilled(EPiServer.Commerce.Marketing.ShippingPromotion,EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Verifies that the shipping promotion can potentially be fulfilled.
            </summary>
            <param name="shippingPromotion">The shipping promotion.</param>
            <param name="orderForm">The order form.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.FreeShippingPromotionProcessorBase`1">
            <summary>
                Base class for processors of shipping promotions which giving a free shipping as reward.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FreeShippingPromotionProcessorBase`1.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a free shipping promotion processor.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FreeShippingPromotionProcessorBase`1.NotFulfilledRewardDescription(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FreeShippingPromotionProcessorBase`1.CreateRewardDescription(`0,EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.FulfillmentEvaluator">
            <summary>
            Used by the promotion processors to get the <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FulfillmentEvaluator.GetStatusForBuyQuantityPromotion(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem},System.Int32,System.Decimal)">
            <summary>
            Gets the fulfillment status using <paramref name="codes"/> and <paramref name="requiredQuantity"/> for Buy X number of items.
            </summary>
            <param name="codes">The codes for eligible products.</param>
            <param name="lineItems">The line items in current order form.</param>
            <param name="requiredQuantity">The quantity needed to return <see cref="F:EPiServer.Commerce.Marketing.FulfillmentStatus.Fulfilled"/>.</param>
            <param name="partialRequiredQuantity">The quantity needed to return <see cref="F:EPiServer.Commerce.Marketing.FulfillmentStatus.PartiallyFulfilled"/>.</param>
            <returns>The fulfillment status.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FulfillmentEvaluator.GetStatusForSpendAmountPromotion(System.Decimal,Mediachase.Commerce.Currency,System.Collections.Generic.IList{Mediachase.Commerce.Money},System.Decimal)">
            <summary>
            Gets the fulfillment status using <paramref name="subTotal"/>, <paramref name="orderCurrency"/>, <paramref name="spentAmountsCondition"/> and <paramref name="partialFulfilledPercentage"/> 
            for Spend amount promotions.
            </summary>
            <param name="subTotal">The order form subTotal.</param>
            <param name="orderCurrency">The currency of the order form.</param>
            <param name="spentAmountsCondition">A collection of <see cref="T:Mediachase.Commerce.Money"/> representing the spent amounts condition.</param>
            <param name="partialFulfilledPercentage">The partial fulfilled percentage value. This value should be between 0 and 1.</param>
            <returns>The fulfillment status.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.FulfillmentEvaluator.GetStatusForBuyFromCategoryPromotion(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.ILineItem})">
            <summary>
            Gets the fulfillment status using <paramref name="codes"/> for Buy from category get item discount promotion.
            </summary>
            <param name="codes">The codes for eligible products.</param>
            <param name="lineItems">The line items in current order form.</param>
            <returns>The fulfillment status.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.GiftItemFactory">
            <summary>
            Class to get the applicable gift items for the given promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.GiftItemFactory.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceService,EPiServer.Commerce.Order.IOrderGroupFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.GiftItemFactory" /> class.
            </summary>
            <param name="contentLoader">The content loader service.</param>
            <param name="priceService">The price service.</param>
            <param name="orderGroupFactory">The order group factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.GiftItemFactory.CreateGiftItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Creates gift items for the entries specified in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="entryLinks">The entry links.</param>
            <param name="processorContext">The context for the promotion processor.</param>
            <returns>List of effected item which contain gift items. One <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/> for each <see cref="T:EPiServer.Core.ContentReference"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.GiftItemFactory.CreateGiftLineItem(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Creates the gift line item.
            </summary>
            <param name="entryContent">The entry content.</param>
            <param name="processorContext">The context for the promotion processor.</param>
            <returns>The line item.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IAdditionalPromotionInformationCreator">
            <summary>
                Creates additional promotion information.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IAdditionalPromotionInformationCreator.CreateAdditionalInformation(EPiServer.Commerce.Marketing.PromotionInformation,EPiServer.Commerce.Marketing.AdditionalPromotionInformationContext)">
            <summary>
            Creates and adds additional promotion information.
            </summary>
            <param name="promotionInformation">The promotion information.</param>
            <param name="context">Containing promotion instance, order group, and order form.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IAffectedObject">
            <summary>
            Affected base class of the promotion evaluation.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IAffectedObject.SavedAmount">
            <summary>
            The saved amount.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ICouponFilter">
            <summary>
            Responsible handling promotions that are only applicable when a coupon code is supplied.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ICouponFilter.Filter(EPiServer.Commerce.Marketing.PromotionFilterContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters promotions by supplied coupon codes.
            </summary>
            <param name="filterContext">The filter context.</param>
            <param name="couponCodes">The coupon codes added to the current order form.</param>
            <returns>
            The same <see cref="T:EPiServer.Commerce.Marketing.PromotionFilterContext"/> after filtering
            <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions"/> and adding applied coupon
            codes using <see cref="M:EPiServer.Commerce.Marketing.PromotionFilterContext.AddCouponCode(System.Guid,System.String)"/>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IEntryFilter">
            <summary>
            The filter to exclude entries from the promotion engine. Such entries will be ignored when evaluating promotions and applying discounts.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IEntryFilter.Filter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters out entry codes which should be excluded by the promotion engine.
            </summary>
            <param name="entryCodes">The entry codes to be filtered.</param>
            <returns>The collection of entry codes after filtering.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation.ApplyPercentage(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a percent-off discount on the entries.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="percent">The percentage for the discount. Note that this should be given in the 0 - 100 range, and not as a fractional value.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation.ApplyFreeItems(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal)">
            <summary>
            Apply a "free item" type discount on the entries.
            </summary>
            <param name="entries">The entries to receive as free.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <returns>The saved amount, 0 if discount was not applied. This will happen if all entries are already free.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation.ApplyFixedPrice(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a fixed-price discount on the entries.
            </summary>
            <param name="entries">The entries to get at the fixed price.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="fixedPrice">The discounted total cost to apply to the entries.</param>
            <returns>The saved amount, 0 if no discount was applied. This will happen if totalAmount is less than the fixedPrice.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation.ApplyDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a money-off discount on the entries.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="discountAmount">The amount to discount per single unit.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryDiscountCalculation.ApplyDiscountIndividually(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a percent-off discount on the entries.
            It takes the percentage discount for an individual unit and then it works 
            like an amount-off discount.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="percent">The percentage for the discount. Note that this should be given in the 0 - 100 range, and not as a fractional value.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.EntryFilter">
            <summary>
            An implementation of <see cref="T:EPiServer.Commerce.Marketing.IEntryFilter"/>. Use <see cref="T:EPiServer.Commerce.Marketing.EntryFilterSettings"/> to exclude entries.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryFilter.#ctor(EPiServer.Commerce.Marketing.EntryFilterSettings,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.Internal.EntryFilter" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.EntryFilter.Filter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters out entry codes which should be excluded by the promotion engine.
            </summary>
            <param name="entryCodes">The entry codes to be filtered.</param>
            <returns>The collection of entry codes after filtering.</returns>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.Internal.MarketingContentTypeBase.Promotion">
            <summary>
            The base for Promotion content types.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.Internal.MarketingContentTypeBase.SalesCampaign">
            <summary>
            The base for SalesCampaign content types.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.MoneyExtensions">
            <summary>
            Extension methods for the <see cref="T:Mediachase.Commerce.Money"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.MoneyExtensions.ThrowIfNegative(Mediachase.Commerce.Money,System.String)">
            <summary>
            Validates that the <see cref="T:Mediachase.Commerce.Money"/> does not have a negative amount.
            </summary>
            <param name="money">The money to validate.</param>
            <param name="validationErrorMessage">The validation error message, that will be used when throwing an exception if the validation fails.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the validation fails.</exception>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.OrderDiscountCalculation">
            <summary>
                This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.OrderDiscountCalculation.ApplyDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a money-off discount on the orders.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="discountAmount">The amount to discount per single unit.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.OrderDiscountCalculation.ApplyPercentage(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a percent-off discount on the entries.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="percent">The percentage for the discount. Note that this should be given in the 0 - 100 range, and not as a fractional value.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.PriceCalculationBase">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PriceCalculationBase.ApplyDiscountProportionally(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal)">
            <summary>
            Apply a fixed money-off discount across all the entries.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="discountAmount">The amount to discount across all entries.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PriceCalculationBase.ApplyDiscount(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Func{EPiServer.Commerce.Marketing.PriceEntry,System.Decimal})">
            <summary>
            Apply a discount across all entries.
            </summary>
            <param name="entries">The entries to be discounted.</param>
            <param name="totalAmount">The initial total cost of the entries.</param>
            <param name="getDiscountedPriceFunc">The function that calculates the price of an entry after discount.</param>
            <returns>The saved amount, 0 if no discount was applied.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader">
            <summary>
            Gets and sorts available promotions and reference data used by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Marketing.CampaignInfoExtractor,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader" /> class.
            </summary>
            <param name="contentLoader">Service used to load content data.</param>
            <param name="campaignInfoExtractor">Used to extract informations about campaigns and promotions.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.#ctor(EPiServer.IContentLoader,EPiServer.Commerce.Marketing.CampaignInfoExtractor,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,Mediachase.Commerce.Marketing.MarketingOptions,EPiServer.Core.IContentCacheKeyCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader" /> class.
            </summary>
            <param name="contentLoader">Service used to load content data.</param>
            <param name="campaignInfoExtractor">Used to extract informations about campaigns and promotions.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
            <param name="marketingOptions">The marketing options.</param>
            <param name="contentCacheKeyCreator">The content cache key creator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetPromotions">
            <summary>
            Gets all existing promotions.
            </summary>
            <returns>All <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> for all campaigns.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetPromotions(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets promotions from specific campaigns.
            </summary>
            <param name="campaignLinks">The campaign links.</param>
            <returns>All <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> for specified campaigns.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetPromotions(EPiServer.Core.ContentReference)">
            <summary>
            Gets all existing promotions under a sales campaign.
            </summary>
            <param name="campaignLink">The campaign link.</param>
            <returns>All <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> for an especific campaign.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetAppliedPromotions(EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the promotions applied to a <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.
            </summary>
            <param name="orderGroup">The <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/> for which to load promotions.</param>
            <returns>All <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> that have been applied to the <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetEvaluablePromotionsInPriorityOrder(Mediachase.Commerce.IMarket)">
            <summary>
            Gets the evaluable promotions in priority order.
            </summary>
            <param name="market">The current market.</param>
            <returns>All valid promotions for a given market, sorted by priority.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetActiveCampaigns(Mediachase.Commerce.IMarket)">
            <summary>
            Gets The active campaigns for a valid market.
            </summary>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.CreateInMemoryOrderGroup(EPiServer.Core.ContentReference,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Creates a new in-memory order group and adds a line item using the <paramref name="entryLink"/>.
            </summary>
            <param name="entryLink">The <see cref="T:EPiServer.Core.ContentReference"/> of the entry content to put in the order group.</param>
            <param name="market">The market to associate the order group with.</param>
            <param name="marketCurrency">The market currency to use for the order group.</param>
            <returns>Creates an <see cref="T:EPiServer.Commerce.Order.Internal.InMemoryOrderGroup"/> for a specific market and currency adding a
            single <see cref="T:EPiServer.Commerce.Order.ILineItem"/> for the provided <paramref name="entryLink"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.GetCampaignFolderRoot">
            <summary>
            Get the link to the campaign folder root.
            </summary>
            <returns>The content link to the campaign folder root.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader.TryGetDefaultPriceAmount(System.String,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency,System.DateTime,System.Decimal@)">
            <summary>
            Gets the default price amount.
            </summary>
            <param name="entryCode">The entry code.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <param name="validOn">The valid date.</param>
            <param name="priceAmount">The output price amount.</param>
            <returns><c>true</c> if found entry price; otherwise, <c>false</c></returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionEngine">
            <summary>
            Evaluates the condition on all active promotions, and gives award to specific orders when the conditions are fulfilled.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngine.Run(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionEngineSettings)">
            <summary>
            Checks the condition for all active promotions, and gives rewards for the promotions where the condition has been fulfilled.
            Promotions with higher priority (lower Priority value) will be evaluated first and all excluded promotions will not be evaluated.
            </summary>
            <param name="orderGroup">The order group which will receive rewards.</param>
            <param name="settings">The settings for this run of the engine.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/> telling whether any promotion was fulfilled,
            which items the promotion was applied to and to which amount.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngine.Evaluate(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Gets the information about all promotions related to a multiple entries but individually evaluated.
            </summary>
            <param name="entryLinks">The entries to get the promotion information about.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <param name="requestFulfillmentStatus">The request fulfillment status.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the list of provided <see cref="T:EPiServer.Core.ContentReference" />s.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionEngineExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Marketing.IPromotionEngine"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference)">
            <summary>
            Gets the information about all promotions related to an entry for the current market and default currency of the market.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink">The entry to get promotion information about.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the <paramref name="entryLink"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference,Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Gets the information about all promotions related to an entry for the current market and default currency of the market.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink">The entry to get promotion information about.</param>
            <param name="currentMarket">The current market.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the <paramref name="entryLink"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets the information about all promotions related to multiple entries for the current market and default currency of the market.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLinks">The entries to get the promotion information about.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to each of the <paramref name="entryLinks"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Gets the information about all promotions related to multiple entries for the current market and default currency of the market.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLinks">The entries to get the promotion information about.</param>
            <param name="currentMarket">The current market.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to each of the <paramref name="entryLinks"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets the information about all promotions related to an entry.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink">The entry to get promotion information about.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the <paramref name="entryLink"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Gets the information about all promotions related to an entry.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink">The entry to get promotion information about.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <param name="requestFulfillmentStatus">The request fulfillment status.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the <paramref name="entryLink"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Evaluate(EPiServer.Commerce.Marketing.IPromotionEngine,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Gets the information about all promotions related to multiple entries.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLinks">The entries to get the promotion information about.</param>
            <param name="market">The current market.</param>
            <param name="currency">The currency.</param>
            <param name="requestFulfillmentStatus">The request fulfillment status.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to each of the <paramref name="entryLinks"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetDiscountPrices(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference,Mediachase.Commerce.IMarket)">
            <summary>
            Gets all applicable <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion" />s along with the price for the entry if the promotion should be applied to it for the specified market
            and the default currency for that market.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink"><see cref="T:EPiServer.Core.ContentReference" /> to the product or variant entry to evaluate.</param>
            <param name="market">The market to be considered when evaluating promotions.</param>
            <returns>
            A collection of discounted entries with related promotions and prices.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetDiscountPrices(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference,Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets all applicable <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion" />s along with the price for the entry if the promotion should be applied to it for the specified market and currency.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLink"><see cref="T:EPiServer.Core.ContentReference" /> to the product or variant entry to evaluate.</param>
            <param name="market">The market to be considered when evaluating promotions.</param>
            <param name="currency">The currency.</param>
            <returns>
            A collection of discounted entries with related promotions and prices.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetPromotionItemsForCampaign(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.IContentLoader,EPiServer.Commerce.Marketing.PromotionProcessorResolver,EPiServer.Core.ContentReference)">
            <summary>
            Gets the promotions and valid items for each promotion for <paramref name="campaign" />.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="promotionProcessorResolver">The promotion processor resolver.</param>
            <param name="campaign">The campaign.</param>
            <returns>
            Collection of promotions and the valid items for each promotion
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetPromotionItemsForCampaign(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Core.ContentReference)">
            <summary>
            Gets the promotions and valid items for each promotion for <paramref name="campaign"/>.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="campaign">The campaign.</param>
            <returns>Collection of promotions and the valid items for each promotion</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Run(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Checks the condition for all active promotions, and gives awards for the promotions where the condition has been fulfilled.
            Promotions with higher priority (lower Priority value) will be evaluated first and all excluded promotions will not be evaluated.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="orderGroup">The order group which will receive rewards.</param>
            <remarks>
            Will return <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s only for promotions that are fulfilled.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.Run(EPiServer.Commerce.Marketing.IPromotionEngine,EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionEngineSettings)">
            <summary>
            Checks the condition for all active promotions, and gives awards for the promotions where the condition has been fulfilled.
            Promotions with higher priority (lower Priority value) will be evaluated first and all excluded promotions will not be evaluated.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="orderGroup">The order group which will receive rewards.</param>
            <param name="promotionEngineSettings">The settings for this run of the engine.</param>
            <remarks>
            Will return <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s only for promotions that are match with RequestFulfillmentStatus setting.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetDiscountPrices(EPiServer.Commerce.Marketing.IPromotionEngine,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency)">
            <summary>
            Gets all applicable <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion" />s along with the price if the promotion should be applied for each provided entry in <paramref name="entryLinks" />.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLinks">A collection of <see cref="T:EPiServer.Core.ContentReference" />s to products or variant entries to evaluate.</param>
            <param name="market">The market to be considered when evaluating promotions.</param>
            <param name="marketCurrency">The currency used for calculating prices.</param>
            <returns>
            A collection of discounted entries with related promotions and prices.
            </returns>
            <exception cref="T:System.ArgumentNullException">marketCurrency</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngineExtensions.GetDiscountPrices(EPiServer.Commerce.Marketing.IPromotionEngine,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Order.ILineItemCalculator)">
            <summary>
            Gets all applicable <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion" />s along with the price if the promotion should be applied for each provided entry in <paramref name="entryLinks" />.
            </summary>
            <param name="promotionEngine">The promotion engine.</param>
            <param name="entryLinks">A collection of <see cref="T:EPiServer.Core.ContentReference" />s to products or variant entries to evaluate.</param>
            <param name="market">The market to be considered when evaluating promotions.</param>
            <param name="marketCurrency">The currency used for calculating prices.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="lineItemCalculator">The line item calculator.</param>
            <returns>
            A collection of discounted entries with related promotions and prices.
            </returns>
            <exception cref="T:System.ArgumentNullException">marketCurrency</exception>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionExcludedCatalogItemService">
            <summary>
            Gets the line items that should be excluded by settings of a specific promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionExcludedCatalogItemService.GetExcludedLineItemCodes(EPiServer.Commerce.Marketing.PromotionData,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the line item codes that are excluded by the promotion setting.
            </summary>
            <param name="promotionData">The promotion.</param>
            <param name="codes">Codes of line items in the order.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionProcessor">
            <summary>
                Responsible for evaluation if a promotions is valid for a specific <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/PercentagePromotionProcessorSample.cs" region="PercentagePromotionProcessorSample" lang="cs" />
            </example>
            <remarks>
                Any implementation of this that applies to a <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> that has an <see cref="T:System.Collections.Generic.IList`1"/> property must
                consider and plan for values where the amount might be zero for some or all currencies.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IPromotionProcessor.PromotionDataType">
            <summary>
                The type this processor can handle.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IPromotionProcessor.Priority">
            <summary>
            Gets the priority of this processor. In case there are multiple processors which can handle a promotion, 
            the one with highest priority will be used.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionProcessor.Evaluate(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Evaluates a promotion.  Implementations should use context.OrderForm when evaluating promotions
            </summary>
            <param name="promotionData">The promotion model.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns>
            The reward for a promotion.
            </returns>
            <remarks>
            Any implementation of this that applies to a <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> that has an <see cref="T:System.Collections.Generic.IList`1" /> property must
            consider and plan for values where the amount might be zero for some or all currencies.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets information about the settings for a specific instance of a promotion type. 
            Used when displaying promotion information to a site visitor/shopper.
            </summary>
            <remarks>
            <para>
                This method is intended to be used on a site to display information about a promotion to a visitor/shopper.
            </para>
            <para>
                It is never used during the evaluation of the promotion, it only exists to provide information about the settings for this instance of a promotion type.
                So a use case for this could be that you have a "Buy 3 get the cheapest for one for free" promotion. And you want to display information to the visitor/shopper
                that "If you buy three items from the category cooking books, you will get the cheapest one for free".
            </para>
            <para>
                This method should not be called explicitly from the site code. It will be called from the IPromotionEngine extension method GetPromotionItemsForCampaign.
            </para>
            </remarks>
            <param name="promotionData">The promotion data to get items for.</param>
            <returns>
            The promotion condition and reward items.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IRedemptionLimitService">
            <summary>
            Interface to get the remaining redemption of given promotions for a given customer.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IRedemptionLimitService.GetRemainingRedemptions(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionData},System.Guid,System.Int32)">
            <summary>
            Get the remaining redemptions for the given promotions and customer and order form.
            </summary>
            <param name="promotions">The promotions to retrieve redemptions for.</param>
            <param name="customerId">The customer Id.</param>
            <param name="orderFormId">The current order form Id.</param>
            <returns>
            A dictionary containing the number of remaining redemptions for each promotion.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.MonetaryReward">
            <summary>
            Promotion reward that can be either percentage of the purchase amount, or an absolute amount of for a given currency.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.MonetaryReward.Amounts">
            <summary>
            If <see cref="P:EPiServer.Commerce.Marketing.MonetaryReward.UseAmounts"/> set to true, this collection represents the promotion reward.
            </summary>
            <remarks>
            Initially, any existing currencies related the promotion's campaign market added to the collection have the amount of zero. 
            Changing the campaign market also changes available currencies in the property. 
            Consider this when developing discount processors, because you must decide the desired behavior when one, or even all, amounts are set to zero.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.MonetaryReward.Percentage">
            <summary>
            If <see cref="P:EPiServer.Commerce.Marketing.MonetaryReward.UseAmounts"/> set to false, this percentage represents the promotion reward.
            </summary>
            <remarks>The percentage must be a value between 0-100.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.MonetaryReward.UseAmounts">
            <summary>
            Determines whether to use <see cref="P:EPiServer.Commerce.Marketing.MonetaryReward.Amounts"/> or <see cref="P:EPiServer.Commerce.Marketing.MonetaryReward.Percentage"/> as promotion reward.
            </summary>
            <remarks><c>True</c> to use <see cref="P:EPiServer.Commerce.Marketing.MonetaryReward.Amounts"/>, otherwise <c>false</c>.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.MonetaryRewardExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Marketing.MonetaryReward"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.MonetaryRewardExtensions.GetAmountForCurrency(EPiServer.Commerce.Marketing.MonetaryReward,EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Gets the reward for a specific line item in a specific currency
            </summary>
            <param name="reward">The object containing the reward settings.</param>
            <param name="lineItem">The line item to get the reward for.</param>
            <param name="currency">The currency to get the reward in.</param>
            <returns>The amount of reward that should be applied to the specified line item.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.MonetaryRewardExtensions.GetRewardType(EPiServer.Commerce.Marketing.MonetaryReward)">
            <summary>
            Gets the <see cref="T:EPiServer.Commerce.Marketing.RewardType"/> for the current reward.
            </summary>
            <param name="reward">The object containing the reward settings.</param>
            <returns>If </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.MonetaryRewardExtensions.GetDiscountAmountForCurrency(EPiServer.Commerce.Marketing.MonetaryReward,Mediachase.Commerce.Currency)">
            <summary>
            Gets the discount amount of the current reward for a perticular <see cref="T:Mediachase.Commerce.Currency"/>.
            </summary>
            <param name="reward">The object containing the reward settings.</param>
            <param name="currency">The currency of the current <see cref="T:EPiServer.Commerce.Order.IOrderGroup"/>.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.MonetaryRewardExtensions.HasRewardInCurrency(EPiServer.Commerce.Marketing.MonetaryReward,Mediachase.Commerce.Currency)">
            <summary>
            Checks if there is any reward for the specified currency.
            </summary>
            <param name="reward">The object containing the reward settings.</param>
            <param name="currency">The currency to evaluate reward for.</param>
            <returns><c>true</c> if there is a reward greater than 0 for the specified currency; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix">
            <summary>
                Container for all prices that can be associated with the line items in the referenced order form.
            </summary>
            <remarks>
                <para>
                    Since there might be multiple promotions modifying the same line item, 
                    you may have an intermediate state where you have different prices for a subset of the line item quantity.
                </para>
                <para>
                    Use case: 
                    You have a line item in your cart with a quantity of three. First a promotion is applied that gives 10% discount to one of those items.
                    After that there is a buy 3 get the cheapest for free promotion applied. Since one of the items in the line item has a reduced price,
                    the correct item that is for free should be that, and the savings should be the price after the first 10% reduction. That case is what this
                    matrix handles. Without it, the 10% reduction would have been spread out on all the items in the line item, making the saving from the second
                    promotion incorrect.
                </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.#ctor(EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Core.ContentReference)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix" />.
            </summary>
            <param name="orderForm">The order form to operate on.</param>
            <param name="promotionEngineContentLoader">The promotion content loader.</param>
            <param name="campaignFolderRootLink">The campaign folder root link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.#ctor(EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Core.ContentReference,Mediachase.Commerce.Currency)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix" />.
            </summary>
            <param name="orderForm">The order form to operate on.</param>
            <param name="promotionEngineContentLoader">The promotion content loader.</param>
            <param name="campaignFolderRootLink">The campaign folder root link.</param>
            <param name="currency">The currency.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.#ctor(EPiServer.Commerce.Order.IOrderForm,EPiServer.Core.ContentReference,Mediachase.Commerce.Currency)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix" />.
            </summary>
            <param name="orderForm">The order form to operate on.</param>
            <param name="campaignFolderRootLink">The campaign folder root link.</param>
            <param name="currency">The currency.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.MostExpensiveFirst">
            <summary>
            Contains sorting action for sorting by price in descending order - passed as parameter to ExtractPrices.
            </summary>
            <remarks>
            This should be the default sorting action - use unless there are very specific requirements.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.CheapestFirst">
            <summary>
            Contains sorting action for sorting by price in ascending order - passed as parameter to ExtractPrices.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.IsExcluded(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Determines whether the supplied <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> has been previously excluded by other committed promotions.
            </summary>
            <param name="promotionData">The promotion supplied to determine whether it's excluded.</param>
            <returns>Returns <c>true</c> if price entries exists in the matrix caused by other promotions which excludes the current promotion. Else returns <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.IsDoubleExclusion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Determines whether <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> is excluding each other with former applied promotions. 
            </summary>
            <param name="promotionData">The promotion to check with others. </param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.GetExcludedPriceEntries(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Get <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> attached to applied promotions which exclude <paramref name="promotionData"/>,
            or is excluded by it, or is excluded by a specific promotion setting.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <returns>Returns all <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> attached to excluded promotions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.GetPriceEntriesByPromotionExclusion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Get <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> attached to applied promotions which exclude <paramref name="promotionData"/>, or is excluded by it.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <returns>Returns all <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> attached to excluded promotions.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.RemoveConditionEntries(System.Collections.Generic.IEnumerable{System.String},System.Decimal,System.Action{System.Collections.Generic.List{EPiServer.Commerce.Marketing.PriceEntry}})">
            <summary>
            Remove conditional entries from the price matrix instance.
            </summary>
            <param name="codes">The product codes to extract prices for.</param>
            <param name="quantity">The total quantity of entries to extract.</param>
            <param name="sortMethod">Determines the ordering of entries to extract.</param>
            <remarks>
            If <paramref name="codes"/> is null, then all entries on the order form will be part of the selection.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.RemoveConditionEntries(System.Collections.Generic.IEnumerable{System.String},System.Decimal,System.Action{System.Collections.Generic.List{EPiServer.Commerce.Marketing.PriceEntry}},EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Remove conditional entries from the price matrix instance.
            </summary>
            <param name="codes">The product codes to extract prices for.</param>
            <param name="quantity">The total quantity of entries to extract.</param>
            <param name="sortMethod">Determines the ordering of entries to extract.</param>
            <param name="promotionData">The promotion responsible for removing the conditional entries.</param>
            <remarks>
            If <paramref name="codes"/> is null, then all entries on the order form will be part of the selection.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.ExtractEntries(System.Collections.Generic.IEnumerable{System.String},System.Decimal,EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Extract a range of entries from the price matrix.
            </summary>
            <param name="codes">The product codes to extract prices for.</param>
            <param name="quantity">The total quantity of entries to extract.</param>
            <param name="promotionData">The promotion responsible for extracting the current subset of entries.</param>
            <returns>
              An <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/> with information about the extracted data. If less than the requested
              <paramref name="quantity"/> found, then returns null. The entries will be sorted by Price, with the most 
              expensive first.
            </returns>
            <remarks>
            If <paramref name="codes"/> is null, then all entries on the order form will be part of the selection.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.ExtractEntries(System.Collections.Generic.IEnumerable{System.String},System.Decimal,System.Action{System.Collections.Generic.List{EPiServer.Commerce.Marketing.PriceEntry}},EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Extract a range of entries from the price matrix.
            </summary>
            <param name="codes">The product codes to extract prices for.</param>
            <param name="quantity">The total quantity of entries to extract.</param>
            <param name="sortMethod">Determines the ordering of entries to extract.</param>
            <param name="promotionData">The promotion responsible for extracting the current subset of entries.</param>
            <returns>
              An <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/> with information about the extracted data. If less than the requested
              <paramref name="quantity"/> found, then returns null.
            </returns>
            <remarks>
            If <paramref name="codes"/> is null, then all entries on the order form will be part of the selection.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.CommitPrices(EPiServer.Commerce.Marketing.AffectedEntries)">
            <summary>
            Commit changes that has been made to a previously extracted set of entries.
            </summary>
            <param name="prices">The batch of price changes to commit.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.ExcludesPromotion(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Checks two promotions exclude each other.
            </summary>
            <param name="source">The source <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.</param>
            <param name="target">The target <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.</param>
            <returns><c>true</c> if the <paramref name="source"/> excludes the <paramref name="target"/>, or vice versa.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.ResetPrices">
            <summary>
            Resets prices that has been extracted but not committed.
            </summary>
            <remarks>
            This method can be called to ensure that no price data gets lost. If a set of extracted prices has 
            not been committed by calling <see cref="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.CommitPrices(EPiServer.Commerce.Marketing.AffectedEntries)"/>, then calling this method
            ensures that the original prices are returned to the price matrix. This method is also called
            implicitly by <see cref="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.UpdateDiscount(EPiServer.Commerce.Marketing.DiscountUpdater)"/> so in normal circumstances there should not be
            any reason to call this method.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.CalculateAndCommit(EPiServer.Commerce.Marketing.AffectedEntries,System.Func{System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PriceEntry},System.Decimal,System.Decimal})">
            <summary>
            Calculate and commit changes that have been made to a previously extracted set of entries.
            </summary>
            <param name="item">The batch of price changes to commit.</param>
            <param name="apply">The calculation method.</param>
             <returns>The saved amount.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.Conditions">
            <summary>
            Methods will return <c>true</c> if the price matrix contains the conditional entries, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderFormPriceMatrix.GetAllPricesForCodes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>s for given product codes.
            </summary>
            <param name="codes">The product codes to extract prices for.</param>
            <returns>The collection of prices for the product codes.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.OrderPromotion">
            <summary>
            Represents a content based order promotion item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.OrderPromotion.DiscountType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.OrderPromotionProcessorBase`1">
            <summary>
                Responsible for evaluating if an order promotion is valid for a specific <see cref="T:EPiServer.Commerce.Order.IOrderForm" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderPromotionProcessorBase`1.CreateRedemptionDescription(EPiServer.Commerce.Order.IOrderForm)">
            <summary>
                Creates a <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> using affected <paramref name="orderForm" />.
            </summary>
            <param name="orderForm">The order form.</param>
            <returns><see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> with <see cref="T:EPiServer.Commerce.Marketing.AffectedOrder" />.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderPromotionProcessorBase`1.CreateRedemptionDescription(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IOrderForm})">
            <summary>
                Creates a <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> using affected <paramref name="orderForms" />.
            </summary>
            <param name="orderForms">The order forms.</param>
            <returns><see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> with <see cref="T:EPiServer.Commerce.Marketing.AffectedOrder" />s.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.OrderRewardApplicator">
            <summary>
            Modifies <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.OrderAmount"/> on a <see cref="T:EPiServer.Commerce.Order.ILineItem"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderRewardApplicator.#ctor(EPiServer.Commerce.Marketing.Internal.OrderDiscountCalculation)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Commerce.Marketing.OrderRewardApplicator"/>.
            </summary>
            <param name="priceCalculator">The price calculator.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.OrderRewardApplicator.DiscountType">
            <summary>
                DiscountType.OrderLevelDiscountAmount
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderRewardApplicator.ApplyDiscount(EPiServer.Commerce.Marketing.AffectedOrder,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.OrderRewardApplicator.ApplyPercentage(EPiServer.Commerce.Marketing.AffectedOrder,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PriceEntry">
            <summary>
            This class is used to hold information about prices in the <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix"/>.
            PriceEntry objects should never be created, they should always be fetched from the <see cref="T:EPiServer.Commerce.Marketing.OrderFormPriceMatrix"/>.
            </summary>
            <remarks>
            This is primarily used for internal calculations. If you need to manipulate these instances directly you're
            probably doing something that you shouldn't.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.#ctor(EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.
            </summary>
            <param name="item">The parent line item where information will be aggregated.</param>
            <remarks>
            This version that doesn't take a currency is primarily intended for testing.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.#ctor(EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.
            </summary>
            <param name="item">The parent line item where information will be aggregated.</param>
            <param name="currency">The currency using for prices.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.
            </summary>
            <param name="price">The price of one quantity.</param>
            <param name="quantity">The number of items.</param>
            <remarks>
            This version that doesn't take a line item is primarily intended for testing.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.#ctor(System.Decimal,System.Decimal,EPiServer.Commerce.Order.ILineItem)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.
            </summary>
            <param name="price">The price of one quantity.</param>
            <param name="quantity">The number of items.</param>
            <param name="item">The parent line item where information will be aggregated.</param>
            <remarks>
            This version that doesn't take a currency is primarily intended for testing.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.#ctor(System.Decimal,System.Decimal,EPiServer.Commerce.Order.ILineItem,Mediachase.Commerce.Currency)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.
            </summary>
            <param name="price">The price of one quantity.</param>
            <param name="quantity">The number of items.</param>
            <param name="item">The parent line item where information will be aggregated.</param>
            <param name="currency">The currency using for prices.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.Promotion">
            <summary>
            Gets the promotion associated with the price.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.Price">
            <summary>
            The price of a single entry.
            </summary>
            <remarks>
            Note that negative prices are not allowed.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.OrderDiscount">
            <summary>
            The order-level discount. 
            </summary>
            <remarks>
            The order discount has already been deducted from the value returned by <see cref="P:EPiServer.Commerce.Marketing.PriceEntry.Price"/>, but is also
            stored in this property to make it easy to distinguish between order discount and line item discount.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.Quantity">
            <summary>
            The quantity of entries with this price.
            </summary>
            <remarks>
            Quantity must be greater than zero. I e zero is not a legal value.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.ParentItem">
            <summary>
            The parent item to be used for aggregating price entry information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.CalculatedTotal">
            <summary>
            Calculated total price of this entry based on current price and quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.ActualTotal">
            <summary>
            Total price which may contain rounding adjustments.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.OriginalTotal">
            <summary>
            The calculated price for the initial creation of this entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PriceEntry.Currency">
            <summary>
            The currency to be used in calculation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.AdjustActualTotal(System.Decimal)">
            <summary>
            Used to adjust the actual total in case of rounding errors.
            </summary>
            <param name="adjustment">The amount to add to the calculated total to correct a rounding error.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.ResetOriginalTotal">
            <summary>
            Re-calculates the original total.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.Split(System.Decimal)">
            <summary>
            Split this <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> into two.
            </summary>
            <param name="requestedQuantity">The quantity to move to the new entry.</param>
            <returns>A new <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/> with Quantity set to <paramref name="requestedQuantity"/>.</returns>
            <remarks>
            The original entry will have its quantity reduced by the requestedQuantity. If the original entry has
            rounding error adjustments in ActualTotal, these adjustments will be retained across the two entries.
            <para>
            Note that merging (with <see cref="M:EPiServer.Commerce.Marketing.PriceEntry.TryMerge(EPiServer.Commerce.Marketing.PriceEntry)"/> an entry that has been split (no other 
            modifications), will re-create the exact same PriceEntry as before the split.
            </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.TryMerge(EPiServer.Commerce.Marketing.PriceEntry)">
            <summary>
            Tries to merge data from <paramref name="entry"/> into this instance.
            </summary>
            <param name="entry">The PriceEntry to merge from. Should be discarded after a merge.</param>
            <returns>True if the merge was successful, False otherwise.</returns>
            <remarks>
            In order for the merge to succeed, both entries must share the same ParentItem and have the same price.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PriceEntry.ShallowCopy">
            <summary>
            Returns a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:EPiServer.Commerce.Marketing.PriceEntry"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionApplicator">
            <summary>
            Evaluates promotions, and applies the reward.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.#ctor(EPiServer.Commerce.Marketing.PromotionProcessorResolver,EPiServer.Commerce.Marketing.RewardApplicatorResolver,EPiServer.Commerce.Marketing.IAdditionalPromotionInformationCreator)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionApplicator" />.
            </summary>
            <param name="promotionProcessorResolver">The resolver used to find the correct processor for a promotion.</param>
            <param name="rewardApplicatorResolver">The reward applicator resolver.</param>
            <param name="additionalPromotionInformationCreator">Adds additional custom details to fulfilled <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation" />s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.EvaluatePromotion(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Evaluates the <paramref name="promotionData"/> for <paramref name="context"/>.OrderForm using <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorResolver"/>.
            </summary>
            <param name="promotionData">The promotion to evaluate.</param>
            <param name="context">Promotion processor context</param>
            <returns>The evaluated <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>.</returns>
            <exception cref="T:System.ArgumentNullException">promotion model is null.</exception>
            <exception cref="T:System.NotImplementedException">The <paramref name="promotionData"/> has no promotion processor.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.ApplyReward(EPiServer.Commerce.Marketing.RewardDescription,System.Int32,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies the <paramref name="reward" />.
            </summary>
            <param name="reward">The reward to apply.</param>
            <param name="remainingRedemptions">The number of remaining redemptions.</param>
            <param name="context">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.AddPromotionInformation(EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.RewardDescription,EPiServer.Commerce.Marketing.PromotionFilterContext)">
            <summary>
            Creates promotion information instances from the <paramref name="reward"/>, and adds it on the <paramref name="orderForm"/>.
            </summary>
            <param name="orderForm">The order</param>
            <param name="filterContext">The promotion filter context.</param>
            <param name="reward">The reward to apply.</param>
            <param name="orderGroup">The order group</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.CreateInformation(EPiServer.Commerce.Marketing.RewardDescription,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionFilterContext)">
            <summary>
            Creates list of promotion information.
            </summary>
            <param name="reward">The <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> describing the reward for the applied promotion.</param>
            <param name="orderForm">The order form.</param>
            <param name="filterContext">The filter context, containing the relevant data added using <see cref="M:EPiServer.Commerce.Marketing.PromotionFilterContext.AddCouponCode(System.Guid,System.String)"/>
            and <see cref="M:EPiServer.Commerce.Marketing.PromotionFilterContext.AddVisitorGroup(EPiServer.Core.ContentReference,System.Guid)"/>.</param>
            <param name="orderGroup">The order group.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.AddToOrder(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionInformation},EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Add <paramref name="promotionInformations"/> to <paramref name="orderForm"/>
            </summary>
            <param name="promotionInformations">The promotion informations</param>
            <param name="orderForm">The order form</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.CreateAdditionalInformation(EPiServer.Commerce.Marketing.PromotionInformation,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Manage additional information for a promotion. If no such details already exists and there is a registered
            <see cref="T:EPiServer.Commerce.Marketing.IAdditionalPromotionInformationCreator"/> then the creator will be used for creating and setting
            the AdditionalInformation value for the PromotionInformation.
            </summary>
            <param name="promotionInformation">The promotion information.</param>
            <param name="orderForm">The order form.</param>
            <param name="orderGroup">The order group.</param>
            <param name="promotionData">The promotion</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionApplicator.GetRewardApplicator(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets the reward applicator based on the promotion's <see cref="T:EPiServer.Commerce.Marketing.DiscountType"/>.
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Marketing.EntryRewardApplicator"/> or an <see cref="T:EPiServer.Commerce.Marketing.OrderRewardApplicator"/> depending on
            the promotion discount type.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionData">
            <summary>
                Represents a content based promotion item.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/PercentagePromotionSample.cs" region="PercentagePromotionSample" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.Description">
            <summary>
            Gets or sets the description of the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.Banner">
            <summary>
            Gets or sets the banner image of the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.Schedule">
            <summary>
            Gets or sets the promotion schedule.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.IsActive">
            <summary>
            Gets or sets the status of the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.Coupon">
            <summary>
            Gets or sets coupon information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.ExcludedCatalogItems">
            <summary>
            Gets or sets the list of excluded catalog items (catalogs, categories or entries).
            Excluded catalog items will not be used to calculate for this promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.RedemptionLimits">
            <summary>
            Gets or sets redemption limits.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.Priority">
            <summary>
            Gets or sets the priority of promotion. The lower value, the higher priority.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.ExcludedItems">
            <summary>
            Gets or sets the list of excluded promotional items (campaign root, campaigns or promotions).
            Excluded campaigns or promotions will not be combined with this promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.DiscountType">
            <summary>
            Gets whether the promotion is for an order or individual line items or a shipment.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionData.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionDataExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDataExtensions.GetFixedRedemptionsPerOrderSetting(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets the fixed redemptions per order setting for the promotion type.
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>
            The first nonzero value of <see cref="P:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute.FixedRedemptionsPerOrder"/>
            defined in any attribute for the type, or null if no matching attribute is found.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDataExtensions.GetPromotionSetting``1(EPiServer.Commerce.Marketing.PromotionData,System.Func{EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute,System.Boolean},System.Func{EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute,``0},``0)">
            <summary>
            Gets a setting based on <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> instances on a <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> type.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="promotion">The promotion to read <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> instances for.</param>
            <param name="predicate">
            A predicate to filter the <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> instances by.
            The first match will be passed through <paramref name="getValue"/>.
            </param>
            <param name="getValue">Delegate to return a value based on the
            <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> selected by <paramref name="predicate" />.</param>
            <param name="defaultValue">The default to return if no item matches <paramref name="predicate" />.</param>
            <returns>
            The value selected by <paramref name="getValue" />, or <paramref name="defaultValue" />
            if no <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> of <paramref name="promotion" /> matches
            <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDataExtensions.GetPromotionSettings(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets the <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute" /> instances on a <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> type.
            </summary>
            <param name="promotion">The promotion to read <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute"/> instances for.</param>
            <returns>
            The <see cref="T:EPiServer.Commerce.Marketing.DataAnnotations.PromotionSettingsAttribute" /> instances of the supplied <see cref="T:EPiServer.Commerce.Marketing.PromotionData" /> type.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionEngine">
            <summary>
            Evaluates the condition on all active promotions and gives reward to specific orders when the conditions are fulfilled.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.#ctor(EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Commerce.Marketing.IRedemptionLimitService,EPiServer.Commerce.Marketing.PromotionFilters,EPiServer.Commerce.Marketing.PromotionApplicator,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Marketing.IEntryFilter,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Creates a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine" />.
            </summary>
            <param name="promotionEngineContentLoader">The service used to load existing promotions and other reference data.</param>
            <param name="redemptionLimitService">The redemption limits service.</param>
            <param name="promotionFilters">Removes any non available promotions.</param>
            <param name="promotionExecutor">Evaluates promotions, applies reward for promotions.</param>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="entryFilter">The entry filter.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.#ctor(EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Commerce.Marketing.IRedemptionLimitService,EPiServer.Commerce.Marketing.PromotionFilters,EPiServer.Commerce.Marketing.PromotionApplicator,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IShippingCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Marketing.IEntryFilter,Mediachase.Commerce.Markets.IMarketService,EPiServer.Commerce.Marketing.IPromotionExcludedCatalogItemService)">
            <summary>
            Creates a new instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine" />.
            </summary>
            <param name="promotionEngineContentLoader">The service used to load existing promotions and other reference data.</param>
            <param name="redemptionLimitService">The redemption limits service.</param>
            <param name="promotionFilters">Removes any non available promotions.</param>
            <param name="promotionExecutor">Evaluates promotions, applies reward for promotions.</param>
            <param name="lineItemCalculator">The line item calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="entryFilter">The entry filter.</param>
            <param name="marketService">The market service.</param>
            <param name="promotionExcludedCatalogItemService">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.Run(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionEngineSettings)">
            <summary>
            Checks the condition for all active promotions, and gives awards for the promotions where the condition has been fulfilled.
            Promotions with higher priority (lower Priority value) will be evaluated first and all excluded promotions will not be evaluated.
            </summary>
            <param name="orderGroup">The order group which will receive rewards.</param>
            <param name="settings">The settings for this run of the engine.</param>
            <remarks>
            Will return <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s that has the same status as any of the <see cref="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.RequestedStatuses"/>.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.Evaluate(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},Mediachase.Commerce.IMarket,Mediachase.Commerce.Currency,EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Gets the information about all promotions related to a multiple entries but individually evaluated
            </summary>
            <param name="entryLinks">The entries to get the promotion information about.</param>
            <param name="market">The market.</param>
            <param name="currency">The currency.</param>
            <param name="requestFulfillmentStatus">The request fulfillment status.</param>
            <returns>
            A list of <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> giving us the reward information associated to the list of <see cref="T:EPiServer.Core.ContentReference" />
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.ClearPromotionsAndDiscountAmounts(EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Clears any existing discount amounts on all <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s and <see cref="T:EPiServer.Commerce.Order.IShipment"/> in the order and removes any existing promotions from the <see cref="T:EPiServer.Commerce.Order.IOrderForm"/>.
            </summary>
            <param name="orderForm">The order form holding the promotions to be removed.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.GetCampaignFolderRoot">
            <summary>
            Get the link to the campaign folder root.
            </summary>
            <returns>The content link to the campaign folder root.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.CreatePromotionContext(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Creates the promotion processor context.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <returns>A PromotionProcessorContext</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.CreatePromotionContext(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,System.Func{EPiServer.Commerce.Marketing.PromotionData,System.Int32})">
            <summary>
            Creates the promotion processor context.
            </summary>
            <param name="orderGroup">The order group.</param>
            <param name="orderForm">The order form.</param>
            <param name="getRedemptionLimit">A func that returns the redemption limit for given promotion.</param>
            <returns>A PromotionProcessorContext</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionEngineSettings">
            <summary>
            Instructions for how the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/> should behave.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngineSettings.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionEngineSettings"/>
            </summary>
            <remarks>Will set <see cref="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.RequestedStatuses"/> to <see cref="F:EPiServer.Commerce.Marketing.FulfillmentStatus.Fulfilled"/> and <see cref="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.ApplyReward"/> to <c>true</c>.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngineSettings.#ctor(EPiServer.Commerce.Marketing.RequestFulfillmentStatus,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionEngineSettings"/>
            </summary>
            <param name="requestedStatuses">The fulfillment statuses to return <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s for.</param>
            <param name="applyReward">The flag indicates reward will be applied or not.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.RequestedStatuses">
            <summary>
            Gets or sets which fulfillment statuses to return <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s for. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.ExclusionLevel">
            <summary>
            Gets or sets the exclusion level that should be applied. Default is <see cref="F:EPiServer.Commerce.Marketing.ExclusionLevel.Order"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.ApplyReward">
            <summary>
            Get or sets if the reward will be applied. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.ReevaluatePromotions">
            <summary>
            Get or sets if the PromotionEngine should re-evaluate the promotions already applied to the IOrderGroup. Default is <c>false</c>.
            </summary>
            <remarks>
            If set to true the PromotionEngine will create a list of promotions based on the <see cref="P:EPiServer.Commerce.Order.IOrderForm.Promotions"/> collections
            of the order group's order forms and then try to apply those promotions <u>only</u>. All found promotions that can be loaded 
            (i.e. have not been deleted) will be evaluated even if they are currently inactive. Running the promotion engine with this flag
            set to <c>true</c> will not increase the redemption count for the promotions.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionEngineSettings.ApplyPromotionUnitIndividually">
            <summary>
            Gets the flag indicating that the promotion engine would take the percentage discount for an individual unit,
            and from then on it works like an amount-off discount.
            Default value is false.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionExcludedCatalogItemHandler">
            <summary>
            Handles excluded entries of order form from promotion engine.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExcludedCatalogItemHandler.#ctor(EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.IPromotionExcludedCatalogItemService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.EntryFilterHandler"/> class.
            </summary>        
            <param name="context">The promotion processor context.</param>
            <param name="promotionExcludedCatalogItemService">The line item exclusion handler.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExcludedCatalogItemHandler.ExcludeItems(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Removes excluded line items from the order form.
            </summary>        
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExcludedCatalogItemHandler.RestoreItems(System.Collections.Generic.List{EPiServer.Commerce.Marketing.AffectedEntries})">
            <summary>
            Restores excluded line items back to the order form.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionExclusionHandler">
            <summary>
            Keeps track of promotion exclusion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExclusionHandler.#ctor(EPiServer.Core.ContentReference)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionExclusionHandler"/> class.
            </summary>
            <param name="campaignRootfolder">The campaign rootfolder.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExclusionHandler.#ctor(EPiServer.Core.ContentReference,EPiServer.Commerce.Marketing.ExclusionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionExclusionHandler"/> class.
            </summary>
            <param name="campaignRootfolder">The campaign rootfolder.</param>
            <param name="exclusionLevel">Indicates whether exclusions are based on entire promotions or only on single units.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExclusionHandler.AddAppliedPromotion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            registers any excluded promotions for the specified promotion.
            </summary>
            <param name="promotion">The promotion.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionExclusionHandler.IsExcluded(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Determines whether the specified promotion is excluded.
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>true if promotion is excluded, false otherwise.</returns>
            <remarks>For entry level promotions running with unit exclusions this method will always return false, as exclusions will
            then be managed later in the process.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionFilterContext">
            <summary>
            Contains a collection of <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> that multiple filters
            can act on while leaving additional meta data in the context for later use.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionData},EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionFilterContext"/> class.
            </summary>
            <param name="promotions">The promotions.</param>
            <param name="requestedStatuses">The statuses to generate <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s for.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions">
            <summary>
            Contains the included promotions, i.e. the promotions that have fulfilled the
            conditions of the filters that have processed the context and are kept for
            evaluation by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionFilterContext.ExcludedPromotionDescriptions">
            <summary>
            Contains <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/> instances that filters may add to describe
            promotions that are not included in <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions"/>, i.e.
            promotions  that did not fulfill the filter's conditions to be kept for evaluation
            by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionFilterContext.RequestedStatuses">
            <summary>
            Gets the statuses to generate <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s for.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.ExcludePromotion(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.FulfillmentStatus,System.Boolean)">
            <summary>
            Excludes a promotion from <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions"/> and adds a an instance to
            <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.ExcludedPromotionDescriptions"/> describing why the promotion did not fulfill
            the filter's conditions to be kept for evaluation by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine" />.
            </summary>
            <param name="promotion">The promotion to exclude.</param>
            <param name="reason">
            A reason for excluding the promotion. Used to add an instance to
            <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.ExcludedPromotionDescriptions"/> with
            <see cref="P:EPiServer.Commerce.Marketing.RedemptionDescription.Status"/> set to
            <see cref="F:EPiServer.Commerce.Marketing.FulfillmentStatus.NotFulfilled"/> masked together with
            <paramref name="reason"/>.
            </param>
            <param name="createDescription"><c>true</c> if <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/> should be created; otherwise <c>false</c>.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.AddCouponCode(System.Guid,System.String)">
            <summary>
            Adds a connection between a promotion and a coupon code to describe that
            the promotion was included (i.e. kept in <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions" /> by the
            filter) based on a supplied coupon code.
            </summary>
            <param name="promotionGuid">The promotion identifier.</param>
            <param name="promotionCode">The promotion code.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.AddVisitorGroup(EPiServer.Core.ContentReference,System.Guid)">
            <summary>
            Adds a connection between a campaign and a visitor group to describe that the
            promotions of the campaign were included (i.e. kept in <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions" />
            by the filter) based on the user's membership in the visitor group.
            </summary>
            <param name="campaignLink">The campaign link.</param>
            <param name="visitorGroupId">The visitor group ID.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.GetCouponCode(System.Guid)">
            <summary>
            Gets the coupon code that was used to include a promotion (i.e. kept in
            <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions" /> by the filter), if the promotion was included based on
            a supplied coupon code.
            </summary>
            <param name="promotionGuid">The promotion identifier.</param>
            <returns>
            The used coupon code, or <c>null</c> if no coupon code was required to include the promotion.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilterContext.GetVisitorGroup(EPiServer.Core.ContentReference)">
            <summary>
            Gets the visitor group that the filter used to include the promotions of a campaign (i.e.
            keep the promotions in <see cref="P:EPiServer.Commerce.Marketing.PromotionFilterContext.IncludedPromotions" />), if the promotions were
            included based on the user's membership in a visitor group
            </summary>
            <returns>
            The id of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroup"/>, or <c>null</c> if no visitor group membership was
            required to include the promotions of the campaign.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionFilters">
            <summary>
            Filters for removing not available promotions. Used by the <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilters.#ctor(EPiServer.Commerce.Marketing.ICouponFilter,EPiServer.Commerce.Marketing.CampaignVisitorGroupFilter)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionFilters"/>.
            </summary>
            <param name="couponFilter">The coupon filter.</param>
            <param name="visitorGroupFilter">The service used to determine if a user can access promotion on a campaign based on the visitor groups.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionFilters.Filter(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionData},System.Collections.Generic.IEnumerable{System.String},EPiServer.Commerce.Marketing.RequestFulfillmentStatus)">
            <summary>
            Filter the specified promotions, by removing those that lacks any required coupon code or any required visitor group.
            </summary>
            <param name="allPromotions">The unfiltered list of promotions.</param>
            <param name="couponCodes">Any coupon codes supplied on the order.</param>
            <param name="requestedStatus">The statuses to generate <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/>s for.</param>
            <returns>An object containing the filtered promotions, as well as some information about how the filtering was done.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionGiftItem">
            <summary>
            Contains the <see cref="T:EPiServer.Commerce.Order.ILineItem"/>, which is a gift item, together with the <see cref="T:EPiServer.Commerce.Order.IShipment"/> it belongs to.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionGiftItem.#ctor(EPiServer.Commerce.Order.ILineItem,EPiServer.Commerce.Order.IShipment)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionGiftItem"/>
            </summary>
            <param name="giftLineItem">The line item.</param>
            <param name="shipment">The shipment.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionGiftItem.GiftLineItem">
            <summary>
            The line item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionGiftItem.Shipment">
            <summary>
            The shipment, which the gift item belongs to.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionGiftItem.QuantityApplied">
            <summary>
            Determines the gift item quantity that has been already applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionInformationExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionInformationExtensions.GetPromotion(EPiServer.Commerce.Marketing.PromotionInformation,EPiServer.IContentLoader)">
            <summary>
            Gets the promotion related to a <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.
            </summary>
            <param name="information">The related <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/> referring to the promotion.</param>
            <param name="loader">An <see cref="T:EPiServer.IContentLoader"/> for loading the promotion.</param>
            <returns>The promotion that is related to the <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionInformationExtensions.GetPromotion(EPiServer.Commerce.Marketing.PromotionInformation)">
            <summary>
            Gets the promotion related to a <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.
            </summary>
            <param name="information">The related <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/> referring to the promotion.</param>
            <returns>The promotion that is related to the <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionInformationExtensions.GetPromotion``1(EPiServer.Commerce.Marketing.PromotionInformation)">
            <summary>
            Gets the promotion related to a <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> the promotion is expected to be.</typeparam>
            <param name="information">The related <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/> referring to the promotion.</param>
            <returns>The promotion that is related to the <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionInformationExtensions.GetPromotion``1(EPiServer.Commerce.Marketing.PromotionInformation,EPiServer.IContentLoader)">
            <summary>
            Gets the promotion related to a <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> the promotion is expected to be.</typeparam>
            <param name="information">The related <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/> referring to the promotion.</param>
            <param name="loader">An <see cref="T:EPiServer.IContentLoader"/> for loading the promotion.</param>
            <returns>The promotion that is related to the <see cref="T:EPiServer.Commerce.Marketing.PromotionInformation"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionItems">
            <summary>
            All valid condition and reward catalog content items for a specific promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionItems.#ctor(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.CatalogItemSelection,EPiServer.Commerce.Marketing.CatalogItemSelection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionItems" /> class.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="condition">The condition catalog content items <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent" />, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent" />, and <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase" />.</param>
            <param name="reward">The reward catalog content items <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent" />, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent" />, and <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase" />.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionItems.Promotion">
            <summary>
            Gets the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionItems.Condition">
            <summary>
            Gets the condition catalog content items (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>, and <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>) associated with the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionItems.Reward">
            <summary>
            Gets the reward catalog content items (<see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>, and <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>) associated with the promotion.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionPrioritizer">
            <summary>
                Represents a class to set default priority value for a promotion to the lowest if it's not set.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.PromotionPrioritizer.PriorityStep">
            <summary>
                Default step for priority.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionPrioritizer.#ctor(EPiServer.IContentLoader,EPiServer.Core.IContentEvents)">
            <summary>
            Initlizes a new instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionPrioritizer"/>.
            </summary>
            <param name="contentLoader">The content loader used to find the promotions.</param>
            <param name="contentEvents">The content events.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionPrioritizer.Register">
            <summary>
                Register content events.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionPrioritizer.Unregister">
            <summary>
                Unregister content events.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionPrioritizer.GetCampaignFolderRoot">
            <summary>
                Get the link to the campaign folder root.
            </summary>
            <returns>The link to the campaign folder root.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionProcessorBase`1">
            <summary>
            Responsible for evaluating if a promotion is valid for a specific <see cref="T:EPiServer.Commerce.Order.IOrderForm"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.PromotionDataType">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.Priority">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.GetPromotionItems(EPiServer.Commerce.Marketing.PromotionData)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.GetLineItems(EPiServer.Commerce.Order.IOrderForm)">
            <summary>
            Get all line items included in an order form, except gift items.
            </summary>
            <param name="orderForm">The order form.</param>
            <returns>All line items included in the specified order form.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.Evaluate(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.NotFulfilledRewardDescription(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <summary>
            Not fulfilled reward description. Will be returned when CanBeFulfilled is false.
            </summary>
            <param name="promotionData">The promotion that was evaluated.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="fulfillmentStatus">The fulfillment level of the promotion.</param>
            <returns>
            A <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> for the not fulfilled promotion.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.GetPromotionItems(`0)">
            <summary>
            Gets information about the settings for a specific instance of a promotion type. 
            Used when displaying promotion information to a site visitor/shopper.
            </summary>
            <remarks>
            <para>
                This method is intended to be used on a site to display information about a promotion to a visitor/shopper.
            </para>
            <para>
                It is never used during the evaluation of the promotion, it only exists to provide information about the settings for this instance of a promotion type.
                So a use case for this could be that you have a "Buy 3 get the cheapest for one for free" promotion. And you want to display information to the visitor/shopper
                that "If you buy three items from the category cooking books, you will get the cheapest one for free".
            </para>
            <para>
                This method should not be called explicitly from the site code, but will be called from the IPromotionEngine extension method GetPromotionItemsForCampaign.
            </para>
            </remarks>
            <param name="promotionData">The promotion data to get items for.</param>
            <returns>
            The promotion condition and reward items.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.Evaluate(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Evaluates a promotion against an order form.  Implementations should use context.OrderForm for evaluations.
            </summary>
            <param name="promotionData">The promotion to evaluate.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns>
            A <see cref="T:EPiServer.Commerce.Marketing.RewardDescription" /> telling whether the promotion was fulfilled,
            which items the promotion was applied to and to which amount.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.CanBeFulfilled(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Verify that the current promotion can potentially be fulfilled
            </summary>
            <remarks>
            This method is intended to be a very quick pre-check to avoid doing more expensive operations.
            Used to verify basic things, for example a Buy-3-pay-for-2 promotion needs at least three items in the cart.
            If we have less than three we can skip further processing.
            </remarks>
            <param name="promotionData">The promotion to evaluate.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns>
                <c>true</c> if the current promotion can potentially be fulfilled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionProcessorContext">
            <summary>
                Context object passed into promotion processors and reward applicators, which contains discount information about
                the affected items.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Order.IShippingCalculator,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
                Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorContext" />.
            </summary>
            <param name="orderGroup">The order group that is evaluated.</param>
            <param name="orderForm">The order form.</param>
            <param name="lineItemCalculator">The line item calculator</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Order.IShippingCalculator,Mediachase.Commerce.Markets.IMarketService,EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Core.ContentReference)">
            <summary>
                Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorContext" />.
            </summary>
            <param name="orderGroup">The order group that is evaluated.</param>
            <param name="orderForm">The order form.</param>
            <param name="lineItemCalculator">The line item calculator</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="marketService">The market service.</param>
            <param name="promotionEngineContentLoader">The promotion engine content loader.</param>
            <param name="campaignRootLink">The campaign root link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Order.IShippingCalculator,Mediachase.Commerce.Markets.IMarketService,EPiServer.Commerce.Marketing.Internal.PromotionEngineContentLoader,EPiServer.Core.ContentReference,System.Func{EPiServer.Commerce.Marketing.PromotionData,System.Int32})">
            <summary>
                Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorContext" />.
            </summary>
            <param name="orderGroup">The order group that is evaluated.</param>
            <param name="orderForm">The order form.</param>
            <param name="lineItemCalculator">The line item calculator</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="marketService">The market service.</param>
            <param name="promotionEngineContentLoader">The promotion engine content loader.</param>
            <param name="campaignRootLink">The campaign root link.</param>
            <param name="remainingRedemptions">A func that returns the number of remaining redemptions.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.#ctor(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Order.IOrderFormCalculator,EPiServer.Commerce.Order.ILineItemCalculator,EPiServer.Commerce.Order.IReturnLineItemCalculator,EPiServer.Commerce.Order.IShippingCalculator,Mediachase.Commerce.Markets.IMarketService,System.Func{System.Decimal},System.Func{EPiServer.Commerce.Marketing.OrderFormPriceMatrix},System.Func{EPiServer.Commerce.Marketing.ShipmentPriceMatrix},System.Func{System.Collections.Generic.IList{EPiServer.Commerce.Marketing.PromotionGiftItem}},System.Func{EPiServer.Commerce.Marketing.PromotionData,System.Int32})">
            <summary>
                Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorContext" />.
            </summary>
            <param name="orderGroup">The order group that is evaluated.</param>
            <param name="orderForm">The order form.</param>
            <param name="orderFormCalculator">The order form calculator.</param>
            <param name="lineItemCalculator">The order form calculator.</param>
            <param name="returnLineItemCalculator">The return line item calculator.</param>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="marketService">The market service.</param>
            <param name="currentOrderFormSubTotal"></param>
            <param name="entryPriceMatrix">The price matrix for entries.</param>
            <param name="shipmentPriceMatrix">The price matrix for shipments.</param>
            <param name="giftItems">The list of promotion gift items.</param>
            <param name="remainingRedemptions">A func that returns the number of remaining redemptions.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.OrderForm">
            <summary>
                Gets the order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.OrderGroup">
            <summary>
                Gets the order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.AddConditionalItems(EPiServer.Core.ContentReference,System.Collections.Generic.IDictionary{System.String,System.Decimal})">
            <summary>
            Adds all conditional SKU codes and their individual required quantities to the PromotionProcessorContext's ConditionItems.
            </summary>
            <param name="promotionLink">The <see cref="T:EPiServer.Core.ContentReference"></see> of the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> having the <paramref name="individualRequiredQuantities"/> as a condition./></param>
            <param name="individualRequiredQuantities">A collection of SKU codes and their required quantities to be purchased for <paramref name="promotionLink"/> to be applicable.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.AddConditionalItems(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{System.String},System.Decimal)">
            <summary>
            Adds all conditional SKU codes and the total required quantity to the PromotionProcessorContext's ConditionItems.
            </summary>
            <param name="promotionLink">The <see cref="T:EPiServer.Core.ContentReference"></see> of the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> having the <paramref name="codes"/> as a condition./></param>
            <param name="codes">A collection of SKU codes making a promotion applicable for an <see cref="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.OrderForm"/>.</param>
            <param name="totalRequiredQuantity">The total quantity required to be purchased for <paramref name="promotionLink"/> to be applicable.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.AddEvaluatedSpendAmountPromotion(EPiServer.Core.ContentReference)">
            <summary>
            Adds an spend amount promotion that has been evaluated to the promotion context.
            </summary>
            <param name="promotionLink">The <see cref="T:EPiServer.Core.ContentReference"/> of the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> that is type of spend amount promotion.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.GetRemainingRedemptions(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets the remaining redemptions of a <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>The remaining redemptions, or <see cref="F:System.Int32.MaxValue"/> if the promotion has no redemption limit.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.CurrentOrderFormSubTotal">
            <summary>
                Gets the current order form subtotal that the promotion engine is processing at the time. This is calculated
                before every promotion has been evaluated.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.EntryPrices">
            <summary>
                Gets the price matrix for entries.
                Used to get the current state of prices for the line items. May change as more promotions are applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.ShipmentPrices">
            <summary>
                Gets the price matrix for shipments.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.UpdateDiscounts">
            <summary>
                Update the discount information on the line items, and shipments, that were used to populate
                <see cref="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.EntryPrices" /> and <see cref="P:EPiServer.Commerce.Marketing.PromotionProcessorContext.ShipmentPrices" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.Clone">
            <summary>
                Clones the promotion processor context object.
            </summary>
            <returns>The cloned context object.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorContext.GetShippingCost(EPiServer.Commerce.Order.IShipment)">
            <summary>
            Gets the shipping cost for the <paramref name="shipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <returns>The shipping cost.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionProcessorResolver">
            <summary>
                Finds the supported <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor" /> type for a <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>, and returns an instance of that type.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator,EPiServer.Framework.TypeScanner.TypeRelater)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorResolver"/> class.
            </summary>
            <param name="typeScannerLookup">The type scanner.</param>
            <param name="serviceLocator">The Service locator.</param>
            <param name="typeRelater">The type relater</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.ResolveForPromotion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Finds the supported <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor" /> type for the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>, and returns an instance of that type.
            </summary>
            <param name="promotionData">The promotion model.</param>
            <returns>Supported <c><see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor" /></c> if exist, otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">promotion model is null.</exception>
            <exception cref="T:System.NotImplementedException">The <paramref name="promotionData"/> has no promotion processor.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.ResolvePromotionProcessor(System.Collections.Generic.IList{System.Type})">
            <summary>
            Gets a <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> instance for a type if the type implements <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/>.
            </summary>
            <param name="promotionProcessorTypes">The collection of <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> types.</param>
            <returns><c><see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/></c> if the type is a promotion processor type.</returns>
            <exception cref="T:System.InvalidOperationException">The type is not a promotion processor type.</exception>
            <exception cref="T:System.ArgumentNullException">The promotion processor type is null.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.GetPromotionProcessorTypesWithModelType">
            <summary>
            List all registered <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> types with it's promotion data.
            </summary>
            <returns>A list of <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> types with it's promotion data</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionQuantityCondition">
            <summary>
            Quantity condition of a promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionQuantityCondition.#ctor(System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionQuantityCondition"/> class.
            </summary>   
            <param name="totalRequiredQuantity">The total required quantity.</param>
            <param name="individualRequiredQuantities">The required quantity for each individual item.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionQuantityCondition.TotalRequiredQuantity">
            <summary>
            The total required quantity.
            </summary>
            <remarks>Used in cases when the condition only cares about the total quantity.
            For example, buy 5 of A and B (no matters how many A and how many B), get C for free.
            If not null, then quantity required for each item will be ignored.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionQuantityCondition.IndividualRequiredQuantities">
            <summary>
            The required quantity for each individual item.
            </summary>
            <remarks>Used in cases when the condition has more than one quantity condition
            For example, Buy 2 of A and 3 of B, get 1 of C for free.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionRegionName">
            <summary>
            Names of available promotion regions.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionSchedule">
            <summary>
                Represents a content based promotion schedule item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionSchedule.UseCampaignDate">
            <summary>
            Gets or sets the track Campaign validation dates.
            </summary>
            <value>
            <c>true</c> to follow Campaign dates; <c>false</c> to use discount own dates.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionSchedule.ValidFrom">
            <summary>
            Gets or sets the time when the promotion starts.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionSchedule.ValidUntil">
            <summary>
            Gets or sets the time when the promotion ends.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionSchedule.CampaignLink">
            <summary>
            Gets or sets the reference to the campaign.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount">
            <summary>
            The <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount.Discount" /> will be applied to any SKUs that are part of the <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount.Category" />.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount.Category">
            <summary>
            Any SKUs that belong to this category will get a discount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor" />.
            </summary>
            <param name="collectionTargetEvaluator">The service that is used to evaluate the target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The service that is used to handle localization.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscountProcessor.GetRedemptions(EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. The cheapest entries <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems.FreeQuantity"/> will be free of charge. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems.FreeQuantity">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItemsProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItemsProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItemsProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate an order against a promotion's target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItemsProcessor.GetAffectedEntries(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, 
            that are part of the entries or nodes belonging to the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. 
            Free shipping will be applied to the all selected <see cref="P:EPiServer.Commerce.Marketing.ShippingPromotion.ShippingMethods"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="targetEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShippingProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeShipping,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount.Discount" /> will be applied to all properties from <see cref="P:EPiServer.Commerce.Marketing.Promotions.DiscountItems.Items" />. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount.DiscountTarget">
            <summary>
            The potential targets for the <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount.Discount"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscountProcessor">
            <summary>
            This promotion will be valid when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of skus, that are part of the entries or nodes belonging to
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscountProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate the target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscountProcessor.GetRedemptions(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFree">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. The most expensive entries <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFree.FreeQuantity"/> will be free of charge. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFree.FreeQuantity">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFree" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate an order against a promotion's target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor.GetAffectedEntries(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFree,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor.MostExpensiveEntrySorting">
            <summary>
            The class contains action for sorting by price in ascending order, and then moving quantity of the most 
            expensive entries to the first position of the sorted list. It is highly specific for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor.MostExpensiveEntrySorting.SortEntries(System.Collections.Generic.List{EPiServer.Commerce.Marketing.PriceEntry})">
            <summary>
            Sorts by price in ascending order, then moves quantity of the most 
            expensive entries to the first position of the sorted list.
            </summary>
            <param name="entries">The price entries.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetMostExpensiveFreeProcessor.MostExpensiveEntrySorting.GetExtractedEntries(System.Collections.Generic.List{EPiServer.Commerce.Marketing.PriceEntry})">
            <summary>
            Gets the extracted entries that need to moves to the top of sorted list.
            </summary>
            <param name="entries">The price entries.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount.Discount" /> will be applied to the order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Sets the default values for this instance, which will include setting the redemption limits per order is set to 1.
            </summary>
            <param name="contentType">The content type for this instance.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscountProcessor.Evaluate(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Evaluates the "Buy quantity get order discount" promotion.
            </summary>
            <param name="promotionData">The promotion model.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns>
            The reward for this promotion.
            </returns>
            <remarks>
            Note that the reward can be a percentage off or money off the total order amount. Since this
            is an order level promotion we will always return ONE redemption.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscountProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetOrderDiscount)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount.Discount" /> will be applied to every item that belongs to <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscountProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate the target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscountProcessor.GetRedemptions(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetSelectedItemsDiscount)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount.Discount" /> will be applied 
            to the all selected <see cref="P:EPiServer.Commerce.Marketing.ShippingPromotion.ShippingMethods"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="targetEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscountProcessor.CreateRewardDescription(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetShippingDiscount,EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount">
            <summary>
            This promotion type will be applied when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of SKUs, that are part of the entries or nodes belonging to 
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.FixedPricePurchaseQuantity.Items"/>, are in the cart. A fixed price defined in <see cref="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount.Amounts"/> will be applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount.Condition">
            <summary>
            The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount.Amounts">
            <summary>
            The fixed price to be applied.
            </summary>        
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor">
            <summary>
            This promotion will be valid when <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> number of skus, that are part of the entries or nodes belonging to
            the <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>, are in the cart.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate the target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.Evaluate(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmountProcessor.GetRedemptions(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1">
            <summary>
            Base class for a promotion processor that stores condition items when evaluating its promotions.
            </summary>
            <typeparam name="TEntryPromotion">An entry-level promotion.</typeparam>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,System.Func{`0,EPiServer.Commerce.Marketing.Promotions.DiscountItems},System.Func{`0,EPiServer.Commerce.Marketing.MonetaryReward},System.Func{`0,EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity},EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Initializes a new instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate the target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="targetGetter">Delegate to get the discount targets from the promotion.</param>
            <param name="discountGetter">Delegate to get the discount from the promotion.</param>
            <param name="conditionGetter">Delegate to get the condition from the promotion.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1.GetFulfillmentStatus(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1.CanBeFulfilled(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.ConditionAwareItemDiscountProcessor`1.GetRedemptions(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.ConditionBlock">
            <summary>
            Represent conditions for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>s.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.ConditionBlock.PartiallyFulfilledThreshold">
            <summary>
            The promotion will be partially fulfilled if the number of cart items that
            match are equal or higher than this value but lower than condition amount.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.DiscountItems">
            <summary>
            The items that the discount will be applied to.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.DiscountItems.Items">
            <summary>
            The items that the reward will be applied to.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.DiscountItems.MatchRecursive">
            <summary>
            Determines if a recursive logic should be used when identifying should have the reward applied to it.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.DiscountItems.MaxQuantity">
            <summary>
            The maximum number of affected items
            </summary>        
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.DiscountItems.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Sets the default values for this instance, which will include setting <see cref="P:EPiServer.Commerce.Marketing.Promotions.DiscountItems.MatchRecursive"/> to true.
            </summary>
            <param name="contentType">The content type for this instance.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.FixedPricePurchaseQuantity">
            <summary>
            A condition for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>s where the user needs to specify a <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> for <see cref="P:EPiServer.Commerce.Marketing.Promotions.FixedPricePurchaseQuantity.Items"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.FixedPricePurchaseQuantity.Items">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1">
            <summary>
            Base class for processors for promotions giving free items discount.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,System.Func{`0,EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity},EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate an order against a promotion's target properties.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="conditionGetter">Delegate to get the condition from the promotion.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.Evaluate(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.GetRedemptions(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/>s affected by a given promotion.
            </summary>
            <param name="promotionData">The promotion used to evaluate the product codes.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="applicableCodes">A collection of product codes to be checked against a promotion.</param>
            <returns>A list of applicable <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.CanBeFulfilled(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.NotFulfilledRewardDescription(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.GetPromotionItems(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetFreeItemsProcessorBase`1.GetAffectedEntries(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the affected entries.
            </summary>
            <param name="promotionData">The promotion used to evaluate the product codes.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="applicableCodes">A collection of product codes to be checked against a promotion.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1">
            <summary>
                Base class for processors for promotions giving a discount off specific target items.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Framework.Localization.LocalizationService,System.Func{`0,EPiServer.Commerce.Marketing.Promotions.DiscountItems},System.Func{`0,EPiServer.Commerce.Marketing.MonetaryReward},EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1" /> class.
            </summary>
            <param name="targetEvaluator">The target evaluator.</param>
            <param name="localizationService">The localization service.</param>
            <param name="targetGetter">Delegate to get the discount targets from the promotion.</param>
            <param name="discountGetter">Delegate to get the discount from the promotion.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.CanBeFulfilled(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Checks that the order has lineitems and that the promotion has any target items and a discount amount in the order's currency.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="context">The context.</param>
            <returns>True if all conditions are met, otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.Evaluate(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.NotFulfilledRewardDescription(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.GetFulfillmentStatus(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the promotion.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <param name="context">The context.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.GetItemDiscountProcessorBase`1.GetRedemptions(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all <see cref="T:EPiServer.Commerce.Marketing.AffectedEntries"/>s affected by a given promotion.
            </summary>
            <param name="promotionData">The promotion used to evaluate the product codes.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="applicableCodes">A collection of product codes to be checked against a promotion.</param>
            <returns>A list of applicable <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.IMonetaryDiscount">
            <summary>
            This interface for promotion types with monetary discount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.IMonetaryDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.IPurchaseAmount">
            <summary>
            This interface for promotion types with purchase amounts.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.IPurchaseAmount.Condition">
            <summary>
            The promotion will be applied if the currency amount spent in the cart is equal or higher than
            the amount of one <see cref="T:Mediachase.Commerce.Money" /> in this list, which has the same currency.
            </summary>
            <remarks>The default value of currency amounts set to zero.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.ISpendAmountGetMonetaryDiscount">
            <summary>
            This interface for promotion types with spend currency amounts then get monetary discount.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.PurchaseAmount">
            <summary>
            A condition for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>s where the user needs to spend at least a <see cref="T:Mediachase.Commerce.Money"/> in this list, which has the same currency.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.PurchaseAmount.Amounts">
            <summary>
            The promotion will be applied if the money amount spent in the cart is equal or higher than 
            the amount of one <see cref="T:Mediachase.Commerce.Money" /> in this list, which has the same currency.
            </summary>
            <remarks>The default value of currency amounts set to zero.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.PurchaseAmount.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Sets the default values for this instance, which will include setting <see cref="P:EPiServer.Commerce.Marketing.Promotions.ConditionBlock.PartiallyFulfilledThreshold"/> to 95 percent
            and the redemption limits per order is set to 1.
            </summary>
            <param name="contentType">The content type for this instance.</param>
            <remarks>It must be from 0 to 1. Its default value set to 0.95</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity">
            <summary>
            A condition for <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>s where the user needs to specify a <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity"/> for <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.RequiredQuantity">
            <summary>
            The promotion will apply if the number of cart items that <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items"/> match are equal or higher than this value.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.Items">
            <summary>
            The target items for which the promotion is valid.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.MatchRecursive">
            <summary>
            Determines if a recursive logic should be used when identifying if an item is valid according to the conditions of the promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Sets the default values for this instance, which will include setting <see cref="P:EPiServer.Commerce.Marketing.Promotions.ConditionBlock.PartiallyFulfilledThreshold"/> to one and <see cref="P:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity.MatchRecursive"/> to true.
            </summary>
            <param name="contentType">The content type for this instance.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping">
            <summary>
            This promotion type will be applied when spend at least currency amounts in the cart. A free shipping will be applied
            to the all selected <see cref="P:EPiServer.Commerce.Marketing.ShippingPromotion.ShippingMethods"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping.Condition">
            <summary>
            The promotion will be applied if the money amount spent in the cart is equal or higher than
            the amount of one <see cref="T:Mediachase.Commerce.Money" /> in this list, which has the same currency.
            </summary>
            <remarks>The default value of currency amounts set to zero.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShippingProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetFreeShipping,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems">
            <summary>
            This promotion type will be applied when spend at least currency amount in the cart. The <see cref="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems.GiftItems" /> will be applied to the order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems.Condition">
            <summary>
             The condition for the promotion that needs to be fulfilled before the discount is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems.GiftItems">
            <summary>
            The gift items list that will be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Commerce.Marketing.GiftItemFactory,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="giftItemFactory">The service that is used to get applicable gift items.</param>
            <param name="localizationService">Service to handle localization of text strings.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor.Evaluate(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItemsProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount">
            <summary>
            This promotion type will be applied when condition amount have been spent in the cart. 
            A <see cref="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount.Discount" /> will be applied to items from multiple content references.    
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount.Condition">
            <summary>
            The condition to get the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount.DiscountTarget">
            <summary>
            The potential targets for the <see cref="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount.Discount"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount" /> will be
            applied to items from multiple content references.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.CollectionTargetEvaluator,EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.RedemptionDescriptionFactory)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor" />.
            </summary>
            <param name="targetEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
            <param name="redemptionDescriptionFactory">Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetItemDiscount)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount">
            <summary>
            This promotion type will be applied when spend at least currency amount in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount.Discount" /> will be applied to the order.    
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount.Condition">
            <summary>
            The promotion will be applied if the currency amount spent in the cart is equal or higher than
            the amount of one <see cref="T:Mediachase.Commerce.Money" /> in this list, which has the same currency.
            </summary>
            <remarks>The default value of currency amounts set to zero.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor.Evaluate(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetOrderDiscount)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount">
            <summary>
            This promotion type will be applied when spend at least currency amounts in the cart. A <see cref="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount.Discount" /> will be applied 
            to the all selected <see cref="P:EPiServer.Commerce.Marketing.ShippingPromotion.ShippingMethods"/>. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount.Condition">
            <summary>
            The promotion will be applied if the money amount spent in the cart is equal or higher than 
            the amount of one <see cref="T:Mediachase.Commerce.Money" /> in this list, which has the same currency.
            </summary>
            <remarks>The default value of currency amounts set to zero.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount.Discount">
            <summary>
            The reward values that should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor">
            <summary>
            The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount" /> should
            apply a reward to an order group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.#ctor(EPiServer.Commerce.Marketing.FulfillmentEvaluator,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor" />.
            </summary>
            <param name="fulfillmentEvaluator">The service that is used to evaluate the fulfillment status of the promotion.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.CanBeFulfilled(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.NotFulfilledRewardDescription(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.GetPromotionItems(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.GetFulfillmentStatus(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscountProcessor.CreateRewardDescription(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetShippingDiscount,EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionTypeHandler">
            <summary>
            Provides the capability to show or hide specific promotion types that inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.#ctor(EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionTypeHandler"/>.
            </summary>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.DisablePromotions(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Disables specific promotions which inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
            <param name="promotionTypes">The collection of promotion types that need to be disabled.</param>
            <remarks>The promotion types must inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.EnablePromotions(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Enables specific promotions which inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
            <param name="promotionTypes">The collection of promotion types that need to be enabled.</param>
            <remarks>The promotion types must inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.DisableBuiltinPromotions">
            <summary>
            Disables all built-in promotion types that inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.GetAllPromotionTypes">
            <summary>
            Gets all promotion types that inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
            <returns>The collection of promotion types.</returns>
            <remarks>The abstract types are not included.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionTypeHandler.SetPromotionsAvailability(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Sets the availability for specific promotions which inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
            <param name="promotionTypes">The collection of promotion types need to be disabled/enabled.</param>
            <param name="available">if set to <c>true</c>, enable the promotion types; otherwise disable them.</param>
            <remarks>The promotion types must inherit from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/></remarks>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RedemptionDescription">
            <summary>
             The representation of a redeemed promotion's affected <see cref="T:EPiServer.Commerce.Order.ILineItem"/>s, affected <see cref="T:EPiServer.Commerce.Order.IOrderForm"/>s or affected <see cref="T:EPiServer.Commerce.Order.IShipment"/>s.
             </summary>
             <remarks>
             Instances of this class is created using "CreateRedemptionDescription" methods in <see cref="T:EPiServer.Commerce.Marketing.EntryPromotionProcessorBase`1"/>, <see cref="T:EPiServer.Commerce.Marketing.OrderPromotionProcessorBase`1"/>, or <see cref="T:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1"/>.
             </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionDescription.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.IAffectedObject})">
            <summary>
            Initialize a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/> class.
            </summary>
            <param name="affectedObjects">The objects affected by the promotion.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.AffectedObjects">
            <summary>
            Gets the affected objects.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.AffectedEntries">
            <summary>
            The line items affected by the promotion._affectedItems
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.AffectedShipments">
            <summary>
            Gets the affected shipments.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.AffectedOrders">
            <summary>
            Gets the affected orders that contains an order level discount.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.SavedAmount">
            <summary>
            Gets the amount saved by the redeemed promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionDescription.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RedemptionDescriptionFactory">
            <summary>
            Factory for creating <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionDescriptionFactory.GetRedemptionDescriptions(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionProcessorContext,System.Collections.Generic.IEnumerable{System.String},System.Decimal,System.Decimal)">
            <summary>
            Gets all <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s affected by a given promotion.
            </summary>
            <param name="promotionData">The promotion used to evaluate the product codes.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <param name="applicableCodes">A collection of product codes to be checked against a promotion.</param>
            <param name="maxQuantity">The maximum number of items that the promotion can be applied to.</param>
            <param name="batchSize">The number of items to process. If the promotion has a required quantity, it is used here, otherwise it's int.MaxValue.</param>
            <returns>A list of applicable <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionDescriptionFactory.ExcludedDueToUnitLevelExclusion(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Unit level exclusion means that two promotions that exclude each other are both applied.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <param name="context">The promotion context.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RedemptionLimits">
            <summary>
            Tracks redemption limits for promotions.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimits.#ctor(EPiServer.Commerce.Marketing.IRedemptionLimitService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RedemptionLimits"/> class.
            </summary>
            <param name="redemptionLimitService">The redemption limit service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimits.Load(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionData},System.Guid,System.Int32)">
            <summary>
            Loads the redemption limits of the specified promotions.
            </summary>
            <param name="promotions">The promotions.</param>
            <param name="customerId">The customer identifier.</param>
            <param name="orderformId">The orderform identifier.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimits.GetRemainingRedemptions(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Gets the remaining redemptions of the specified promotion.
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>the remaining redemptions for the promotion</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimits.GetPerOrderFormRedemptions(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Get the per-order-form redemption limits for the specified promotion.
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>The order form redemption limit, if not set retruns int.MaxValue</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimits.CanBeRedeemed(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Determines whether the specified promotion can be redeemed or not
            </summary>
            <param name="promotion">The promotion.</param>
            <returns>true if it can be redeemed, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RedemptionLimitsData">
            <summary>
            Contains information regarding Redemption Limits on <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionLimitsData.PerPromotion">
            <summary>
            Gets or sets the redemption limit per promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionLimitsData.PerOrderForm">
            <summary>
            Gets or sets the redemption limit per order form.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RedemptionLimitsData.PerCustomer">
            <summary>
            Gets or sets the redemption limit per customer
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RedemptionLimitService">
            <summary>
            Class to get the remaining redemption of given promotions for a given customer.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimitService.#ctor(EPiServer.Core.IContentEvents,EPiServer.IContentLoader,EPiServer.Commerce.Marketing.PromotionInformationRepository,Mediachase.Commerce.Security.CurrentUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RedemptionLimitService" /> class.
            </summary>
            <param name="contentEvents">The content events.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="promotionInformationRepository">The promotion information repository.</param>
            <param name="currentUserService">The current user service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimitService.#ctor(EPiServer.Commerce.Marketing.PromotionInformationRepository,Mediachase.Commerce.Security.CurrentUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RedemptionLimitService" /> class.
            </summary>
            <param name="promotionInformationRepository">The promotion information repository.</param>
            <param name="currentUserService">The current user service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimitService.#ctor(EPiServer.Commerce.Marketing.PromotionInformationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RedemptionLimitService" /> class.
            </summary>
            <param name="promotionInformationRepository">The promotion information repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimitService.Dispose">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RedemptionLimitService.GetRemainingRedemptions(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.PromotionData},System.Guid,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RequestFulfillmentStatus">
            <summary>
            The fulfillment level of a promotion that is requested to be returned from the <see cref="M:EPiServer.Commerce.Marketing.PromotionEngine.Run(EPiServer.Commerce.Order.IOrderGroup,EPiServer.Commerce.Marketing.PromotionEngineSettings)"/> method.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.None">
            <summary>
            Return no information about the any promotion outcome.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.NotFulfilled">
            <summary>
            Return information about the promotions that are not fulfilled.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.PartiallyFulfilled">
            <summary>
            Return information about the promotions that are partially fulfilled.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.Fulfilled">
            <summary>
            Return information about the promotions that are fulfilled.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.All">
            <summary>
            Return information about all promotion outcomes. Combines the flags <see cref="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.NotFulfilled"/>, <see cref="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.Fulfilled"/> and <see cref="F:EPiServer.Commerce.Marketing.RequestFulfillmentStatus.PartiallyFulfilled"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RewardApplicatorBase">
            <summary>
            Update and Apply rewards.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase.Apply(EPiServer.Commerce.Marketing.RewardDescription,System.Int32,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a reward to the <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.EntryAmount"/> or <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.OrderAmount"/> or <see cref="P:EPiServer.Commerce.Order.IShipmentDiscountAmount.ShipmentDiscount"/>.
            </summary>
            <param name="reward">The reward description.</param>
            <param name="remainingRedemptions">The number of remaining redemptions.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardApplicatorBase.DiscountType">
            <summary>
            Gets the <see cref="P:EPiServer.Commerce.Marketing.RewardApplicatorBase.DiscountType"/> used to determine which property to update on the <see cref="T:EPiServer.Commerce.Order.ILineItem"/> or <see cref="T:EPiServer.Commerce.Order.IShipment"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RewardApplicatorBase`1">
            <summary>
            When implemented, modifies discounts on a <see cref="T:EPiServer.Commerce.Order.ILineItem"/> or a <see cref="T:EPiServer.Commerce.Order.IShipment"/>. It also modifies saved amount of the applying reward.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.Apply(EPiServer.Commerce.Marketing.RewardDescription,System.Int32,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a reward to the <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.EntryAmount"/> or <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.OrderAmount"/> or <see cref="P:EPiServer.Commerce.Order.IShipmentDiscountAmount.ShipmentDiscount"/>.
            </summary>
            <param name="reward">The reward description.</param>
            <param name="remainingRedemptions">The number of remaining redemptions.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.Apply(EPiServer.Commerce.Marketing.RewardDescription,EPiServer.Commerce.Marketing.RedemptionDescription,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a reward for each redemption to the <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.EntryAmount"/> 
            or <see cref="P:EPiServer.Commerce.Order.ILineItemDiscountAmount.OrderAmount"/> or <see cref="P:EPiServer.Commerce.Order.IShipmentDiscountAmount.ShipmentDiscount"/>
            </summary>
            <param name="reward">Information about the discount.</param>
            <param name="redemption">The redemption of the discount.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.AddGiftItem(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Adds the gift item to shipment of order.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.ApplyDiscount(`0,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies an amount discount.
            </summary>
            <remarks>
            If the discount amount combined with any previously set discount exceeds the total price for the line item then
            the discount will be the remaining amount of the total priced reduced by the already existing discounts.
            </remarks>
            <param name="item">The affected item.</param>
            <param name="discountAmount">The discount amount.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discounted amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.ApplyPercentage(`0,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a percentage discount.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="percentage">The percentage to use.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discounted amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.ApplyFixedPrice(`0,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a fixed price discount.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="fixedPrice">The fixed price to use.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discounted amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.ApplyFreeItems(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies a free item discount.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discounted amount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorBase`1.ApplyNotSpecified(`0,EPiServer.Commerce.Marketing.RewardDescription,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Applies none specified discount.
            </summary>
            <param name="item">The affected item containing the discount.</param>
            <param name="reward">The reward.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
            <returns>The discounted amount.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RewardApplicatorResolver">
            <summary>
            Resolves the implementation of <see cref="T:EPiServer.Commerce.Marketing.EntryRewardApplicator"/>, <see cref="T:EPiServer.Commerce.Marketing.OrderRewardApplicator"/>, and <see cref="T:EPiServer.Commerce.Marketing.ShippingRewardApplicator"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorResolver.#ctor(EPiServer.Commerce.Marketing.EntryRewardApplicator,EPiServer.Commerce.Marketing.OrderRewardApplicator,EPiServer.Commerce.Marketing.ShippingRewardApplicator)">
            <summary>
            Creates an instance of a <see cref="T:EPiServer.Commerce.Marketing.RewardApplicatorResolver"/>.
            <param name="entryRewardApplicator"><see cref="T:EPiServer.Commerce.Marketing.EntryRewardApplicator"/> for changing a line item's discount amount.</param>
            <param name="orderRewardApplicator"><see cref="T:EPiServer.Commerce.Marketing.OrderRewardApplicator"/> for changing a line item's order discount amount.</param>
            <param name="shippingRewardApplicator"><see cref="T:EPiServer.Commerce.Marketing.ShippingRewardApplicator"/> for changing shipment's shipping discount amount.</param>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardApplicatorResolver.GetApplicator(EPiServer.Commerce.Marketing.DiscountType)">
            <summary>
            Gets the correct <see cref="T:EPiServer.Commerce.Marketing.RewardApplicatorBase"/> for <paramref name="discountType"/>.
            </summary>
            <param name="discountType">The type of line item discount.</param>
            <returns>The correct <see cref="T:EPiServer.Commerce.Marketing.RewardApplicatorBase"/> for <paramref name="discountType"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.RewardDescription">
            <summary>
            Description object representing the result of a promotion evaluation. Provides information to the caller about reward type, amount and whether the
            promotion was fulfilled or not.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.#ctor(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,System.Decimal,System.Decimal,EPiServer.Commerce.Marketing.RewardType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.RewardDescription"/> class.
            </summary>
            <param name="status">The promotion's <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/>.</param>
            <param name="redemptions">A collection of <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription"/>s.</param>
            <param name="promotion">The promotion.</param>
            <param name="unitDiscount">The discount to apply per unit when the discount type is money.</param>
            <param name="unitPercentage">The discount to apply per unit when the discount type is percentage.</param>
            <param name="rewardType">The reward type.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.UnitDiscount">
            <summary>
            Gets the discount amount when the discount type is money.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.Percentage">
            <summary>
            Gets the discount amount when the discount type is percentage.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.Redemptions">
            <summary>
            Gets the redemptions.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.Description">
            <summary>
            Gets or sets a description of the promotion result.
            </summary>
            <remarks>
            The value of this property is intended to be used for logging and debugging purposes.
            You should not assume that this text is fit for presenting to an end-user.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.RewardType">
            <summary>
            Gets the reward typed, can be percentage, amount or free.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.Promotion">
            <summary>
            Gets the promotion.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.SavedAmount">
            <summary>
            Gets the amount of money this reward has given the order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.RewardDescription.AppliedCoupon">
            <summary>
            Gets or sets any coupon code that has been applied to this reward.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateMoneyReward(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,System.Decimal,System.String)">
            <summary>
            Create a new reward of the type <see cref="F:EPiServer.Commerce.Marketing.RewardType.Money" />
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="unitDiscount">The discount to add per unit.</param>
            <param name="description">An optional description of the reward.</param>
            <returns>A description of a reward that has a money discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreatePercentageReward(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,System.Decimal,System.String)">
            <summary>
            Create a new reward of the type <see cref="F:EPiServer.Commerce.Marketing.RewardType.Percentage"/>
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="unitPercentage">The discount in percentage to add per unit.</param>
            <param name="description">An optional description of the reward.</param>
            <returns>A description of a reward that has a percentage discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateFreeItemReward(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,System.String)">
            <summary>
            Create a new reward of the type <see cref="F:EPiServer.Commerce.Marketing.RewardType.Free"/>
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="description">An optional description of the reward.</param>
            <returns>A description of a reward that has a free item discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateGiftItemsReward(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,System.String)">
            <summary>
            Create a new reward of the type <see cref="F:EPiServer.Commerce.Marketing.RewardType.Gift"/>
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="description">An optional description of the reward.</param>
            <returns>A description of a reward that has gift items discount.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateNotFulfilledDescription(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.FulfillmentStatus)">
            <summary>
            Creates a new reward for a promotion that was not applied.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="reason">
            A reason the promotion was not applied. Used when setting <see cref="P:EPiServer.Commerce.Marketing.RedemptionDescription.Status"/> by masking it onto
            <see cref="F:EPiServer.Commerce.Marketing.FulfillmentStatus.NotFulfilled"/>.
            </param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateMoneyOrPercentageRewardDescription(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.MonetaryReward,Mediachase.Commerce.Currency,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Create new percentage or money reward based on <see cref="T:EPiServer.Commerce.Marketing.MonetaryReward"/>
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="discount">The description of the reward.</param>
            <param name="currency">The currency to use for money reward.</param>
            <param name="localizationService">The localization service</param>
            <returns>A description of a reward that is money or percentage based.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.RewardDescription.CreateMoneyOrPercentageRewardDescription(EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionData,EPiServer.Commerce.Marketing.MonetaryReward,Mediachase.Commerce.Currency,System.String)">
            <summary>
            Create new percentage or money reward based on <see cref="T:EPiServer.Commerce.Marketing.MonetaryReward"/>
            </summary>
            <param name="status">If the reward is fulfilled or not.</param>
            <param name="redemptions">The items this reward affects.</param>
            <param name="promotion">The promotion that has generated this reward.</param>
            <param name="discount">The description of the reward.</param>
            <param name="currency">The currency to use for money reward.</param>
            <param name="description">The description for the reward.</param>
            <returns>A description of a reward that is money or percentage based.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.SalesCampaign">
            <summary>
            Represents a campaign in Commerce, i.e. a campaign which has related promotions (discounts)
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.Description">
            <summary>
                Gets or sets description of the campaign
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.ValidFrom">
            <summary>
                Gets or sets the time when the campaign starts.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.ValidUntil">
            <summary>
                Gets or sets the time when the campaign ends.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.IsActive">
            <summary>
                Gets or sets if this campaign is active.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.Code">
            <summary>
                Gets or sets code of the campaign.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.TargetMarket">
            <summary>
            Gets or sets the market.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.TargetMarkets">
            <summary>
            Gets or sets the market.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.RevenueGoal">
            <summary>
            Gets or sets the revenue goal.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.SalesCampaign.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.SalesCampaignExtensions">
            <summary>
            Extensions for <see cref="T:EPiServer.Commerce.Marketing.SalesCampaign"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.SalesCampaignExtensions.GetAllMarketIds(EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Gets all markets 
            </summary>
            <param name="campaign">The sales campaign.</param>
            <returns>List of markets in the system.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.SalesCampaignFolder">
             <summary>
                 Represents a campaign folder to structure campaign items
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaignFolder.Name">
            <summary>
                Overwrite name with translation for campaign folder
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShipmentPrice">
            <summary>
            This class is used to hold information about prices in the <see cref="T:EPiServer.Commerce.Marketing.ShipmentPriceMatrix"/>.
            </summary>
            <remarks>
            This is primarily used for internal calculations. If you need to manipulate these instances directly you're
            probably doing something that you shouldn't.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShipmentPrice.#ctor(EPiServer.Commerce.Order.IShipment,System.Decimal)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Marketing.ShipmentPrice"/>
            </summary>
            <param name="shipment">The shipment</param>
            <param name="shippingCost">The shipping cost.</param>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShipmentPrice.Shipment">
            <summary>
            The shipment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShipmentPrice.ActualTotal">
            <summary>
            Total cost of the shipment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShipmentPrice.OriginalTotal">
            <summary>
            The original shipment cost.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShipmentPrice.OriginalShippingDiscount">
            <summary>
            The <see cref="P:EPiServer.Commerce.Order.IShipmentDiscountAmount.ShipmentDiscount"/> before calculations.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShipmentPrice.SavedAmount">
            <summary>
            The saved amount of this shipment.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShipmentPriceMatrix">
            <summary>
                Container for all prices that can be associated with the shipment.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShipmentPriceMatrix.#ctor(EPiServer.Commerce.Order.IShippingCalculator,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Marketing.ShipmentPriceMatrix"/>.
            </summary>
            <param name="shippingCalculator">The shipping calculator.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShipmentPriceMatrix.GetShippingCost(EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.IOrderGroup)">
            <summary>
            Gets the shipping cost for the <paramref name="shipment"/>.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="orderGroup">The order group, which the shipment belongs to.</param>
            <returns>The shipping cost.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShipmentPriceMatrix.AddDiscount(EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Order.IOrderGroup,System.Decimal)">
            <summary>
            Adds a discount for a specific shipment.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="orderGroup">The order group, which the shipment belongs to.</param>
            <param name="discountAmount">The discount amount.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShipmentPriceMatrix.UpdateDiscount(EPiServer.Commerce.Marketing.DiscountUpdater)">
            <summary>
            Updates the discount information on the shipments, that were used to populate this price matrix.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShippingPromotion">
            <summary>
                Represents a content based shipping promotion item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShippingPromotion.DiscountType">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShippingPromotion.ShippingMethods">
            <summary>
            A collection of shipping method ids determining which shipping methods can be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1">
            <summary>
                Responsible for evaluating if a shipping promotion is valid for a specific <see cref="T:EPiServer.Commerce.Order.IOrderForm" />.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.CreateRedemptionDescription(EPiServer.Commerce.Order.IShipment,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
                Creates a <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> using affected <paramref name="shipment" />.
            </summary>
            <param name="shipment">The shipment.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns><see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> with <see cref="T:EPiServer.Commerce.Marketing.AffectedShipments" />.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.CreateRedemptionDescription(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Order.IShipment},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
                Creates a <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> using affected <paramref name="shipments" />.
            </summary>
            <param name="shipments">The shipments.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns><see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> with <see cref="T:EPiServer.Commerce.Marketing.AffectedShipments" />s.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.GetShipments(EPiServer.Commerce.Order.IOrderForm,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets shipments that match the given shipping methods.
            </summary>
            <param name="orderForm">The order form that contains the shipments to check.</param>
            <param name="shippingMethods">The shipping methods to check for.</param>
            <returns>An IEnumerable of <see cref="T:EPiServer.Commerce.Order.IShipment"/> that uses the selected shipping methods.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.GetRedemptions(`0,EPiServer.Commerce.Order.IOrderForm,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Gets list of <see cref="T:EPiServer.Commerce.Marketing.RedemptionDescription" /> that match shipping the promotion.
            </summary>
            <param name="promotionData">The shipping promotion data.</param>
            <param name="orderForm">The order form.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.Evaluate(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Evaluates the shipping promotion.
            </summary>
            <param name="promotionData">The promotion model.</param>
            <param name="context">The context for the promotion processor evaluation.</param>
            <returns>
            The reward for this promotion.
            </returns>
            <remarks>
            Note that this is an order level promotion we will always return ONE redemption.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.GetFulfillmentStatus(`0,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Implements promotion specific logic for determining the fulfillment status of the promotion.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <param name="context">The context.</param>
            <returns>The calculated fulfillment status as a <see cref="T:EPiServer.Commerce.Marketing.FulfillmentStatus"/> value.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingPromotionProcessorBase`1.CreateRewardDescription(`0,EPiServer.Commerce.Marketing.FulfillmentStatus,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Marketing.RedemptionDescription},EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Create the reward description which will be returned while evaluate if the promotion is fulfilled.
            </summary>
            <param name="promotionData">The promotion data.</param>
            <param name="fulfillmentStatus">The fulfillment status.</param>
            <param name="redemptions">The redemptions.</param>
            <param name="context">The context.</param>
            <returns>The reward for this promotion.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShippingRewardApplicator">
            <summary>
            Modifies <see cref="P:EPiServer.Commerce.Order.IShipmentDiscountAmount.ShipmentDiscount"/> on a <see cref="T:Mediachase.Commerce.Orders.Shipment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.ShippingRewardApplicator.DiscountType">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingRewardApplicator.ApplyDiscount(EPiServer.Commerce.Marketing.AffectedShipments,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingRewardApplicator.ApplyPercentage(EPiServer.Commerce.Marketing.AffectedShipments,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingRewardApplicator.ApplyFreeItems(EPiServer.Commerce.Marketing.AffectedShipments,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Marketing.ShippingRewardApplicator.AddDiscount(EPiServer.Commerce.Order.IShipment,System.Decimal,EPiServer.Commerce.Marketing.PromotionProcessorContext)">
            <summary>
            Add shipping discount to shipment.
            </summary>
            <param name="shipment">The shipment to apply discount.</param>
            <param name="savedAmount">The saved amount of shipping.</param>
            <param name="processorContext">The promotion processor context for the promotion applicator.</param>
        </member>
        <member name="T:EPiServer.Commerce.MetaDataEventManager">
            <summary>
            Represents the event manager, which listen for MetaData updated event from Commerce Manager site, and invoke the appropriated event in front-end site context.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataLinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataUnlinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataUpdated">
            <summary>
            Occurs when a meta field has been updated.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.AddEvent">
            <summary>
            Register event handler
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.DeSerialize(System.Byte[])">
            <summary>
            DeSerialize event arguments
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.IsSelfRaised(EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.MetaDataUpdatedHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Handler to call create event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EPiServer.Commerce.Routing.CatalogRouteHelper">
            <summary>
            Contains helper methods to register routes for commerce catalog items.
            </summary>
            <example>
            The recommended way is to do it in an EPiServer.Framework.IInitializableModule.
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/RegisterRoutingModuleSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.MapDefaultHierarchialRouter(System.Web.Routing.RouteCollection,System.Boolean)">
            <summary>
            Registers a default partial router for catalog content.
            </summary>
            <param name="routes">The route collection.</param>
            <param name="enableOutgoingSeoUri">if set to <c>true</c> the outgoing links for catalog items will use the SEO URL.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.MapDefaultHierarchialRouter(System.Web.Routing.RouteCollection,System.Func{EPiServer.Core.ContentReference},System.Boolean)">
            <summary>
            Registers a default partial router for catalog content.
            </summary>
            <param name="routes">The route collection.</param>
            <param name="startingPoint">The starting point where the partial route will start.</param>
            <param name="enableOutgoingSeoUri">if set to <c>true</c> the outgoing links for catalog items will use the SEO URL.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.SetupSeoUriPermanentRedirect">
            <summary>
            Registers an eventhandler to call <see cref="M:EPiServer.Commerce.Routing.SeoRedirectHandler.RedirectToSeoUri(EPiServer.Web.Routing.RoutingEventArgs)"/> when
            a content has been routed, so that <see cref="T:EPiServer.Commerce.Routing.SeoRedirectHandler"/> can make sure
            that any request for commerce content using the hierarchial URL when there is a
            SEO Url for that content will be permanently redirected to the SEO Url.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter">
            <summary>
            Partial router for catalog content, which handles hierarchical structure
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="enableOutgoingSeoUri">Enables seo uri for outgoing route.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean,EPiServer.IContentLoader,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Core.IContentVersionRepository,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter" />
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="supportSeoUri">Enables seo uri for the route.</param>
            <param name="contentLoader">The content loader service.</param>
            <param name="routingSegmentLoader">The routing segment loader service.</param>
            <param name="contentVersionRepository">The content version repository.</param>
            <param name="urlSegmentRouter">The url segment router.</param>
            <param name="contentLanguageSettingsHandler">The content language settings handler</param>
            <param name="httpContextAccessor">The http context accessor</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean,EPiServer.IContentLoader,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Core.IContentVersionRepository,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase},EPiServer.Commerce.Routing.SeoUriContentReferenceResolver)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter" />
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="supportSeoUri">Enables seo uri for the route.</param>
            <param name="contentLoader">The content loader service.</param>
            <param name="routingSegmentLoader">The routing segment loader service.</param>
            <param name="contentVersionRepository">The content version repository.</param>
            <param name="urlSegmentRouter">The url segment router.</param>
            <param name="contentLanguageSettingsHandler">The content language settings handler</param>
            <param name="httpContextAccessor">The http context accessor</param>
            <param name="uriContentResolver">The uri to content link resolver.</param>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.CommerceRoot">
            <summary>
            The root of the route
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.RouteStartingPoint">
            <summary>
            The content link just before the <see cref="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.CommerceRoot"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.EnableOutgoingSeoUri">
            <summary>
            Enables seo uri for outgoing route
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.RoutePartial(EPiServer.Core.PageData,EPiServer.Web.Routing.Segments.SegmentContext)">
            <summary>
            Matches a route by traversing the route segments and matching them with the url segments of the commerce content.
            </summary>
            <remarks>
            Only <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> will be returned. If the route matches any other type of content, that will be ignored.
            </remarks>
            <example>http://mysite/catalog/catalognode/entry</example>
            <param name="content">The content that the page route has been able to route to.</param>
            <param name="segmentContext">The segment context containing the remaining part of url.</param>
            <returns>A <see cref="T:EPiServer.Core.ContentReference"/> to the mathced data or null if the remaining part did not match.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetCatalogContentRecursive(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Web.Routing.Segments.SegmentPair,EPiServer.Web.Routing.Segments.SegmentContext,System.Globalization.CultureInfo)">
            <summary>
            Finds the commerce content that matches the provided segment context by recursivly going through all segments.
            </summary>
            <param name="catalogContent">The currently active or matched content.</param>
            <param name="segmentPair">The currently active segment.</param>
            <param name="segmentContext">The complete segment culture.</param>
            <param name="cultureInfo">The requested culture.</param>
            <returns>The content that matches the provided segment context.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.FindNextContentInSegmentPair(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Web.Routing.Segments.SegmentPair,EPiServer.Web.Routing.Segments.SegmentContext,System.Globalization.CultureInfo)">
            <summary>
            Finds the commerce content that matches one specific segment.
            </summary>
            <param name="catalogContent">The content that matches the previous segment</param>
            <param name="segmentPair">The current segment</param>
            <param name="segmentContext">The complete segment context.</param>
            <param name="cultureInfo">The requested cultureInfo.</param>
            <returns>The content that matches the specified segment</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetCommonDraftContent(EPiServer.Core.ContentReference)">
            <summary>
            Returns the common draft catalog content if no work Id has been specified and if the draft content exists.
            </summary>
            <param name="contentLink">The content link to load common draft for.</param>
            <returns>Returns common draft catalog content if it exists, otherwise return null.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetPartialVirtualPath(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
            <summary>
            Gets a partial virtual path for a content item during routing.
            </summary>
            <param name="content">The content to generate a virtual path for.</param>
            <param name="language">The language to generate the url for.</param>
            <param name="routeValues">The route values.</param>
            <param name="requestContext">The request context.</param>
            <returns>
            A <see cref="T:EPiServer.Web.Routing.PartialRouteData"/> containing the partial virtual path for the content and a <see cref="T:EPiServer.Core.ContentReference"/> to the item to get base path from or null if the remaining part did not match.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.TryGetVirtualPath(System.Web.HttpContextBase,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.String@)">
            <summary>
            Tries to retrive the virtual path for the content.
            </summary>
            <param name="context">The http context.</param>
            <param name="content">The content.</param>
            <param name="language">The language.</param>
            <param name="virtualPath">The virtual path to be retrieved.</param>
            <returns>True if the virtual path could be retrieved, false otherwise.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.TryGetRouteSegment(EPiServer.Core.ContentReference,System.String,System.String@)">
            <summary>
            Tries to retrieve the route segment for the content.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <param name="segment">The segment to be retrieved.</param>
            <returns>True if the route segment could be retrieved, false otherwise.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetLanguage(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Gets the language.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="values">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.IsValidRoutedContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Checks if a content is a valid match for a partial route.
            </summary>
            <param name="content">The content to validate</param>
            <returns><c>true</c> if the content is a valid result for the partial route, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.ICommerceRouter">
            <summary>
            Partial router for commerce
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.ICommerceRouter.CommerceRoot">
            <summary>
            The root content for the partial route.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.ICommerceRouter.RouteStartingPoint">
            <summary>
            The starting point of the partial route. This content link is the node just before the <see cref="P:EPiServer.Commerce.Routing.ICommerceRouter.CommerceRoot"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Routing.RoutingSegmentValidator">
            <summary>
            Validates that the current routing segment is not in conflict with catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RoutingSegmentValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.IContentRepository,EPiServer.Web.Routing.PartialRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.RoutingSegmentValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="partialRouteHandler"></param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RoutingSegmentValidator.Validate(EPiServer.Core.IContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoAddressResolver">
            <summary>Used to resolve a Url interpreted as a SEO address.</summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoAddressResolver.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>Creates a new instance of the <see cref="T:EPiServer.Commerce.Routing.SeoAddressResolver"/> class.</summary>
            <param name="catalogSystem">The <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> used to load catalog content.</param>
            <param name="referenceConverter">
                The <see cref="T:Mediachase.Commerce.Catalog.ReferenceConverter"/> used to get the <see cref="T:EPiServer.Core.ContentReference"/> for catalog node or entry.
            </param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoAddressResolver.Resolve(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext)">
            <summary>
            Tries to resolve a <see cref="T:EPiServer.Core.IContent" /> instance from an URL interpreted as a SEO address.
            </summary>
            <param name="url">The url to resolve</param>
            <param name="simpleAddressContext">The current context</param>
            <returns>A resolved result if url could be resolved as a SEO address for a catalog content instance otherwise null</returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoRedirectHandler">
            <summary>
            Handles redirects from hierarchial catalog content URL:s to SEO URI:s
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoRedirectHandler.#ctor(EPiServer.Web.Routing.UrlResolver,EPiServer.Commerce.Routing.SeoUriRouter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.SeoRedirectHandler" /> class.
            </summary>
            <param name="urlResolver">The URL resolver.</param>
            <param name="seoUriRouter">The seo URI router.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoRedirectHandler.RedirectToSeoUri(EPiServer.Web.Routing.RoutingEventArgs)">
            <summary>
            Redirects to seo URI.
            </summary>
            <param name="e">The <see cref="T:EPiServer.Web.Routing.RoutingEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoUriContentReferenceResolver">
            <summary>
            Resolves <see cref="T:EPiServer.Core.ContentReference"/> from SEO Uri.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriContentReferenceResolver.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Routing.SeoUriContentReferenceResolver"/>
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriContentReferenceResolver.ResolveContentLink(System.String,System.String)">
            <summary>
            Resolves <see cref="T:EPiServer.Core.ContentReference"/> from a SEO Uri.
            </summary>
            <param name="seoUri"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoUriRouter">
            <summary>
            Routes a SEO url
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.SeoUriRouter.CatalogSystem">
            <summary>
            The catalog system
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetRouteValues(System.String,EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
            <summary>
            Tries to handle a segment value as a simple address.
            </summary>
            <param name="urlSegment">The simple address</param>
            <param name="routeRoot">The route root</param>
            <param name="segmentContext">The segment context</param>
            <returns><c><see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues"/></c> if <paramref name="urlSegment"/> was handled, otherwise <c>null</c></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.SupportedPartialRouters(EPiServer.Core.ContentReference)">
            <summary>
            Gets supported commerce routers for content
            </summary>
            <param name="catalogContentLink">The content link to get the supported partial routers for.</param>
            <returns>Collection of supported commerce partial routers</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetLanguage(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.String)">
            <summary>
            Gets the language from the catalog entry dto
            </summary>
            <param name="entry">The catalog entry dto</param>
            <param name="seoUri">The seo uri</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetLanguage(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.String)">
            <summary>
            Gets the language from the catalog node dto
            </summary>
            <param name="node">The catalog node dto</param>
            <param name="seoUri">The seo uri</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetCatalogContentLink(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Gets the content link from a catalog entry dto
            </summary>
            <param name="entry">The catalog entry dto</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetCatalogContentLink(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto)">
            <summary>
            Gets the content link from a catalog node dto
            </summary>
            <param name="node">The catalog node dto</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetRouteStartingPoint(EPiServer.Core.ContentReference)">
            <summary>
            Gets the starting point for the route.
            </summary>
            <param name="catalogContentLink">The content link</param>
            <returns>The content link of the starting point, if fund. Otherwise null.</returns>
        </member>
        <member name="T:EPiServer.Commerce.ScheduledJobs.Internal.UriSegmentConflictsJobOptions">
            <summary>
            Contains options for the <see cref="T:EPiServer.Commerce.ScheduledJobs.FindUriSegmentConflictsJob"/> scheduled job.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.ScheduledJobs.Internal.UriSegmentConflictsJobOptions.EmailRecipients">
            <summary>
            Recipents that will get an email if any URI conflicts are found, defined by the
            episerver:commerce.UriSegmentConflictsEmailRecipients AppSetting.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CommerceAdmins">
            <summary>
                The name of the role that is allowed to administer commerce content and settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CommerceSettingsAdmins">
            <summary>
                The name of the role that is allowed to administer commerce settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CatalogManagers">
            <summary>
                The name of the role that is allowed to manage catalogs.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.MarketingManagers">
            <summary>
                The name of the role that is allowed to manage marketing.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CustomerServiceRepresentatives">
            <summary>
                The name of the role that is allowed to access customer service interfaces.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.EPiBetaUsers">
            <summary>
                The name of the role that is allowed to use beta features.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.ReportManagers">
            <summary>
                The name of the role that is allowed to manage reports.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.CustomerPricingDto">
            <summary>
            Class used for serializing and deserializing a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/>
            object. Defines new properties shadowing the old read-only properties. Using
            the original class as base class to get some kind of connection which will
            get some early errors if the base class is changed. However, the base
            class uses a DataContract attribute which prevents the properties from being
            serialized since they dont have a DataMember attributes which is why they
            are added here instead.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.HashTableJsonConverter">
            <summary>
                Converts a <see cref="T:System.Collections.Hashtable"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.HashTableJsonConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.HashTableJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Deserializes a <see cref="T:System.Collections.Hashtable"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The hashtable.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.HashTableJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Serializes a <see cref="T:System.Collections.Hashtable"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter">
            <summary>
                Converts a <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.MarketIdConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.MarketId"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.MarketId"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.MarketId"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.TypeResolverDeserializationBinder">
            <summary>
            Uses <see cref="T:EPiServer.Data.Dynamic.TypeResolver"/> to resolve type at deserialization.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.TypeResolverDeserializationBinder.BindToType(System.String,System.String)">
             <summary>
             Uses <see cref="T:EPiServer.Data.Dynamic.TypeResolver"/> to bind type name to type.
             </summary>
            <param name="assemblyName">Is not used in this implementation.</param>
             <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
             <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Services.IEntrySearchService">
            <summary>
             NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility 
             requirements as denoted by its associated normal version.
            
            Entries search service.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Services.IEntrySearchService.Search(System.String,Mediachase.Commerce.MarketId,Mediachase.Commerce.Currency)">
            <summary>
            Searches for entries based on keyword and market.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="marketId">The market id.</param>
            <param name="currency">The currency.</param>
            <returns>A list of id for matching entries.</returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.PermanentLinkMapper">
            <summary>
            Gets or sets the permanent link mapper.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.AssetLink">
            <summary>
            Gets or sets the string representation of the asset link.
            </summary>
            <value>
            The asset link.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.AssetType">
            <summary>
            Gets or sets the string representation of the asset type.
            </summary>
            <value>
            The asset type.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.GroupName">
            <summary>
            Gets or sets the asset group that this asset belongs to.
            </summary>
            <value>
            The asset group.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.SortOrder">
            <summary>
            Gets or sets the asset sortorder
            </summary>
            <value>
            The asset sortorder
            </value>        
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.CustomerGroup">
            <summary>
            Represents the customer group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.CustomerGroup.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.CustomerGroup" /> class.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Id">
            <summary>
            Gets or sets the customer group id.
            </summary>
            <value>The customer group id.</value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Name">
            <summary>
            Gets or sets the customer group name.
            </summary>
            <value>The customer group name.</value>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.#ctor(Mediachase.Commerce.InventoryService.InventoryRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory"/> class.
            </summary>
            <param name="inventoryRecord">The inventory record.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.WarehouseCode">
            <summary>
            Represents the unique warehouse code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.CatalogEntryCode">
            <summary>
            Represents the catalog entry code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.BackorderAvailabilityDate">
            <summary>
            Represents the availability date for the inventory's backorders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.BackorderQuantity">
            <summary>
            Represents the inventory's backorder quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.InStockQuantity">
            <summary>
            Represents the inventory's in-stock quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.PurchaseAvailabilityDate">
            <summary>
            Represents the availability date for the inventory's in stock quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.IsTracked">
            <summary>
            Represents the inventory's status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.PreorderAvailabilityDate">
            <summary>
            Represents the availability date for the inventory's pre-orders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.PreorderQuantity">
            <summary>
            Represents the inventory's pre-order quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.ReorderMinQuantity">
            <summary>
            Represents the inventory's minimum re-order quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.AdditionalQuantity">
            <summary>
            Gets or sets the additional quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.ContentLink">
            <summary>
            Gets or sets Entry Content Link used on price overview variation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.ToInventoryRecord(System.String)">
            <summary>
            To the inventory record.
            </summary>
            <param name="catalogEntryCode">The catalog entry code.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.InventoryStatus">
            <summary>
            A list of possible statuses for inventory
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1">
            <summary>
            Base class for collections used as values in properties.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1" /> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IsModified">
            <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The index of <paramref name="item"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The zero-based index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the item is found otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements 
            copied from collection. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Count">
            <summary>
            Gets the item count.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>true if success; otherwise false</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.CreateWritableClone">
            <summary>
            Creates a writable clone of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance and that is writeable.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable clone of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance and that is writeable.</returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.MakeReadOnly">
            <summary>
            Makes the instance read only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.ToString">
            <summary>
            Gets a string representation of the items by joining them together, using a comma as a separator.
            </summary>
            <returns>A comma separated string of the items in the collection.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.ThrowIfReadOnly">
            <summary>
            Throws an exception if the instance is read only.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.Price">
            <summary>
            Represents a price definition in a catalog entry.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor(Mediachase.Commerce.Pricing.IPriceValue)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price" /> class.
            </summary>
            <param name="priceValue">The price value to convert from.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor(Mediachase.Commerce.Pricing.IPriceValue,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price" /> class.
            </summary>
            <param name="entry">tThe entry content base.</param>
            <param name="priceValue">The price value.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.CustomerPricing">
            <summary>
            Gets or sets the customer pricing.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.MarketId">
            <summary>
            Gets or sets the market id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.MinQuantity">
            <summary>
            Gets or sets the minimum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.UnitPrice">
            <summary>
            Gets or sets the unit price.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.ValidFrom">
            <summary>
            Gets or sets the valid from date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.ValidUntil">
            <summary>
            Gets or sets the valid until date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.EntryContent">
            <summary>
            Gets or sets the entry content base
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.ToPriceValue">
            <summary>
            Converts to a <see cref="T:Mediachase.Commerce.Pricing.IPriceValue"/> instance.
            </summary>
            <returns>The converted object.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.ToPriceValue(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            To the price value.
            </summary>
            <param name="catalogKey">The catalog key.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PriceDetail.PriceValueId">
            <summary>
            Gets or sets the price id.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.#ctor(Mediachase.Commerce.Pricing.IPriceDetailValue,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PriceDetail"/> class.
            </summary>
            <param name="priceDetailValue">The price detail value.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.ToPriceDetailValue">
            <summary>
            Converts to a <see cref="T:Mediachase.Commerce.Pricing.IPriceValue"/> instance.
            </summary>
            <returns>The converted object.</returns>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1">
            <summary>
            Abstract base class for creating properties with a value that is a collection of items.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.#ctor(EPiServer.Commerce.SpecializedProperties.ItemCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1" /> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.Items">
            <summary>
            Gets or sets the collection of items in the property.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SerializerFactory">
            <summary>
            Gets or sets the serializer factory.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.CreateInstance">
            <summary>
            Creates a new instance of the property. Defaults to create from the current type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ToLongString">
            <summary>
            Serializes the item collection to a string.
            Override this method and <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.FromLongString(System.String)"/> to user custom serialization.
            </summary>
            <returns>A string representation of the item collection.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.FromLongString(System.String)">
            <summary>
            Deserializes an item collection from its string representation into this instance.
            Override this method and <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ToLongString"/> to user custom serialization.
            </summary>
            <param name="stringValue">The string value of the given item collection.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.IsModified">
            <summary>
            Check if property has been modified.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.IsNull">
            <summary>
            Check for null property (no value has been set or the collection is empty).
            </summary>
            <value><c>true</c> if this property is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.PropertyValueType">
            <summary>
            Returns the type of the collection by getting the type.
            </summary>
            <remarks>Override this method and return the actual type to be sure.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The item collection as an <see cref="T:System.Object"/> instance.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.CreateWritableClone">
            <summary>
            Creates a writable clone of the property.
            </summary>
            <returns>A writable copy of the property.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.LoadData(System.Object)">
            <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
            <param name="value">The internal value.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ParseToObject(System.String)">
            <summary>
            Parses the string representation of the colleciton into a new instance
            of this class.
            </summary>
            <param name="str">The string representation of the collection.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ParseToSelf(System.String)">
            <summary>
            Parses the string representation of the colleciton into the current instance.
            </summary>
            <param name="str">The string representation of the collection.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            Get the data representation suitable for storing to the database. "Serialize".
            </summary>
            <param name="properties">The properties for the current page.</param>
            <returns>A string representation of the item collection. </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.MakeReadOnly">
            <summary>
            Makes the instance read only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollection">
            <summary>
            Property for storing inventory information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl">
            <summary>
            Control for rendering the commerce media collection property
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl.#ctor">
            <summary>
            Constructs the control for rendering <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/> property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl.#ctor(EPiServer.Commerce.Catalog.AssetUrlResolver,EPiServer.Commerce.Catalog.AssetUrlConventions)">
            <summary>
            Constructs the control for rendering <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/> property.
            </summary>
            <param name="assetUrlResolver">The asset Url resolver, which is used to get the asset Url.</param>
            <param name="assetUrlConvention">The asset Url conventions, which is used to get the default asset group.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl.CreateDefaultControls">
            <summary>
            Creates the default controls for the property, which renders the image. Used when the property is in view mode or in "on page edit" mode       
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal">
            <summary>
            Property type for storing decimal values
            </summary>
            <remarks>Will store the value in the string column in the database</remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> class.
            </summary>
            <param name="value">The decimal value.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Decimal">
            <summary>
            Get or sets the value of the property typed as a <see cref="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Decimal"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
            <remarks>Value returns null if the property has no value defined.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Type">
            <summary>
            Get the data type for this property.
            </summary>
            <value>Returns <see cref="F:EPiServer.Core.PropertyDataType.String"/>.</value>
            <remarks>
            The recommended practice is to use typeof() constructs instead of relying on this property.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Parse(System.String)">
            <summary>
            Create a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> from a string.
            </summary>
            <param name="value">The string to create a <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> from.</param>
            <returns>A new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</returns>
            <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> is returned. If the string cannot be
            parsed as a decimal an <see cref="T:EPiServer.Core.InvalidPropertyValueException"/> is thrown.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ParseToObject(System.String)">
            <summary>
            A wrapper for <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Parse(System.String)"/> to return a generic PropertyData object.
            </summary>
            <param name="value">The value for the new <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</param>
            <returns>A new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</returns>
            <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> is returned. If the string cannot be
            parsed as a decimal an <see cref="T:EPiServer.Core.InvalidPropertyValueException"/> is thrown.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ParseToSelf(System.String)">
            <summary>
            Replace the internal decimal with the parsed value.
            </summary>
            <param name="value">The string to parse into this object.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            Prepares the data in a format for persisting ("serialize").
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ToString">
            <summary>
            Get the property's display string.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.CreatePropertyControl">
            <summary>
            Creates the property control. Will use a simple string editing control for the legacy edit mode.
            </summary>
            <returns>A <see cref="T:EPiServer.Web.PropertyControls.PropertyStringControl"/></returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.PropertyValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the property value.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDictionaryMultiple">
            <summary>
            A property type that is used as backing type when you want a meta field that is a multiple selection dictionary.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDictionarySingle">
            <summary>
                A property type that is used as backing type when you want a meta field that is a single selection dictionary.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress">
            <summary>
            Property type for storing email addesses
            </summary>
            <remarks>
            Will store the value in the string column in the database
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.String">
            <summary>
            Gets or sets the string.
            </summary>
            <value>
            The string.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.ValidateEmailAddress(System.String)">
            <summary>
            Validates the email address.
            </summary>
            <param name="email">The email.</param>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyGuidList">
            <summary>
            A property type that is used as backing type when you want a list of <see cref="T:System.Guid"/>s.
            To use this on a content type, add a property of the type <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyGuidList.ParseToObject(System.String)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value, ie reversed ToString().
            </summary>
            <param name="value">The string value to parse.</param>
            <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value.
            </returns>
            <remarks>The value should be comma separated list using the the format for each value as specified on <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyGuidList.ParseItem(System.String)"/> method.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyGuidList.ParseItem(System.String)">
            <summary>
            Parses the string to a <see cref="T:System.Guid"/> object.
            </summary>
            <param name="value">The value.</param>
            <returns>A guid.</returns>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyInventoryCollection">
            <summary>
            Property for storing inventory information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyInventoryCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyInventoryStatus">
            <summary>
            Property that handles inventory status
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyInventoryStatus.PropertyValueType">
            <summary>
                Gets the System.Type of the property value, in this case <see cref="T:EPiServer.Commerce.SpecializedProperties.InventoryStatus"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyMarketCollection">
            <summary>
                A property that can handle a list of markets represented by their ID strings
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyMarketCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList">
            <summary>
                A property type that is used as backing type when you want a list of <see cref="T:Mediachase.Commerce.Money"/> objects.
            </summary>
            <remarks>
                <para>
                    This property type should only be used on content types inheriting from <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>.
                    When a promotion using this property type is created and edited using the EPiServer UI the values for this property
                    will be pre-populated with <see cref="T:Mediachase.Commerce.Money"/> objects matching the parent <see cref="T:EPiServer.Commerce.Marketing.SalesCampaign"/> TargetMarket currencies.
                </para>
                <para>
                    Content type models that define an <see cref="T:System.Collections.Generic.IList`1"/> property will get this property type.
                </para>
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.#ctor(System.Collections.Generic.IEnumerable{Mediachase.Commerce.Money})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList"/> class with the provided list.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.ParseToObject(System.String)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value, ie reversed ToString().
            </summary>
            <param name="value">The string value to parse.</param>
            <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value.
            </returns>
            <remarks>The value should be comma separated list using the the format for each value as specified on <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.ParseItem(System.String)"/> method.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.ParseItem(System.String)">
            <summary>
            Parses the string to a <see cref="T:Mediachase.Commerce.Money"/> object.
            </summary>
            <param name="value">The value.</param>
            <returns>A money object.</returns>
            <remarks>
            The string is expected to be of the format "USD;99.99". First the currency ISO code followed by a semicolon and then the amount formatted using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyMoneyList.Parse(System.String)">
            <summary>
            Parses the specified string value.
            </summary>
            <param name="value">The value.</param>
            <returns>A money object.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.ArgumentException">If the string value cannot be parsed because of format, invalid decimal, or amount less than zero.</exception>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyPriceCollection">
            <summary>
            Property for storing price information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyPriceCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyPriceType">
            <summary>
                Property for storing price type information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyPriceType.PropertyValueType">
            <summary>
                Gets the System.Type of the property value, in this case <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing.PriceType"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary">
            <summary>
                A property type that is used as backing type when you want a meta field that is a string dictionary.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Core.PropertyString"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Core.PropertyString"/>
            </summary>
            <param name="dictionary">The dictionary data.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.SetDefaultValue">
            <inhertit />
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.ParseToSelf(System.String)">
            <inhertit />
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.IsNull">
            <summary>
            This property is supposed to never be null.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.Value">
            <inhertit />
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.Type">
            <inhertit />
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyStringDictionary.PropertyValueType">
            <inhertit />
        </member>
        <member name="T:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler">
            <summary>
            Handler making MarketId instances beeing stored as string in DDS.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
            <summary>
            Returns an <see cref="T:Mediachase.Commerce.MarketId"/> instance from the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>A <see cref="T:Mediachase.Commerce.IMarket"/> instance</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.MapToDatabaseType(System.Type)">
            <summary>
            Returns the database type as string.
            </summary>
            <param name="type">The type.</param>
            <returns>The type that is stored in database</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
            <summary>
            Returns the <see cref="T:Mediachase.Commerce.MarketId"/> value in the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>The market id value</returns>
        </member>
        <member name="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler">
            <summary>
            Handler making IMarket implementations beeing stored as string in DDS.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.#ctor(Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler"/> class.
            </summary>
            <param name="marketService">The market service</param>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
            <summary>
            Returns an <see cref="T:Mediachase.Commerce.IMarket"/> instance from the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>A <see cref="T:Mediachase.Commerce.IMarket"/> instance</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.MapToDatabaseType(System.Type)">
            <summary>
            Returns the database type as string.
            </summary>
            <param name="type">The type.</param>
            <returns>The type that is stored in database</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
            <summary>
            Returns the <see cref="T:Mediachase.Commerce.MarketId"/> value in the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>The market id value</returns>
        </member>
        <member name="T:EPiServer.Commerce.UIHint">
            <summary>
            Contains UI hints available for public use.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Validation.BuyFromCategoryGetItemDiscountValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyFromCategoryGetItemDiscountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyFromCategoryGetItemDiscountValidator.AddErrorsIfNeeded(EPiServer.Commerce.Marketing.Promotions.BuyFromCategoryGetItemDiscount,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Validation.BuyQuantityGetFreeItemsValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityGetFreeItemsValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityGetFreeItemsValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityGetFreeItemsValidator.AddErrorsIfNeeded(EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetFreeItems,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Validation.BuyQuantityGetItemDiscountValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityGetItemDiscount"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityGetItemDiscountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityGetItemDiscountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="T:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator">
            <summary>
            Validates rewards for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator.#ctor(EPiServer.IContentLoader,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator"/> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="localizationService">The localization service.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.BuyQuantityPayFixedAmountValidator.AddErrorsIfNeeded(EPiServer.Commerce.Marketing.Promotions.BuyQuantityPayFixedAmount,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Validation.CampaignDateValidator">
            <summary>
            Validates that valid from date on a campaign is not greater than valid until date.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CampaignDateValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.CampaignDateValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CampaignDateValidator.Validate(EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Validates the specified campaign.
            </summary>
            <param name="campaign">The campaign that will be validated.</param>
            <returns>A validation warning if the valid from date is greater than the valid until date. Validation errors if either from or until dates are empty.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator">
            <summary>
            Validates the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/> against <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Validates the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> against <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/> on the <paramref name="instance"/>.
            </summary>
            <param name="instance">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> containing the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> and the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/>.</param>
            <returns>Error message if <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> don't contain <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/>, otherwise an empty enumerable.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.CatalogSeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of CatalogContent.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CatalogSeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.EntryCodeValidator">
            <summary>
            Represents the validator for Code property of EntryContentBase.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntryCodeValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.EntryCodeValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntryCodeValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.EntrySeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of EntryContentBase.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntrySeoUrlValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.EntrySeoUrlValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntrySeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.GetItemDiscountValidator`1">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.DiscountItems"/> target collection of a <see cref="T:EPiServer.Commerce.Marketing.EntryPromotion"/> promotion.
            </summary>
            <typeparam name="TEntryPromotion">The type of the entry promotion.</typeparam>
            <seealso cref="T:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1" />
        </member>
        <member name="M:EPiServer.Commerce.Validation.GetItemDiscountValidator`1.#ctor(EPiServer.Framework.Localization.LocalizationService,System.Func{`0,EPiServer.Commerce.Marketing.Promotions.DiscountItems})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityGetItemDiscountValidator" /> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="targetGetter">
            Delegate which picks the discount targets from a <typeparamref name="TEntryPromotion"/> instance.
            </param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.GetItemDiscountValidator`1.AddErrorsIfNeeded(`0,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator">
            <summary>
                This validator is used to informing the user that there is no route where the starting point is translated to the current language.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator.#ctor(EPiServer.IContentLoader,EPiServer.Web.Routing.PartialRouteHandler,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
                Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator" /> class.
            </summary>
            <param name="contentLoader">The content loader service.</param>
            <param name="partialRouteHandler">The partial route handler.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
                Validates the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>A list of validation errors.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.MonetaryRewardValidator">
            <summary>
            Validates the <see cref="T:EPiServer.Commerce.Marketing.MonetaryReward"/> condition.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MonetaryRewardValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.SpendAmountGetMonetaryDiscountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MonetaryRewardValidator.Validate(EPiServer.Commerce.Marketing.MonetaryReward)">
            <summary>
            Validates the specified monetary reward.
            </summary>
            <param name="monetaryReward">The monetary reward that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.NodeCodeValidator">
            <summary>
            Represents the validator for Code property of NodeContent.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeCodeValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.NodeCodeValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeCodeValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.NodeSeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of NodeContent.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeSeoUrlValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.NodeSeoUrlValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogNodeId from NodeContent.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeSeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.ParameterValidator">
            <summary>
            Contains strongly typed validation methods
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ParameterValidator.ThrowIfNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> based on <see paramref="expression"/> if <see paramref="value"/> is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type in the expression</typeparam>
            <param name="expression">An expression containing the property to validate</param>
            <param name="value">the property again</param>
            <example>
            If your property has a parameter named "foo" you can use this:
            <code>ParameterValidator.ThrowIfNull(() => foo, foo);</code>
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ParameterValidator.ThrowIfNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> based on <see paramref="expression"/> if <see paramref="value"/> is <see langword="null"/> or empty.
            </summary>
            <param name="expression">An expression containing the property to validate</param>
            <param name="value">the property again</param>
            <example>
            If your property has a string parameter named "foo" you can use this:
            <code>ParameterValidator.ThrowIfNullOrEmpty(() => foo, foo);</code>
            </example>
        </member>
        <member name="T:EPiServer.Commerce.Validation.PromotionDataValidator">
            <summary>
            <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> validator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Marketing.PromotionInformationRepository)">
            <summary>
            Initializes and a new instance of the <see cref="T:EPiServer.Commerce.Validation.PromotionDataValidator"/> class.
            </summary>
            <param name="localizationService">Service used for trans</param>
            <param name="redemptionRepository">The repository for loading promotion redemption information from the database.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidator.Validate(EPiServer.Commerce.Marketing.PromotionData)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidator.ValidatePerOrderFormRedemptionLimitForOrderPromotions(EPiServer.Commerce.Marketing.PromotionData,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <summary>
            Validates the per order form redemption. Adds an error if the promotion is an order promotion
            and the per order form redemtion limit is anything but one.
            </summary>
            <param name="promotionData">The promotion data to validate.</param>
            <param name="errors">A list of any previously discovered validation errors.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidator.ValidatePerPromotionQuantity(EPiServer.Commerce.Marketing.RedemptionLimitsData,System.Int32,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <summary>
            Validates that the redemption per promotion is not less than redemption per customer or per orderform.
            It also adds a warning if the limit is less or equal to the number of promotions already redeemed by customers.
            </summary>
            <param name="redemptionLimits">The redemption limits to be validated.</param>
            <param name="redeemedPromotions">The total number of times a promotion has been redeemed so far.</param>
            <param name="errors">A list of any previously discovered validation errors.</param>
        </member>
        <member name="T:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1">
            <summary>
            Validates rewards for the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the PromotionDataValidatorBase class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="P:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1.LocalizationService">
            <summary>
            Gets localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1.Validate(`0)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionDataValidatorBase`1.AddErrorsIfNeeded(`0,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <param name="validationErrors">The validation errors that will be returned.</param>
        </member>
        <member name="T:EPiServer.Commerce.Validation.PromotionWithMonetaryRewardValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.IMonetaryDiscount"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionWithMonetaryRewardValidator.#ctor(EPiServer.IContentLoader,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.PromotionWithMonetaryRewardValidator"/> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="localizationService">The localization service.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PromotionWithMonetaryRewardValidator.Validate(EPiServer.Commerce.Marketing.Promotions.IMonetaryDiscount)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.PurchaseAmountValidator">
            <summary>
            Validates the <see cref="T:EPiServer.Commerce.Marketing.Promotions.IPurchaseAmount"/> condition.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PurchaseAmountValidator.#ctor(EPiServer.IContentLoader,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.PurchaseAmountValidator"/> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="localizationService">The localization service.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PurchaseAmountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.PurchaseAmountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PurchaseAmountValidator.Validate(EPiServer.Commerce.Marketing.Promotions.IPurchaseAmount)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.PurchaseQuantityValidator">
            <summary>
            Validates the <see cref="T:EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity"/> condition.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PurchaseQuantityValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.PurchaseQuantityValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.PurchaseQuantityValidator.Validate(EPiServer.Commerce.Marketing.Promotions.PurchaseQuantity)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.SeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SeoUrlValidator.#ctor(EPiServer.Web.Internal.SimpleAddressOptions,EPiServer.Web.SiteDefinition,EPiServer.Web.IWebHostingEnvironment,EPiServer.Web.IVirtualPathResolver,EPiServer.Web.IAggregatedSimpleAddressResolver,EPiServer.Framework.Localization.LocalizationService,EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.SeoUrlValidator"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Validates the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instance.
            </summary>
            <param name="instance">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instance.</param>
            <returns>A list of <see cref="T:EPiServer.Validation.ValidationError"/>.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.ShippingPromotionValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.ShippingPromotion"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ShippingPromotionValidator.#ctor(EPiServer.IContentLoader,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.ShippingPromotionValidator"/> class.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ShippingPromotionValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.ShippingPromotionValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ShippingPromotionValidator.AddErrorsIfNeeded(EPiServer.Commerce.Marketing.ShippingPromotion,System.Collections.Generic.List{EPiServer.Validation.ValidationError})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Validation.ShippingPromotionValidator.GetShippingMethodsByMarkets(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all available shipping methods from given markets.
            </summary>
            <param name="marketIds">Target markets</param>
            <returns>Available shipping methods belong to markets.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.SpendAmountGetGiftItemsValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SpendAmountGetGiftItemsValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.SpendAmountGetGiftItemsValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SpendAmountGetGiftItemsValidator.Validate(EPiServer.Commerce.Marketing.Promotions.SpendAmountGetGiftItems)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty collection property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.SpendAmountGetItemDiscountValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Validation.SpendAmountGetItemDiscountValidator"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SpendAmountGetItemDiscountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.BuyQuantityGetItemDiscountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="T:EPiServer.Commerce.Validation.SpendAmountGetMonetaryDiscountValidator">
            <summary>
            Validates conditions for the <see cref="T:EPiServer.Commerce.Marketing.Promotions.ISpendAmountGetMonetaryDiscount"/> promotion.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SpendAmountGetMonetaryDiscountValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.SpendAmountGetMonetaryDiscountValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.SpendAmountGetMonetaryDiscountValidator.Validate(EPiServer.Commerce.Marketing.Promotions.ISpendAmountGetMonetaryDiscount)">
            <summary>
            Validates the specified promotion.
            </summary>
            <param name="promotion">The promotion that will be validated.</param>
            <returns>Validation errors for any empty required property.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.TargetMarketsValidator">
            <summary>
            Validates that target markets of a <see cref="T:EPiServer.Commerce.Marketing.SalesCampaign"/> is not empty.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.TargetMarketsValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.CampaignDateValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.TargetMarketsValidator.Validate(EPiServer.Commerce.Marketing.SalesCampaign)">
            <summary>
            Validates the specified campaign.
            </summary>
            <param name="campaign">The campaign that will be validated.</param>
            <returns>A validation warning if campaign target markets is empty.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.VariationContentValidator">
            <summary>
            Validates the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.VariationContent"/> condition.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.VariationContentValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.VariationContentValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.VariationContentValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.VariationContent)">
            <summary>
            Validates the specified variation content.
            </summary>
            <param name="content">The content that will be validated.</param>
            <returns>Validation errors</returns>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion">
            <summary>
            Matches the active market.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.#ctor(Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion" /> class.
            </summary>
            <param name="currentMarketService">The current market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines wheter the current market matches the market set in the criterion.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
              <c>true</c> if the the markets match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketModel">
            <summary>
            Model used by <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketModel.MarketId">
            <summary>
            Gets or sets the market id.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory">
            <summary>
            <see cref="T:EPiServer.Personalization.VisitorGroups.ISelectionFactory"/> implementation which returns a list of
            available markets.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.#ctor(Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory" /> class.
            </summary>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets the select list items corresponding to the markets returned by the
            current <see cref="T:Mediachase.Commerce.Markets.IMarketService"/>.
            </summary>
            <param name="propertyType">Unused.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.CommerceManagerSettings">
            <summary>
            CommerceManagerSettings class
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceManagerSettings.CommerceManagerLink">
            <summary>
            Gets the commerce manager link.
            </summary>
            <value>The commerce manager link.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.CommerceManagerSettings.GetAppSettings(System.String)">
            <summary>
            Gets the app settings from web.config.
            </summary>
            <param name="key">The key to get setting from.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.Constants">
            <summary>
            Commerce constants
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.DefaultMaxProductsCount">
            <summary>
            Default Max Products displayed on best seller products list
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.CheckoutCommandName">
            <summary>
            Check out command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShoppingCartCommandName">
            <summary>
            Shopping cart command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.WishListCommandName">
            <summary>
            Wish list command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.EntryViewCommandName">
            <summary>
            Entry view command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.NodeViewCommandName">
            <summary>
            Node view command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RegisterCommandName">
            <summary>
            Register command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RecoverPasswordCommandName">
            <summary>
            Recover password command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.OrderHistoryCommandName">
            <summary>
            Order history command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AccountCommandName">
            <summary>
            Account command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AccountEditCommandName">
            <summary>
            Account Edit command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ChangePasswordCommandName">
            <summary>
            Change Password command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AddressBookCommandName">
            <summary>
            Change Password command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.CompareCommandName">
            <summary>
            Compare command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.SearchResultsCommandName">
            <summary>
            Search results command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShortenStringDotDotDot">
            <summary>
            Use to represent ... in shorten string
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShortenStringSize">
            <summary>
            Default shorten string size
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.MaxWeight">
            <summary>
            The maximum number of tag weight that should be displayed
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.MinWeight">
            <summary>
            The minimum number of tag weight that should be displayed
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RegisteredRole">
            <summary>
                Represent string of Registered role in role provider
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AllMarkets">
            <summary>
                Represent string of All Markets in promotion system
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.CookieHelper">
            <summary>
            Provides common ways to manage cookie.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.CookieHelper.KEY_64">
            <summary>
            8 bytes randomly selected for both the Key and the Initialization Vector
            the IV is used to encrypt the first block of text so that any repetitive 
            patterns are not apparent
            </summary>
            <value>The KEY_64.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.CookieHelper.IV_64">
            <summary>
            Gets the IV_64.
            </summary>
            <value>The IV_64.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Encrypt(System.String)">
            <summary>
            Standard DES encryption
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Decrypt(System.String)">
            <summary>
            Standard DES decryption
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Set(System.String,System.String)">
            <summary>
            Sets the specified value to cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the specified value to cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Get(System.String)">
            <summary>
            Gets value from cookie by key.
            </summary>
            <param name="key">The key.</param>
            <returns>Value that saved in the cookie</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Get(System.String,System.Boolean)">
            <summary>
            Gets value from cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="decrypt">if set to <c>true</c> [decrypt].</param>
            <returns>Value that saved in the cookie</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Remove(System.String)">
            <summary>
            Removes the specified key from cookie.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.BuildKey(System.String)">
            <summary>
            Build key base on the base key.
            </summary>
            <param name="key">The key.</param>
            <returns>The built key.</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.Exception.CommerceException">
            <summary>
                Exception that is thrown by Commerce when a non-fatal error occurs. 
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Constructor initialize Serialization info and Streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.Exception,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
            <param name="list"></param>
        </member>
        <member name="T:EPiServer.Business.Commerce.Exception.ConfigurationException">
            <summary>
                Represents errors that occur during reading configuration.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Constructor initialize Serialization info and Streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.Exception,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
            <param name="list"></param>
        </member>
        <member name="T:EPiServer.Business.Commerce.HttpModules.ProfileModule">
            <summary>
            ProfileModule class
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Application_AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the AuthenticateRequest event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Profile_MigrateAnonymous(System.Object,System.Web.Profile.ProfileMigrateEventArgs)">
            <summary>
            Handles the MigrateAnonymous event of the Profile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="pe">The <see cref="T:System.Web.Profile.ProfileMigrateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Profile_ProfileAutoSaving(System.Object,System.Web.Profile.ProfileAutoSaveEventArgs)">
            <summary>
            Handles the ProfileAutoSaving event of the Profile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.Profile.ProfileAutoSaveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that builds the search indexes incrementally.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.Execute">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.IndexApplication(System.String)">
            <summary>
            Indexes the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob._SearchManager_SearchIndexMessage(System.Object,Mediachase.Search.SearchIndexEventArgs)">
            <summary>
            Handles the SearchIndexMessage event of the _SearchManager control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:Mediachase.Search.SearchIndexEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that builds the search indexes incrementally.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.Execute">
            <summary>
            Execute the job
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.IndexApplication(System.String)">
            <summary>
            Indexes the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob._SearchManager_SearchIndexMessage(System.Object,Mediachase.Search.SearchIndexEventArgs)">
            <summary>
            Handles the SearchIndexMessage event of the _SearchManager control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:Mediachase.Search.SearchIndexEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.MaintainDatabaseIndicesJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that rebuilds or re-organizes all indices in both CMS and Commerce databases.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.MaintainDatabaseIndicesJob.LowFragmentationThreshold">
            <summary>
            If the avg_fragmentation_in_percent of an index is larger than this value,
            and smaller or equal to <see cref="P:EPiServer.Business.Commerce.ScheduledJobs.MaintainDatabaseIndicesJob.HighFragmentationThreshold"/> value, then the index will be re-orgarnized.
            The default value is 10.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.MaintainDatabaseIndicesJob.HighFragmentationThreshold">
            <summary>
            If the avg_fragmentation_in_percent of an index is larger than this value, 
            the index will be rebuit. The default value is 30.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job which releases due payment plans.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.ProcessPaymentPlans">
            <summary>
            Processes the payment plans.
            </summary>
            <returns>The result message.</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.EnsureDataContext">
            <summary>
            Ensures the data context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.ProcessPlan(Mediachase.Commerce.Orders.PaymentPlan)">
            <summary>
            Processes the plan.
            </summary>
            <param name="plan">The plan.</param>
            <returns>True if order created, otherwise False</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.RemoveExpiredCartsJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that removes carts older than 30 days (or configured value).
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemoveExpiredCartsJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>
            A string with result message of the scheduled job.
            </returns>
            <remarks>
            This job will remove expired carts from system.
            </remarks>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemoveExpiredCartsJob.RemoveExpiredSerializableCart(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the expired serializable carts.
            </summary>
            <param name="daysOld">The days old.</param>
            <param name="excludedCartNames">The cart names to exclude from removal.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemoveExpiredCartsJob.RemoveExpired(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the expired carts.
            </summary>
            <param name="daysOld">The days old.</param>
            <param name="excludedCartNames">The cart name to exclude from removal.</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that rotates the encryption keys in sql server.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.EncryptApplication">
            <summary>
            Encrypts the application.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob">
            <summary>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            Scheduled job that releases shipments.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.InventoryService">
            <summary>
            Gets the inventory service.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.OperationKeySerializer">
            <summary>
            Gets the operation key serializer service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.Execute">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.ReleaseShipments">
            <summary>
            Releases the shipments.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.Services.UserProfile">
            <summary>
            UserProfile object, which stores user information that would be displayed on UI
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Email">
            <summary>
            Gets or sets the Email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.BirthDate">
            <summary>
            Gets or sets the birthdate.
            </summary>
            <value>The birthdate.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Photo">
            <summary>
            Gets or sets the photo.
            </summary>
            <value>The photo.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.InterestsText">
            <summary>
            Gets or sets the interests text.
            </summary>
            <value>The interests text.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Interests">
            <summary>
            Gets or sets the predefine interests list.
            </summary>
            <value>The interests list.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Activities">
            <summary>
            String includes club ID and club Header, which was seperated by # character, for example: 27#Golf
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.UserId">
            <summary>
            Id of user having this profile
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.IsAdmin">
            <summary>
            Gets or sets a value indicating whether this user is admin.
            </summary>
            <value><c>true</c> if this user is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Genders">
            <summary>
            Gets or sets the gender list.
            </summary>
            <value>The gender list.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CategorySelectionFactory.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Core.IPublishedStateAssessor,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.CategorySelectionFactory"/>.
            </summary>
            <param name="contentLoader">The content loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="publishedStateAssessor">The published state accessor.</param>
            <param name="objectInstanceCache">The synchronized object instance cache.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CategorySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all categoreis.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all categoreis on the site</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CountrySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all Country Name.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all Country Name</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.CurrencySelectionFactory">
            <summary>
            Provides a list of Currency to the dropdown.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CurrencySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all currencies.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all currencies on the site</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerGroupSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all CustomerGroup.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all CustomerGroup</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion">
            <summary>
                Detect users that meets the selected property type and value
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsStateMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the state is match.
            </summary>
            <param name="user">The user.</param>
            <param name="state">The state.</param>
            <returns>
            	<c>true</c> if the state is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsAddressPostalCodeMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the address postal code is match.
            </summary>
            <param name="user">The user.</param>
            <param name="addressPostalCode">The address postal code.</param>
            <returns>
            	<c>true</c> if the address postal code is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsRegionMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the region is match.
            </summary>
            <param name="user">The user.</param>
            <param name="region">The region.</param>
            <returns>
            	<c>true</c> if the region is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsCountryMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the country is match.
            </summary>
            <param name="user">The user.</param>
            <param name="country">The country.</param>
            <returns>
            	<c>true</c> if the country is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsRegistrationSourceMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the registration source is match.
            </summary>
            <param name="user">The user.</param>
            <param name="registrationSource">The registration source.</param>
            <returns>
            	<c>true</c> if the registration source is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsBirthDateMatch(Mediachase.Commerce.Customers.CustomerContact,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Determines whether the birth date is match.
            </summary>
            <param name="user">The user.</param>
            <param name="fromDate">The birth date1.</param>
            <param name="toDate">The birth date2.</param>
            <returns>
            	<c>true</c> if the birth date is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsCustomerGroupMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether customer group is match.
            </summary>
            <param name="user">The user.</param>
            <param name="customerGroup">The customer group.</param>
            <returns>
            	<c>true</c> if customer group is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyNameSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all PropertyName.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all PropertyName</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyNameSelectionFactory.Translate(System.String)">
            <summary>
            Translates the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase">
            <summary>
            Base class for CriterionModel of Commerce, already implement ICloneable
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase.Copy">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyCriterion">
            <summary>
                Detect users that has placed an order in store <c>X</c> times in the last <c>Y</c> days
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
                Detect users that has placed an order in store <c>X</c> times in the last <c>Y</c> days
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel">
            <summary>
                Storage class for OrdersFrequency criterion
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel.OrderTimes">
            <summary>
            Gets or sets the order times.
            </summary>
            <value>The order times.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel.NumberOfDays">
            <summary>
            Gets or sets the number of days
            </summary>
            <remarks>When value of days is equal to zero, system will search all orders</remarks>
            <value>The number of days.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductPropertyAndValue(System.Guid,System.String,System.String)">
            <summary>
            Determines whether [is match product property and value] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="propertyName">The property.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is match product property and value] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.ComparePredefinedProperties(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String,System.String)">
            <summary>
            Compares the predefined properties.
            </summary>
            <param name="entryContent">The entry content.</param>
            <param name="propertyName">The propertyName.</param>
            <param name="propertyValue">The propertyValue.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductCategory(System.Guid,System.String)">
            <summary>
            Determines whether [is match product category] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if [is match product category] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductCode(System.Guid,System.String)">
            <summary>
            Determines whether [is match product code] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="productName">Name of the product.</param>
            <returns>
            	<c>true</c> if [is match product code] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.Match(System.Guid,System.Func{EPiServer.Commerce.Order.ILineItem,System.Boolean})">
            <summary>
            Determines whether [is match by search func] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="searchFunc">The search func.</param>
            <returns>
            	<c>true</c> if any carts from specified user matches conditions; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ComparisonType">
            <summary>
            Gets or sets the type of the comparison.
            </summary>
            <value>The type of the comparison.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ComparisonTypeFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all comparision type.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all comparision type</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersModel">
            <summary>
            Model to store information for RecentOrdersCriterion
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersModel.WithinDays">
            <summary>
            Gets or sets the days within which to find the buyer. Zero means all orders will be searched
            </summary>
            <value>The within days.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match. Return true if this user's orders
            have total greater or equal then the specified total money amount in the last specified number of days.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Total">
            <summary>
            Gets or sets the amount that users' order totals should be greater than equal to.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Currency">
            <summary>
            Gets or sets the currency in which the user order is paid.
            </summary>
            <value>The currency.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Days">
            <summary>
            Gets or sets the number of days to search within.
            </summary>
            <value>The days.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.StateSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all State.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all State</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager">
            <summary>
            This class retrieve orders for an user within a number of days, it also provide caching.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.#ctor">
            <summary>
            Initializes the <see cref="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentCriterion"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetPurchaseOrders(System.Int32,System.Security.Principal.IPrincipal)">
            <summary>
            Gets the purchase orders for this user from cache or from database.
            </summary>
            <param name="days">The number of days within which to retrieve user orders.</param>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetPurchaseOrders(System.Int32,System.Guid)">
            <summary>
            Gets the purchase orders for this user from cache or from database.
            </summary>
            <param name="days">The number of days within which to retrieve user orders.</param>
            <param name="userId">The user GUID.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.ActivityFlowStarted(System.Object,Mediachase.Commerce.Engine.ActivityFlowEventArgs)">
            <summary>
            Listen the activity flow started event to clear cache.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Mediachase.Commerce.Engine.ActivityFlowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetUserCacheKey(System.Guid)">
            <summary>
            Gets the user cache key.
            </summary>
            <param name="userGuid">The user GUID.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.WebControls.UserControlBase">
            <summary>
                Represents base class for all user control of Commerce
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.UserControlBase.SearchPage">
            <summary>
                Gets Search page
            </summary>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.IsAvailable(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow)">
            <summary>
            Determines whether the specified catalog node row is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogNodeRow">The catalog node row.</param>
            <returns>
            	<c>true</c> if the specified catalog node row is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.IsAvailable(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,System.String)">
            <summary>
            Determines whether the specified catalog node row is available (is published, startdate and enddate are correct) in the specific <paramref name="language"/>.
            </summary>
            <param name="catalogNodeRow">The catalog node row.</param>
            <param name="language">The language.</param>
            <returns>
            	<c>true</c> if the specified catalog node row is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.StartDate(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,System.String)">
            <summary>
            Get node start date in the specific <paramref name="language"/>.
            </summary>
            <param name="catalogNodeRow">The catalog node row.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.EndDate(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,System.String)">
            <summary>
            Get node end date in the specific <paramref name="language"/>.
            </summary>
            <param name="catalogNodeRow">The catalog node row.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.IsPublished(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,System.String)">
            <summary>
            Checks if the node is published in the specific <paramref name="language"/>.
            </summary>
            <param name="row">The node row.</param>
            <param name="language">The language to check if the node is published.</param>
            <returns><c>true</c> if the node is published in this language, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.IsPublished(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Checks if the entry is published based on the rows's active status and the published
            field in the meta object.
            </summary>
            <param name="row">The node row.</param>
            <param name="metaObject">The meta object.</param>
            <returns>
              <c>true</c> if the node is published, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogRowExtensions.IsAvailable(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow)">
            <summary>
            Determines whether the specified catalog row is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogRow">The catalog row.</param>
            <returns>
            	<c>true</c> if the specified catalog row is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Inventory.InventoryExtensions.CanPreorder(Mediachase.Commerce.InventoryService.InventoryRecord,System.DateTime)">
            <summary>
            Determines whether the specified inventory of a catalog entry is available for preorder.
            </summary>
            <param name="inventoryRecord">The warehouse inventory.</param>
            <param name="requestDate">The request date.</param>
            <returns>
            	<c>true</c> if the specified inventory of a catalog entry is available for preorder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Inventory.InventoryExtensions.CanBackorder(Mediachase.Commerce.InventoryService.InventoryRecord,System.DateTime)">
            <summary>
            Determines whether the specified inventory of an entry is available for backorder.
            </summary>
            <param name="inventoryRecord">The warehouse inventory.</param>
            <param name="requestDate">The request date.</param>
            <returns>
            	<c>true</c> if the specified inventory of a catalog entry is available for backorder; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
