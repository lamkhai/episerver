<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Social.Common</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Social.Common.CompositeCriteria`2">
            <summary>
            The CompositeCriteria class encapsulates the specifications by
            which platform entities, composed with extension data, should be 
            retrieved.
            </summary>
            <typeparam name="TFilter">Type of filter specifications comprising this criteria</typeparam>
            <typeparam name="TExtension">Type of data, applied as an extension of plaftorm entities, by which to filter</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.CompositeCriteria`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.CompositeCriteria`2.ExtensionFilter">
            <summary>
            Gets or sets an expression describing a filter targeting
            data applied as an extension to a platform entities.        
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.CompositeCriteria`2.IncludeSubclasses">
            <summary>
            Gets or sets a boolean indicating whether the extension data type filter for this 
            criteria should be interpreted as an exact match or may match data which extends it. 
            
            A value of true (default) indicates that the desired results will match where the type
            filter appears in the associated extension data's type hierarchy.
            
            A value of false indicates that the desired results will match where 
            the type filter explicitly matches the associated extension data's type.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.Criteria`1">
            <summary>
            The Criteria class encapsulates the specifications by which 
            platform entities should be retrieved.
            </summary>
            <typeparam name="TFilter">Type of filter specifications comprising this criteria</typeparam>    
        </member>
        <member name="M:EPiServer.Social.Common.Criteria`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Criteria`1.PageInfo">
            <summary>
            Gets or sets the index and size of the page of 
            results to be retrieved.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Criteria`1.OrderBy">
            <summary>
            Gets a collection of rules describing how the result
            set should be ordered. 
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Criteria`1.Filter">
            <summary>
            Gets or sets the filter specifications describing the results
            which should be retrieved.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.ExtensionSerializationException">
            <summary>
            The ExtensionSerializationException class represents an error 
            occurring when a service is incapable of serializing or
            deserializing the extension data associated with a Composite.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.ExtensionSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Exception that resulted in this exception being thrown</param>
        </member>
        <member name="T:EPiServer.Social.Common.InvalidPageInfoException">
            <summary>
            The InvalidPageInfoException  represents an error occurring when 
            invalid or unsupported values are specified for the PageInfo object 
            in the retrieval of data.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.InvalidPageInfoException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="T:EPiServer.Social.Common.InvalidSortInfoException">
            <summary>
            The UnknownSortFieldException represents an error occurring
            when a sort operation is attempted on an unsupported field.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.InvalidSortInfoException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:EPiServer.Social.Common.MaximumDataSizeExceededException">
            <summary>
            The MaximumDataSizeExceededException is an exception describing
            an error occuring when an object, submitted to the Episerver 
            Social platform, exceeds the maximum size allowed.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.MaximumDataSizeExceededException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:EPiServer.Social.Common.RateLimitExceededException">
            <summary>
            The RateLimitExceededException is an exception describing
            an error occuring when a client issues too many requests
            over a period of time.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.RateLimitExceededException.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="requestLimit">Maximum number of requests allowed per request interval</param>
            <param name="requestsIssued">Number of requests issued in the request interval</param>
            <param name="requestIntervalInSeconds">Length of the request interval in seconds</param>
            <param name="secondsUntilReset">Number of seconds until the request count will reset</param>
        </member>
        <member name="P:EPiServer.Social.Common.RateLimitExceededException.RequestLimit">
            <summary>
            Gets the maximum number of requests allowed to be issued in a 
            given request interval.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.RateLimitExceededException.RequestsIssued">
            <summary>
            Gets the number of requests that have been issued in the 
            request interval.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.RateLimitExceededException.RequestInterval">
            <summary>
            Gets the length of the request interval for which requests are tallied.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.RateLimitExceededException.RetryAfter">
            <summary>
            Gets the amount of time remaining until the request count
            will reset.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.SocialCommunicationException">
            <summary>
            The SocialCommunicationException class represents an error occurring
            when a one of the social clients encounters an communication problem while communicating
            with the Episerver Social Cloud service.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SocialCommunicationException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="ex">The inner exception</param>
        </member>
        <member name="T:EPiServer.Social.Common.SocialAuthenticationException">
            <summary>
            The SocialAuthenticationException class represents an error occurring
            when a one of the social clients encounters an authentication problem while communicating
            with the Episerver Social Cloud service.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.SocialAuthenticationException.RequestMethod">
            <summary>
            Gets or sets the type of http request issued to the Episerver Social Cloud service that 
            resulted in an authentication exception.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.SocialAuthenticationException.NormalizedRequestUri">
            <summary>
            Gets or sets the absolute uri of the request issued to the Episerver Social Cloud service 
            that resulted in an authentication exception.
            </summary>
            <remarks>Note that this is a normalized version of the absolute Uri of the request. The
            client-side Episerver Social authentication process normalizes the request Uri to a format 
            suitable for communicating with the Episerver Social Cloud service.</remarks>
        </member>
        <member name="P:EPiServer.Social.Common.SocialAuthenticationException.AuthorizationHeader">
            <summary>
            Gets or sets the authorization header attached to the request issued to the Episerver Social 
            Cloud service which resulted in an authentication exception.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SocialAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:EPiServer.Social.Common.SocialException">
            <summary>
            The SocialException class represents an error occurring
            when a one of the social clients encounters a problem while communicating
            with the Episerver Social Cloud service.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SocialException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SocialException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:EPiServer.Social.Common.SocialException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="ex">The inner exception</param>
        </member>
        <member name="P:EPiServer.Social.Common.SocialException.ErrorCode">
            <summary>
            Gets or sets the error code identifying the problem that has occurred, if
            one is applicable.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.SocialException.Reason">
            <summary>
            Gets or sets the description of the problem that has occurred, if
            one is applicable.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.SocialException.StatusCode">
            <summary>
            Gets or sets the HTTP status code corresponding to the error, if
            one is applicable.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.AndExpression">
            <summary>
            The AndExpression class represents the logical "AND"
            operation to combine a collection of other query 
            expressions.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpression.#ctor(EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Constructor
            </summary>
            <param name="expressions">Filter expressions to be combined</param>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpression.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Constructor
            </summary>
            <param name="expressions">Filter expressions to be combined</param>
        </member>
        <member name="P:EPiServer.Social.Common.AndExpression.Expressions">
            <summary>
            Gets the collection of filter expressions to be combined.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpression.Equals(System.Object)">
            <summary>
            Returns true if the specified object is equivalent
            to this AndExpression, false otherwise.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified object is equivalent to this AndExpression, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Social.Common.AndExpressionExtensions">
            <summary>
            The AndExpressionExtensions class adds supplementary factory methods
            to the AndExpression class.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpressionExtensions.Or(EPiServer.Social.Common.AndExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an OrExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="andExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>OrExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpressionExtensions.Or(EPiServer.Social.Common.AndExpression,System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Creates an OrExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="andExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>OrExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpressionExtensions.And(EPiServer.Social.Common.AndExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an AndExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="andExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>AndExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.AndExpressionExtensions.And(EPiServer.Social.Common.AndExpression,System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Creates an AndExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="andExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>AndExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="T:EPiServer.Social.Common.BinaryExpression">
            <summary>
            The BinaryExpression class represents an operation
            with two operands.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.BinaryExpression.#ctor(EPiServer.Social.Common.FilterExpression,EPiServer.Social.Common.FilterExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in the expression</param>
            <param name="right">Right operand in the expression</param>
        </member>
        <member name="P:EPiServer.Social.Common.BinaryExpression.Left">
            <summary>
            Gets the left operand in this expression.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.BinaryExpression.Right">
            <summary>
            Gets the right operand in this expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.BinaryExpression.Equals(System.Object)">
            <summary>
            Returns true if the specified object is equivalent
            to this BinaryExpression, false otherwise.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified object is equivalent to this BinaryExpression, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Social.Common.BooleanValueExpression">
            <summary>
            The BooleanValueExpression class represents a boolean value
            in a filter expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.BooleanValueExpression.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Boolean value represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.BooleanValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.AnyExpression">
            <summary>
            The AnyExpression class represents an operation evaluating whether a given field contains any value from the
            specified collection. When applied to a collection field, the expression evaluates whether the collection 
            contains any of the values from the specified collection. When used on a primitive field, the expression 
            evaluates whether the field is equal to any of the values from the specified collection.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.EnumerableValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="values">Values to identify within the field</param>
            <exception cref="T:System.ArgumentException">Thrown when the values list is empty.</exception>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="values">Values to identify within the field</param>
            <exception cref="T:System.ArgumentException">Thrown when the values list is empty.</exception>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="values">Values to identify within the field</param>
            <exception cref="T:System.ArgumentException">Thrown when the values list is empty.</exception>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="values">Values to identify within the field</param>
            <exception cref="T:System.ArgumentException">Thrown when the values list is empty.</exception>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="values">Values to identify within the field</param>
            <exception cref="T:System.ArgumentException">Thrown when the values list is empty.</exception>
        </member>
        <member name="M:EPiServer.Social.Common.AnyExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.ContainsExpression">
            <summary>
            The ContainsExpression class represents an operation evaluating whether a field contains some value. When applied to a collection field,
            the expression evaluates whether the collection contains a value. When used on a primitive field, the expression evaluates whether the field is equal to a value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to identify within the field</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">String value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Boolean value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.ContainsExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.DateTimeValueExpression">
            <summary>
            The DateTimeValueExpression class represents a DateTime value
            in a filter expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.DateTimeValueExpression.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="value">DateTime value represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.DateTimeValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.DoubleValueExpression">
            <summary>
            The DoubleValueExpression class represents a double value
            in a filter expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.DoubleValueExpression.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="value">Double value represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.DoubleValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.EnumerableValueExpression">
            <summary>
            The EnumerableValueExpression class represents a collection of value expressions.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.EnumerableValueExpression.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Social.Common.ValueExpression})">
            <summary>
            Constructor
            </summary>
            <param name="valueExpressions">The list of value expressions</param>
        </member>
        <member name="P:EPiServer.Social.Common.EnumerableValueExpression.ValueExpressions">
            <summary>
            Gets the list of value expressions.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.EnumerableValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.EqualToExpression">
            <summary>
            The EqualToExpression class represents an operation evaluating a
            field's contents for equality with some value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">String value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Boolean value to compare for equality</param>
        </member>
        <member name="M:EPiServer.Social.Common.EqualToExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.FieldExpression">
            <summary>
            The FieldExpression class represents a property or member
            of some data in a logical expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="identifier">Unique identifier for the field</param>
            <param name="valueType">Type of value stored by the field represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.#ctor(System.String,System.Type,EPiServer.Social.Common.FieldExpression)">
            <summary>
            Constructor
            </summary>
            <param name="identifier">Unique identifier for the field</param>
            <param name="valueType">Type of value stored by the field represented by this expression</param>
            <param name="parent">Expression representing the parent field to this field.</param>
        </member>
        <member name="P:EPiServer.Social.Common.FieldExpression.Identifier">
            <summary>
            Gets the unique identifier for this field.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.FieldExpression.ValueType">
            <summary>
            Gets the type of value stored by the field represented by this expression.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.FieldExpression.Parent">
            <summary>
            Gets the expression representing the parent field to this field.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.FieldExpression.HasParent">
            <summary>
            Returns true if the field represented by this expression has a
            parent field.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.Equals(System.Object)">
            <summary>
            Returns true if the specified object is equivalent to
            this FieldExpression, false otherwise.
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if the specified object is equivalent to this FieldExpression, false otherwise.</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.GetHashCode">
            <summary>
            Gets the hash code for this FieldExpression.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Equality(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Inequality(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            The inequality operator is not supported.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Equality(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Inequality(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            The inequality operator is not supported.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Equality(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Inequality(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            The inequality operator is not supported.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThan(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThan(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThanOrEqual(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThanOrEqual(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Equality(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Inequality(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            The inequality operator is not supported.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThan(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThan(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThanOrEqual(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThanOrEqual(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Equality(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_Inequality(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            The inequality operator is not supported.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThan(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThan(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_LessThanOrEqual(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpression.op_GreaterThanOrEqual(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Expression identifying field to be compared</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="T:EPiServer.Social.Common.FieldExpressionBuilder`1">
            <summary>
            The FieldExpressionBuilder class supports the construction of field
            expressions representing the fields of particular data model.
            </summary>
            <typeparam name="TData">Type of data exposing the fields to be represented in an expression</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionBuilder`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a field expression representing the field identified by
            the specified field selector.
            </summary>
            <typeparam name="TValue">Return type of the field identified by the field selector</typeparam>
            <param name="fieldSelector">Expression identifying the field to be represented as a FieldExpression</param>
            <returns>Field expression representing the identified field</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionBuilder`1.Create(System.Linq.Expressions.MemberExpression)">
            <summary>
            Creates a FieldExpression corresponding to the specified MemberExpression.
            </summary>
            <param name="memberExpression">MemberExpression for which a corresponding FieldExpression should be created</param>
            <returns>FieldExpression corresponding to the specified MemberExpression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionBuilder`1.AssertForCreate(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Verifies that the components of a field selector are sufficient for
            creation of a FieldExpression. If the components are insufficient, a
            NotSupportedException will be thrown.
            </summary>
            <param name="memberExpression">MemberExpression identifying the field for which a FieldExpression should be created</param>
            <param name="selectorParameter">ParameterExpression identifying the parameter of the field selector lambda</param>
            <exception cref="T:System.NotSupportedException">The components of the field selector are insufficient to create a FieldExpression</exception>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionBuilder`1.MemberExpressionHasExpectedRoot(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the specified member has a root of the specified
            expression, false otherwise.
            </summary>
            <param name="memberExpression">Member whose root should be verified</param>
            <param name="expectedRoot">Expected root expression</param>
            <returns>True if the specified member has a root of the specified expression, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionBuilder`1.GetRootForMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Traverses the children of a MemberExpression tree and returns the first
            expression that it encounters, which is not a MemberExpression.
            </summary>
            <param name="memberExpression">MemberExpression tree to traverse</param>
            <returns>Root expression for the specified MemberExpression</returns>
        </member>
        <member name="T:EPiServer.Social.Common.FieldExpressionExtensions">
            <summary>
            The FieldExpressionExtensions class adds supplementary factory methods
            to the FieldExpression class.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.EqualTo(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.EqualTo(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.EqualTo(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.EqualTo(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.EqualTo(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new EqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>EqualToExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Contains(EPiServer.Social.Common.FieldExpression,System.String)">
            <summary>
            Creates a new ContainsExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>ContainsExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Contains(EPiServer.Social.Common.FieldExpression,System.Boolean)">
            <summary>
            Creates a new ContainsExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>ContainsExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Contains(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new ContainsExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>ContainsExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Contains(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new ContainsExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>ContainsExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Contains(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new ContainsExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>ContainsExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Any(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new AnyExpression representing a collection of value filter expressions.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>AnyExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Any(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Creates a new AnyExpression representing a collection of value filter expressions.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>AnyExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Any(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates a new AnyExpression representing a collection of value filter expressions.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>AnyExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Any(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Creates a new AnyExpression representing a collection of value filter expressions.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>AnyExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.Any(EPiServer.Social.Common.FieldExpression,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Creates a new AnyExpression representing a collection of value filter expressions.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>AnyExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThan(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThan(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThan(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new GreaterThanExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanExpression for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.GreaterThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new GreaterThanOrEqualTo representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>GreaterThanOrEqualTo for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThan(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThan(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThan(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new LessThan representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FieldExpressionExtensions.LessThanOrEqualTo(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Creates a new LessThanOrEqualToExpression representing a comparison of
            the field represented by this expression to the specified 
            value.
            </summary>
            <param name="field">Field targeted by this extension method</param>
            <param name="value">Value to compare against the field</param>
            <returns>LessThan for this field and the specified value</returns>
        </member>
        <member name="T:EPiServer.Social.Common.GreaterThanExpression">
            <summary>
            The GreaterThanExpression class represents an operation evaluating a
            field's contents to determine if it is greater than some value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.GreaterThanOrEqualToExpression">
            <summary>
            The GreaterThanOrEqualToExpression class represents an operation evaluating a
            field's contents to determine if it is greater than or equal to some value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.GreaterThanOrEqualToExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.LessThanExpression">
            <summary>
            The GreaterThanExpression class represents an operation evaluating a
            field's contents to determine if it is less than some value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.LessThanOrEqualToExpression">
            <summary>
            The LessThanOrEqualToExpression class represents an operation evaluating a
            field's contents to determine if it is less than or equal to some value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,EPiServer.Social.Common.ValueExpression)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left operand in this expression</param>
            <param name="right">Right operand in this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Integer value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">Double value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanOrEqualToExpression.#ctor(EPiServer.Social.Common.FieldExpression,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression identifying the field to be evaluated</param>
            <param name="value">DateTime value to compare</param>
        </member>
        <member name="M:EPiServer.Social.Common.LessThanOrEqualToExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.FilterExpressionBuilder`1">
            <summary>
            The FilterExpressionBuilder class supports the construction of the expressions
            which facilitate the querying of social data.
            </summary>
            <typeparam name="TData">Type of the data to be queried</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Constructs a FieldExpression representing the field identified by
            the specified field selector.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented as an expression</param>
            <returns>FieldExpression representing the selected data field</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.EqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Constructs an EqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>EqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.EqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Constructs an EqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>EqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.EqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an EqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>EqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.EqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an EqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>EqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Constructs an ContainsExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>ContainsExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Constructs an ContainsExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>ContainsExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an ContainsExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>ContainsExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Double)">
            <summary>
            Constructs an ContainsExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>ContainsExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an ContainsExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>ContainsExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Any``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Constructs an AnyExpression for the identified field and values.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="values">Value to be compared in the expression</param>
            <returns>AnyExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Any``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs an AnyExpression for the identified field and values.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="values">Value to be compared in the expression</param>
            <returns>AnyExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Any``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs an AnyExpression for the identified field and values.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="values">Value to be compared in the expression</param>
            <returns>AnyExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Any``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructs an AnyExpression for the identified field and values.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="values">Value to be compared in the expression</param>
            <returns>AnyExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Any``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Constructs an AnyExpression for the identified field and values.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="values">Value to be compared in the expression</param>
            <returns>AnyExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.GreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an GreaterThanExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>GreaterThanExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.GreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an GreaterThanExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>GreaterThanExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.GreaterThanOrEqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an GreaterThanOrEqualTo for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>GreaterThanOrEqualTo for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.GreaterThanOrEqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an GreaterThanOrEqualTo for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>GreaterThanOrEqualTo for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.LessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an LessThan for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>LessThan for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.LessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an LessThan for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>LessThan for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.LessThanOrEqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int64)">
            <summary>
            Constructs an LessThanOrEqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>LessThanOrEqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.LessThanOrEqualTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime)">
            <summary>
            Constructs an LessThanOrEqualToExpression for the identified field and value.
            </summary>
            <typeparam name="TValue">Data type of the field targeted by the field selector</typeparam>
            <param name="fieldSelector">Selector identifying the data field to be represented in the expression</param>
            <param name="value">Value to be compared in the expression</param>
            <returns>LessThanOrEqualToExpression for the identified field and value</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.And(EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Constructs an AndExpression combining the specified collection of expressions.
            </summary>        
            <param name="expressions">Collection of expressions to be "anded"</param>
            <returns>AndExpression combining the specified collection of expressions</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.And(System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Constructs an AndExpression combining the specified collection of expressions.
            </summary>        
            <param name="expressions">Collection of expressions to be "anded"</param>
            <returns>AndExpression combining the specified collection of expressions</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Or(EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Constructs an OrExpression combining the specified collection of expressions.
            </summary>        
            <param name="expressions">Collection of expressions to be "ored"</param>
            <returns>OrExpression combining the specified collection of expressions</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionBuilder`1.Or(System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Constructs an OrExpression combining the specified collection of expressions.
            </summary>        
            <param name="expressions">Collection of expressions to be "ored"</param>
            <returns>OrExpression combining the specified collection of expressions</returns>
        </member>
        <member name="T:EPiServer.Social.Common.IntegerValueExpression">
            <summary>
            The IntegerValueExpression class represents a integer value
            in a filter expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.IntegerValueExpression.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="value">Integer value represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.IntegerValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.FilterExpression">
            <summary>
            The FilterExpression class represents the basis for a component of
            a logical expression intended for representing data filters.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor to perform actions on this expression node.
            </summary>
            <param name="visitor">Acting visitor</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpression.op_BitwiseAnd(EPiServer.Social.Common.FilterExpression,EPiServer.Social.Common.FilterExpression)">
            <summary>
            Creates an AndExpression combining the specified left and right expressions.
            </summary>
            <param name="left">Expression to be "anded"</param>
            <param name="right">Expression to be "anded"</param>
            <returns>AndExpression combining the specified left and right expressions</returns>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpression.op_BitwiseOr(EPiServer.Social.Common.FilterExpression,EPiServer.Social.Common.FilterExpression)">
            <summary>
            Creates an OrExpression combining the specified left and right expressions.
            </summary>
            <param name="left">Expression to be "ored"</param>
            <param name="right">Expression to be "ored"</param>
            <returns>OrExpression combining the specified left and right expressions</returns>
        </member>
        <member name="T:EPiServer.Social.Common.BinaryExpressionExtensions">
            <summary>
            The BinaryExpressionExtensions class adds supplementary factory methods
            to the BinaryExpression class.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.BinaryExpressionExtensions.And(EPiServer.Social.Common.BinaryExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an AndExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="expression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>AndExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.BinaryExpressionExtensions.Or(EPiServer.Social.Common.BinaryExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an OrExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="expression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>OrExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="T:EPiServer.Social.Common.FilterExpressionVisitor">
            <summary>
            The FilterExpressionVisitor class represents the basis for visitor implementations
            intended to interpret a filter expression tree.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.FilterExpression)">
            <summary>
            Visits a tree node of type FilterExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.AndExpression)">
            <summary>
            Visits a tree node of type AndExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.OrExpression)">
            <summary>
            Visits a tree node of type OrExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.EqualToExpression)">
            <summary>
            Visits a tree node of type EqualToExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.ContainsExpression)">
            <summary>
            Visits a tree node of type ContainsExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.AnyExpression)">
            <summary>
            Visits a tree node of type AnyExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.EnumerableValueExpression)">
            <summary>
            Visits a tree node of type EnumerableValueExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.GreaterThanExpression)">
            <summary>
            Visits a tree node of type GreaterThanExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.GreaterThanOrEqualToExpression)">
            <summary>
            Visits a tree node of type GreaterThanOrEqualToExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.LessThanExpression)">
            <summary>
            Visits a tree node of type LessThanExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.LessThanOrEqualToExpression)">
            <summary>
            Visits a tree node of type LessThanOrEqualToExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.FieldExpression)">
            <summary>
            Visits a tree node of type FieldExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.StringValueExpression)">
            <summary>
            Visits a tree node of type StringValueExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.IntegerValueExpression)">
            <summary>
            Visits a tree node of type IntegerValueExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.DoubleValueExpression)">
            <summary>
            Visits a tree node of type DoubleValueExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.DateTimeValueExpression)">
            <summary>
            Visits a tree node of type DateTimeValueExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="M:EPiServer.Social.Common.FilterExpressionVisitor.Visit(EPiServer.Social.Common.BooleanValueExpression)">
            <summary>
            Visits a tree node of type BooleanExpression.
            </summary>
            <param name="expression">Expression to be visited</param>
        </member>
        <member name="T:EPiServer.Social.Common.OrExpression">
            <summary>
            The OrExpression class represents the logical "Or"
            operation to combine a collection of other query 
            expressions.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpression.#ctor(EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Constructor
            </summary>
            <param name="expressions">Filter expressions to be combined</param>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpression.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Constructor
            </summary>
            <param name="expressions">Filter expressions to be combined</param>
        </member>
        <member name="P:EPiServer.Social.Common.OrExpression.Expressions">
            <summary>
            Gets the collection of filter expressions to be combined.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpression.Equals(System.Object)">
            <summary>
            Returns true if the specified object is equivalent
            to this OrExpression, false otherwise.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified object is equivalent to this OrExpression, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Social.Common.OrExpressionExtensions">
            <summary>
            The OrExpressionExtensions class adds supplementary factory methods
            to the OrExpression class.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpressionExtensions.Or(EPiServer.Social.Common.OrExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an OrExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="orExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>OrExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpressionExtensions.Or(EPiServer.Social.Common.OrExpression,System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Creates an OrExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="orExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>OrExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpressionExtensions.And(EPiServer.Social.Common.OrExpression,EPiServer.Social.Common.FilterExpression[])">
            <summary>
            Creates an AndExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="orExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>AndExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="M:EPiServer.Social.Common.OrExpressionExtensions.And(EPiServer.Social.Common.OrExpression,System.Collections.Generic.IEnumerable{EPiServer.Social.Common.FilterExpression})">
            <summary>
            Creates an AndExpression combining the collection of specified expressions
            with the target expression.
            </summary>
            <param name="orExpression">Expression targeted by this extension</param>
            <param name="expressions">Expressions to be combined</param>
            <returns>AndExpression combining the collection of specified expressions with the target expression</returns>
        </member>
        <member name="T:EPiServer.Social.Common.StringValueExpression">
            <summary>
            The StringValueExpression class represents a string value
            in a filter expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.StringValueExpression.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">Boolean value represented by this expression</param>
        </member>
        <member name="M:EPiServer.Social.Common.StringValueExpression.Accept(EPiServer.Social.Common.FilterExpressionVisitor)">
            <summary>
            Accepts a visitor capable of interpreting this expression.
            </summary>
            <param name="visitor">Visitor to be accepted</param>
        </member>
        <member name="T:EPiServer.Social.Common.ValueExpression">
            <summary>
            The ValueExpression class serves as the basis for expressions
            representing values in filter expressions.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.ValueExpression`1">
            <summary>
            The ValueExpression class serves as the basis for expressions
            representing values of some specified data type in filter expressions.
            </summary>
            <typeparam name="T">Data type of value to be represented</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.ValueExpression`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value represented by this expression</param>
        </member>
        <member name="P:EPiServer.Social.Common.ValueExpression`1.Value">
            <summary>
            Gets the value represented by this expression.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.ValueExpression`1.Equals(System.Object)">
            <summary>
            Returns true if the specified object is equivalent to
            this ValueExpression, false otherwise.
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if the specified object is equivalent to this ValueExpression, false otherwise</returns>
        </member>
        <member name="T:EPiServer.Social.Common.Identifier">
            <summary>
            The Identifier class is a data model representing
            an identifier for a Identifier within the social
            platform.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Identifier.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">String-based identifier for an item</param>
        </member>
        <member name="P:EPiServer.Social.Common.Identifier.Id">
            <summary>
            Gets the underlying, string-based, identifier representing
            this Identifier instance.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Identifier.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type Identifier have the same 
            value of the underlying identifier, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.Identifier.GetHashCode">
            <summary>
            Returns a hash code representative of this Identifier.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Identifier.ToString">
            <summary>
            Returns a string representation of this Identifier.
            </summary>
            <returns>String representation of this Identifier</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Identifier.ToReference">
            <summary>
            Returns a reference representation of this Identifier.
            </summary>
            <returns>Reference representation of this Identifier</returns>
        </member>
        <member name="T:EPiServer.Social.Common.PageInfo">
            <summary>
            The PageInfo class represents the criteria necessary to identify
            a subset of some larger result set.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.PageInfo.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.PageInfo.PageSize">
            <summary>
            Gets or sets the number of items per page 
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.PageInfo.PageOffset">
            <summary>
            Gets or sets the record offset (zero-based) from which 
            to begin retrieving the items that will comprise a page.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.PageInfo.CalculateTotalCount">
            <summary>
            Gets or sets whether the total count will be returned in the result page.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.IProcessor`1">
            <summary>
            The IProcessor interface describes a generic, extensible, processing
            chain for tasks within the social platform.
            </summary>
            <typeparam name="T">Type of data to be processed</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.IProcessor`1.Process(`0)">
            <summary>
            Processes the specified data, returning a reference
            to it's post-processed form.
            </summary>
            <param name="itemToProcess">Data to be processed</param>
            <returns>The item in its post-processed form</returns>
        </member>
        <member name="M:EPiServer.Social.Common.IProcessor`1.Process``1(EPiServer.Social.Common.Composite{`0,``0})">
            <summary>
            Processes the specified data and its extension, returning a reference
            to it's post-processed composite.
            </summary>
            <param name="compositeToProcess">Composite data to be processed</param>
            <returns>The item in its post-processed form</returns>
        </member>
        <member name="M:EPiServer.Social.Common.IProcessor`1.SetNext(EPiServer.Social.Common.IProcessor{`0})">
            <summary>
            Sets the succeeding processor in the chain.
            </summary>
            <param name="processor">Processor to succeed this processor in the chain</param>
            <returns>A reference to the succeeding processor</returns>
        </member>
        <member name="M:EPiServer.Social.Common.IProcessor`1.GetNext">
            <summary>
            Returns the next processor in the processor chain.
            </summary>
            <returns>Next processor in the chain</returns>
        </member>
        <member name="M:EPiServer.Social.Common.IProcessor`1.SetLast(EPiServer.Social.Common.IProcessor{`0})">
            <summary>
            Appends the specified processor to the end of the
            processing chain.
            </summary>
            <param name="processor">Processor to be added to the chain</param>
            <returns>Reference to the processor that was appended</returns>
        </member>
        <member name="P:EPiServer.Social.Common.IProcessor`1.HasSuccessor">
            <summary>
            Returns true if this node in the processing chain
            has a succeeding processor, false otherwise.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.IProcessor`1.Successor">
            <summary>
            Gets the succeeding processor in the chain.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.NullProcessor`1">
            <summary>
            This class represents a processor which takes no
            action. It is intended to ease interaction with
            processing chains, serving as a terminating node.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.NullProcessor`1.Process(`0)">
            <summary>
            Takes no action and returns the item supplied to it.
            </summary>
            <param name="itemToProcess">Item to be processed</param>
            <returns>Item supplied to this method as a parameter</returns>
        </member>
        <member name="M:EPiServer.Social.Common.NullProcessor`1.Process``1(EPiServer.Social.Common.Composite{`0,``0})">
            <summary>
            Takes no action and returns the composite supplied to it.
            </summary>
            <param name="composite">Composite to be processed</param>
            <returns>Composite supplied to this method as a parameter</returns>
        </member>
        <member name="T:EPiServer.Social.Common.Processor`1">
            <summary>
            This class provides an abstract base supporting the implementation
            of individual handlers in a processing chain.
            </summary>
            <typeparam name="T">Type of data to be processed</typeparam>
        </member>
        <member name="P:EPiServer.Social.Common.Processor`1.Successor">
            <summary>
            Gets the succeeding processor in the chain. If there
            is no succeeding processor a NullProcessor will be
            returned, which effectively performs a no-op.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Processor`1.HasSuccessor">
            <summary>
            Returns true if this node in the processing chain
            has a succeeding processor, false otherwise.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Processor`1.Process(`0)">
            <summary>
            Processes the specified data, returning a reference
            to it's post-processed form.
            </summary>
            <param name="itemToProcess">Data to be processed</param>
            <returns>The item in its post-processed form</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Processor`1.Process``1(EPiServer.Social.Common.Composite{`0,``0})">
            <summary>
            Processes the specified compsite data, returning a reference
            to it's post-processed form.
            </summary>
            <param name="compositeToProcess">Data to be processed</param>
            <returns>The data in its post-processed form</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Processor`1.SetNext(EPiServer.Social.Common.IProcessor{`0})">
            <summary>
            Sets the succeeding processor in the chain.
            </summary>
            <param name="processor">Processor to succeed this processor in the chain</param>
            <returns>A reference to the succeeding processor</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Processor`1.GetNext">
            <summary>
            Returns the next processor in the processor chain.
            </summary>
            <returns>Next processor in the chain</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Processor`1.SetLast(EPiServer.Social.Common.IProcessor{`0})">
            <summary>
            Appends the specified processor to the end of the
            processing chain.
            </summary>
            <param name="processor">Processor to be added to the chain</param>
            <returns>Reference to the processor that was appended</returns>
        </member>
        <member name="T:EPiServer.Social.Common.Reference">
            <summary>
            Represents a uniquely identifiable reference to an arbitrary entity in a third-party system.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.IsEmpty">
            <summary>
            Checks if the reference has not been assigned an Id, yet.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.#ctor">
            <summary>
            Returns a newly created and initialized Reference instance.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.#ctor(System.String)">
            <summary>
            Returns a newly created and initialized Reference instance.
            </summary>
            <param name="id">String representing an identifier to be used as a reference.</param>
        </member>
        <member name="P:EPiServer.Social.Common.Reference.Empty">
            <summary>
            Gets an empty Reference value.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Reference.Id">
            <summary>
            Returns the underlying reference identifier as string.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.IsNullOrEmpty(EPiServer.Social.Common.Reference)">
            <summary>
            Returns true if the specified reference is null or represents
            an empty Reference, false otherwise.
            </summary>
            <param name="reference">Reference instance to verify</param>
            <returns>True if the reference is null or empty, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.Create(System.String)">
            <summary>
            Creates a Reference. 
            </summary>
            <param name="id">String representing an identifier to be used as a reference.</param>
            <returns>The created Reference object.</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.op_Equality(EPiServer.Social.Common.Reference,EPiServer.Social.Common.Reference)">
             <summary>
             Overloads the equality operator on the Reference class.
             </summary>
             <param name="a">The operand on the left side of the equality operator.</param>
             <param name="b">The operand on the right side of the equality operator.</param>
             <returns>
             Returns true if the both objects are null or the same instance or have the same value of the underlying reference identifier.
             Returns false if either object is null or both objects have different values of the underlying reference identifier.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.op_Inequality(EPiServer.Social.Common.Reference,EPiServer.Social.Common.Reference)">
            <summary>
            Overloads the inequality operator on the Reference class.
            </summary>
            <param name="a">The operand on the left side of the inequality operator.</param>
            <param name="b">The operand on the right side of the inequality operator.</param>
            <returns>
            Returns true if either object is null or both objects have different values of the underlying reference identifier.
            Returns false if the both objects are null or the same instance or have the same value of the underlying reference identifier.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type Reference have the same 
            value of the underlying reference identifier, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.GetHashCode">
            <summary>
            Returns the hash code of the underlying reference identifier of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:EPiServer.Social.Common.Reference.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>
            Returns the underlying reference identifier of this instance as a string.
            </returns>
        </member>
        <member name="T:EPiServer.Social.Common.ResultPage`1">
            <summary>
            The ResultPage class represents a single page of results
            retrieved from the Social platform.
            </summary>
            <typeparam name="T">Type of the result items comprising the page</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.ResultPage`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64,EPiServer.Social.Common.PageInfo,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="results">Collection of result items comprising the page</param>
            <param name="totalCount">Total count of items resulting from the query</param>
            <param name="info">Information describing the specifications of the page</param>
            <param name="hasMore">Boolean denoting whether the query has found more items beyond this page.</param>
        </member>
        <member name="P:EPiServer.Social.Common.ResultPage`1.Results">
            <summary>
            Gets the collection of result items comprising the page.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.ResultPage`1.TotalCount">
            <summary>
            Gets the total count of items resulting from the query
            that produced this page.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.ResultPage`1.Info">
            <summary>
            Gets information describing the specifications of this page.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.ResultPage`1.HasMore">
            <summary>
            Gets whether there are additional items to be returned in a subsequent request.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.Composite`2">
            <summary>
            The Composite class represents the composition of a
            data model from the Social platform and custom data applied
            to extend that model.
            </summary>
            <typeparam name="TModel">Type of data model to be extended in the composition</typeparam>
            <typeparam name="TExtension">Type of data applied as an extension</typeparam>
        </member>
        <member name="M:EPiServer.Social.Common.Composite`2.#ctor(`0,`1)">
            <summary>
            Constructor
            </summary>
            <param name="data">Primary data model to be extended through composition</param>
            <param name="extension">Data applied as an extension in this composition</param>
        </member>
        <member name="P:EPiServer.Social.Common.Composite`2.Data">
            <summary>
            Gets the primary data model in this composition.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.Composite`2.Extension">
            <summary>
            Gets the data applied as an extension of the primary data model.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.DefaultLoggerFactory">
            <summary>
            The DefaultLoggerFactory class encapsulates the Social platform's 
            default construction of an ISocialLogger implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultLoggerFactory.CreateSocialLogger">
            <summary>
            Creates a new social logger instance according to platform defaults.
            </summary>
            <returns>New social logger instance</returns>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultLoggerFactory.GetSocialLogger">
            <summary>
            Gets an instance of the logger used by various components within
            the Social platform to log information.
            </summary>
            <returns>New social logger instance</returns>
        </member>
        <member name="T:EPiServer.Social.Common.ISocialLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Information(System.String,System.Object[])">
            <summary>
            Logs a informational message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Warning(System.String,System.Object[])">
            <summary>
            Logs a warning message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Error(System.String,System.Object[])">
            <summary>
            Logs a error message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Critical(System.String,System.Object[])">
            <summary>
            Logs a critical message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.ISocialLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs a trace message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="T:EPiServer.Social.Common.DefaultSocialLogger">
            <summary>
            This class corresponds to the default logger used by Episerver's Social platform. 
            Note that out of the box this logger does nothing.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs a debug message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Information(System.String,System.Object[])">
            <summary>
            Logs an informational message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Warning(System.String,System.Object[])">
            <summary>
            Logs a warning message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Error(System.String,System.Object[])">
            <summary>
            Logs an error message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Critical(System.String,System.Object[])">
            <summary>
            Logs a critical message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="M:EPiServer.Social.Common.DefaultSocialLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs a trace message to the underlying log.
            </summary>
            <param name="messageFormat">Log message with optional placeholder</param>
            <param name="args">Optional placeholder parameters</param>
        </member>
        <member name="T:EPiServer.Social.Common.SortField">
            <summary>
            The SortField class is a data structure representing a
            field upon which a set of data may be sorted.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SortField.#ctor(EPiServer.Social.Common.FieldExpression)">
            <summary>
            Constructor
            </summary>
            <param name="field">Expression representing the field on which to sort</param>
        </member>
        <member name="P:EPiServer.Social.Common.SortField.Field">
            <summary>
            Gets the name of this field.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.SortInfo">
            <summary>
            The SortInfo class is a data structure describing the
            manner in which a result set should be sorted.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.SortInfo.#ctor(EPiServer.Social.Common.SortField,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="field">Field on which to sort</param>
            <param name="ascending">Direction in which to sort</param>
        </member>
        <member name="P:EPiServer.Social.Common.SortInfo.Field">
            <summary>
            Gets the field on which to sort.
            </summary>
        </member>
        <member name="P:EPiServer.Social.Common.SortInfo.Ascending">
            <summary>
            Gets the direction in which to sort.
            </summary>
        </member>
        <member name="T:EPiServer.Social.Common.UserReference">
            <summary>
            A class that encapsulates the identifier that can be used to retrieve a user from a memebrship provider.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.#ctor">
            <summary>
            Returns a newly created and initialized Reference instance.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.#ctor(System.String)">
            <summary>
            Returns a newly created and initialized Reference instance.
            </summary>
            <param name="id">String representing an identifier to be used as a reference.</param>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.Create(System.String)">
            <summary>
            Creates a Reference. 
            </summary>
            <param name="id">String representing an identifier to be used as a reference.</param>
            <returns>The created Reference object.</returns>
        </member>
        <member name="P:EPiServer.Social.Common.UserReference.Empty">
            <summary>
            Gets an instance of a Reference denoting an 'empty' value.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.IsNullOrEmpty(EPiServer.Social.Common.UserReference)">
            <summary>
            Returns true if the specified user reference is null or represents
            an empty UserReference, false otherwise.
            </summary>
            <param name="userReference">UserReference instance to verify</param>
            <returns>True if the reference is null or empty, false otherwise</returns>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.op_Equality(EPiServer.Social.Common.UserReference,EPiServer.Social.Common.UserReference)">
             <summary>
             Overloads the equality operator on the Reference class.
             </summary>
             <param name="a">The operand on the left side of the equality operator.</param>
             <param name="b">The operand on the right side of the equality operator.</param>
             <returns>
             Returns true if the both objects are null or the same instance or have the same value of the underlying reference identifier.
             Returns false if either object is null or both objects have different values of the underlying reference identifier.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.op_Inequality(EPiServer.Social.Common.UserReference,EPiServer.Social.Common.UserReference)">
            <summary>
            Overloads the inequality operator on the Reference class.
            </summary>
            <param name="a">The operand on the left side of the inequality operator.</param>
            <param name="b">The operand on the right side of the inequality operator.</param>
            <returns>
            Returns true if either object is null or both objects have different values of the underlying reference identifier.
            Returns false if the both objects are null or the same instance or have the same value of the underlying reference identifier.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.Equals(System.Object)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="obj">the object to compare with this instance.</param>
            <returns>
            Returns true if this instance and another specified object, of type Reference have the same 
            value of the underlying reference identifier, else returns false.
            </returns>
        </member>
        <member name="M:EPiServer.Social.Common.UserReference.GetHashCode">
            <summary>
            Returns the hash code of the underlying reference identifier of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
    </members>
</doc>
