<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.ContentApi.OAuth</name>
    </assembly>
    <members>
        <member name="T:EPiServer.ContentApi.OAuth.ApiClientInfo">
            <summary>
                Represents a Api Client which calls the authorisation server to acquire access token. 
                Only valid registered clients may access the application, from the provided origin.
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ApiClientInfo.ClientId">
            <summary>
            Client ID
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ApiClientInfo.AccessControlAllowOrigin">
            <summary>
            Access Control Allow Origin
            </summary>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.ApplicationBuilderExtensions">
            <summary>
            Extension methods to initialize ContentApi in the owin <see cref="T:Owin.IAppBuilder"/> pipeline.
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.ApplicationBuilderExtensions.UseContentApiIdentityOAuthAuthorization``2(Owin.IAppBuilder)">
            <summary>
                Initialize ContentApi OAuth Authorization to use ASP.NET Identity with OAuthAuthorization tokens
            </summary>
            <typeparam name="TManager">The type of user manager configured in the application.</typeparam>
            <typeparam name="TUser">The user manager's user type.</typeparam>
            <param name="app">The application builder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.ApplicationBuilderExtensions.UseContentApiIdentityOAuthAuthorization``2(Owin.IAppBuilder,EPiServer.ContentApi.OAuth.ContentApiOAuthOptions)">
            <summary>
                Initialize ContentApi OAuth Authorization to use ASP.NET Identity with OAuthAuthorization tokens
            </summary>
            <typeparam name="TManager">The type of user manager configured in the application.</typeparam>
            <typeparam name="TUser">The user manager's user type.</typeparam>
            <param name="app">The application builder.</param>
            <param name="oAuthOptions">Options to control behavior of the ContentApi OAuth authorization server.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.AuthorisationConstants">
            <summary>
            Constant class for store properties of OAuth
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.ClientId">
            <summary>
            client id
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.GrantType">
            <summary>
            grant type
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.RefreshToken">
            <summary>
            refresh token
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.Username">
            <summary>
            User name
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.AllowedOrigin">
            <summary>
            Allowed origin
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.AuthorisationConstants.AccessControlAllowOrigin">
            <summary>
            Access control allow origin
            </summary>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions">
            <summary>
            Options to control behavior of the Service Api OAuth authorization server.
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.RequireSsl">
            <summary>
            Require secure connections to the authorization server. Defaults to false.
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.TokenEndpointPath">
            <summary>
            Path to the OAuth endpoint for accessing OAuth Access and Refresh tokens
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.AccessTokenExpireTimeSpan">
            <summary>
            Optional timeout for access tokens before they must be refreshed (via password grant or refresh token). If not specified, the default of
            <see cref="T:Microsoft.Owin.Security.OAuth.OAuthAuthorizationServerOptions"/> is used.
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.RefreshTokenExpireTimeSpan">
            <summary>
            Length of timeout for refresh tokens, before it needs to be refreshed. If not specified, the default is 2 weeks (14 days).
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.Clients">
            <summary>
                Return a list of Api Client
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.ContentApiOAuthOptions.LoadDefaultApiClientList">
            <summary>
            Load default list of api clients.
            </summary>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.ApiAuthorizationServerProviderBase">
            <summary>
            Base class for <see cref="T:Microsoft.Owin.Security.OAuth.IOAuthAuthorizationServerProvider"/> implementations, adding a
            few helper methods.
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.ApiAuthorizationServerProviderBase.Completed">
            <summary>
            Produces a completed <see cref="T:System.Threading.Tasks.Task"/> for non-asynchronous implementations of methods
            returning tasks.
            </summary>
            <returns>An Task wrapping a null result.</returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.ApiAuthorizationServerProviderBase.GetRequestInfo(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Returns request header values.
            </summary>
            <param name="context">The context.</param>
            <returns>A comma separated list of key:value pairs.</returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.ApiAuthorizationServerProviderBase.RejectWithInvalidUserIdOrPassword(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Sets the context to rejected with an "invalid_credentials" error.
            </summary>
            <param name="context">The resource grant context.</param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.ApiAuthorizationServerProviderBase.RejectWithServerError(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Sets the context to rejected with a "server_error" error.
            </summary>
            <param name="context">The resource grant context.</param>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.ContentApiDynamicDataStoreFactory">
            <summary>
            Factory to get store. This helps us to write UT more easily with Store
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.ContentApiDynamicDataStoreFactory.GetStore(System.Type)">
            <summary>
            Get <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore"/> by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository">
            <summary>
                The default implementation of <see cref="T:EPiServer.ContentApi.OAuth.IRefreshTokenRepository"/>
                It uses DDS to persist and manipulate data
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.#ctor(EPiServer.ContentApi.OAuth.Internal.ContentApiDynamicDataStoreFactory)">
            <summary>
            Initialize an instance of <see cref="T:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository"/>
            </summary>
            <param name="dataStoreFactory"></param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.CreateToken(System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.Add(EPiServer.ContentApi.OAuth.IRefreshToken)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.FindByValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.FindById(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.FindByUsername(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.Remove(EPiServer.ContentApi.OAuth.IRefreshToken)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.DefaultRefreshTokenRepository.GetTokensByConditions(System.Linq.Expressions.Expression{System.Func{EPiServer.ContentApi.OAuth.Internal.RefreshToken,System.Boolean}})">
            <summary>
            Get RefreshToken from store by expression provided.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.IdentityAuthorizationServerProvider`3">
            <summary>
            Extends <see cref="T:Microsoft.Owin.Security.OAuth.OAuthAuthorizationServerProvider"/> to provide support for bearer token
            authentication with ASP.NET Identity and generic user implementations.
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityAuthorizationServerProvider`3.ValidateClientAuthentication(Microsoft.Owin.Security.OAuth.OAuthValidateClientAuthenticationContext)">
            <summary>
            Called to validate that the origin of the request is a registered "client_id", and that the correct credentials for that client are present on the request.
            Custom error handling can happen here. Eg: check for missing or wrong value parameter, etc.
            Call context.SetError() to mark the request as invalid and return an error message to client
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityAuthorizationServerProvider`3.GrantResourceOwnerCredentials(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Called when a request to the Token endpoint arrives with a "grant_type" of "password"
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityAuthorizationServerProvider`3.IsUserInactiveOrLockedOut(`1)">
            <summary>
            Check if user account is inactive or locked out
            </summary>        
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityAuthorizationServerProvider`3.GrantRefreshToken(Microsoft.Owin.Security.OAuth.OAuthGrantRefreshTokenContext)">
            <summary>
            Called when a request to the Token endpoint arrives with a "grant_type" of "refresh_token"
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.IdentityRefreshTokenProvider">
            <summary>
                Refresh Token Provider implementation which utilizes the <see cref="T:EPiServer.ContentApi.OAuth.IRefreshTokenRepository"/> to create and validate refresh tokens for OWIN OAuth authentication
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityRefreshTokenProvider.#ctor(EPiServer.ContentApi.OAuth.ContentApiOAuthOptions,EPiServer.ContentApi.OAuth.IRefreshTokenRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentApi.OAuth.Internal.IdentityRefreshTokenProvider"/> class.
            </summary>
            <param name="options"></param>
            <param name="refreshTokenRepository"></param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityRefreshTokenProvider.CreateAsync(Microsoft.Owin.Security.Infrastructure.AuthenticationTokenCreateContext)">
            <summary>
                Creates a RefreshToken, storing it in the <see cref="T:EPiServer.ContentApi.OAuth.IRefreshTokenRepository"/> and attaching it to the provided <see cref="T:Microsoft.Owin.Security.Infrastructure.AuthenticationTokenCreateContext"/>, 
            </summary>
            <param name="context">AuthenticationTokenCreateContext to base the ticket creation</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.Internal.IdentityRefreshTokenProvider.ReceiveAsync(Microsoft.Owin.Security.Infrastructure.AuthenticationTokenReceiveContext)">
            <summary>
                Looks up a refesh token provided in the <see cref="T:Microsoft.Owin.Security.Infrastructure.AuthenticationTokenReceiveContext"/> and deserializes it, if found
            </summary>
            <param name="context">AuthenticationTokenReceiveContext to locate the ticket</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.Internal.RefreshToken">
            <summary>
            Default implementation of <see cref="T:EPiServer.ContentApi.OAuth.IRefreshToken"/> used to store in DDS
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.Guid">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.Id">
            <summary>
            ID stored in DDS
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.RefreshTokenValue">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.Subject">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.ClientId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.IssuedUtc">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.ExpiresUtc">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.Internal.RefreshToken.ProtectedTicket">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.IRefreshToken">
            <summary>
            Refresh token information for OAuth 2.0 
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.Guid">
            <summary>
            Unique ID of token
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.RefreshTokenValue">
            <summary>
            Hash value of token
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.Subject">
            <summary>
            Username owns the refresh token
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.ClientId">
            <summary>
            Client Id 
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.IssuedUtc">
            <summary>
            UTC Time that RefreshToken is issued
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.ExpiresUtc">
            <summary>
            UTC Time that RefreshToken wil be expired
            </summary>
        </member>
        <member name="P:EPiServer.ContentApi.OAuth.IRefreshToken.ProtectedTicket">
            <summary>
            Protected Ticket
            </summary>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.IRefreshTokenRepository">
            <summary>
                Repository interface for <see cref="T:EPiServer.ContentApi.OAuth.IRefreshToken"/> CRUD operations
            </summary>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.CreateToken(System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Create refresh token object with given data. 
            </summary>
            <param name="hashValue">Hash value of Refresh Token</param>
            <param name="clientid">Client Id</param>
            <param name="subject">Subject</param>
            <param name="issuedUtc">Issued UTC Time</param>
            <param name="expiredUtc">Expires UTC Time</param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.Add(EPiServer.ContentApi.OAuth.IRefreshToken)">
            <summary>
                Add a RefreshToken to the repository. If an existing refresh token exists for a given <see cref="T:EPiServer.ContentApi.OAuth.ApiClientInfo"/> ID, then the existing token will be removed.
            </summary>
            <param name="token">RefreshToken instance to be added to the repository</param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.FindByValue(System.String)">
            <summary>
                Find a RefreshToken by value
            </summary>
            <param name="refreshTokenValue">value of the RefreshToken to find</param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.FindById(System.Guid)">
            <summary>
              Find a RefreshToken by ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.FindByUsername(System.String)">
            <summary>
                Retrieve a List of RefreshToken by username (case insensitive)
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.Remove(EPiServer.ContentApi.OAuth.IRefreshToken)">
            <summary>
                Remove a provided RefreshToken from the repository
            </summary>
            <param name="refreshToken">RefreshToken instance to be removed</param>
        </member>
        <member name="M:EPiServer.ContentApi.OAuth.IRefreshTokenRepository.Remove(System.String)">
            <summary>
                Remove a RefreshToken from the repository by value
            </summary>
            <param name="refreshTokenValue">value of the RefreshToken to remove</param>
        </member>
        <member name="T:EPiServer.ContentApi.OAuth.OAuthErrors">
            <summary>
            Class for storing OAuth error messages
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.InvalidClientId">
            <summary>
            When the client id of request is invalid. eq: missing client_id in request
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.InvalidOrigin">
            <summary>
            When origin of request is invalid. eg: CORS not enable for current origin
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.InvalidGrant">
            <summary>
            When grant type is not valid. (grant_type could be password or refresh_token)
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.InvalidCredentials">
            <summary>
            When credential is not valid (e.g: wrong username/password or user account is inactive/locked out)
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.ServerError">
            <summary>
            Internal server error. eg: cannot connect to database
            </summary>
        </member>
        <member name="F:EPiServer.ContentApi.OAuth.OAuthErrors.InvalidRefreshToken">
            <summary>
            when refresh_token param is missing
            </summary>
        </member>
    </members>
</doc>
