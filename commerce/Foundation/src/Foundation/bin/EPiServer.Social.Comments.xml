<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Social.Comments</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Social.Comments.DefaultCommentServiceFactory">
            <summary>
            The DefaultCommentServiceFactory class encapsulates the platform's 
            default construction of an ICommentService implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.DefaultCommentServiceFactory.Create">
            <summary>
            Creates a new comment service according to platform defaults.
            </summary>
            <returns>New comment service</returns>
        </member>
        <member name="M:EPiServer.Social.Comments.DefaultCommentServiceFactory.GetRepository">
            <summary>
            Gets an instance of the repository intended to support the service
            constructed by this factory. Override this method to introduce
            a custom repository.
            </summary>
            <returns>Repository intended to support this service</returns>
        </member>
        <member name="T:EPiServer.Social.Comments.CommentService">
            <summary>
            The CommentService class supports comment management operations, allowing
            users to contribute comments to entities in a Social environment.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.#ctor(EPiServer.Social.Comments.Core.ICommentRepository)">
            <summary>
            Constructor
            </summary>
            <param name="commentRepository">A comment repository that can communicate with the underlying data store.</param>        
        </member>
        <member name="P:EPiServer.Social.Comments.CommentService.CommentValidation">
            <summary>
            Gets the validation strategy for this service.
            </summary>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Get(EPiServer.Social.Common.Criteria{EPiServer.Social.Comments.Core.CommentFilter})">
            <summary>
            Retrieves a collection of comments that are immediate children of a 
            particular parent entity, identified in the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter comments</param>        
            <returns>Page of comments filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.GetAsync(EPiServer.Social.Common.Criteria{EPiServer.Social.Comments.Core.CommentFilter})">
            <summary>
            Retrieves a collection of comments that are immediate children of a 
            particular parent entity, identified in the specified criteria.
            </summary>
            <param name="criteria">Criteria by which to filter comments</param>        
            <returns>Page of comments filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Get``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Comments.Core.CommentFilter,``0})">
            <summary>
            Retrieves a page of comments as specified by the provided criteria. The 
            comments are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired comments</typeparam>
            <param name="criteria">Filters the result set of comments</param>
            <returns>Page of composite comments filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.GetAsync``1(EPiServer.Social.Common.CompositeCriteria{EPiServer.Social.Comments.Core.CommentFilter,``0})">
            <summary>
            Asynchronously retrieves a page of comments as specified by the provided criteria. The 
            comments are filtered by the type of their associated data.
            </summary>
            <typeparam name="TExtension">Type of data associated with the desired comments</typeparam>
            <param name="criteria">Filters the result set of comments</param>
            <returns>Page of composite comments filtered according to the specified criteria</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.InvalidPageInfoException">Thrown when the page info is invalid.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Get(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Gets a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be retrieved</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.GetAsync(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Gets a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be retrieved</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Get``1(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Gets a comment composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the comment</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A comment composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.GetAsync``1(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Asynchronously gets a comment composed with associated extension data, 
            as identified by the specified ID.        
            </summary>
            <typeparam name="TExtension">Type of data applied as an extension of the comment</typeparam>
            <param name="id">ID of the item to be retrieved</param>
            <returns>A comment composed with associated extension data</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment 
            does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Add(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Adds a new comment.
            </summary>
            <param name="comment">Comment to be added</param>
            <returns>Comment that was added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being added is empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.AddAsync(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Asynchronously adds a new comment.
            </summary>
            <param name="comment">Comment to be added</param>
            <returns>Comment that was added</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being added is empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Add``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Adds a new comment with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the comment</typeparam>
            <param name="comment">Comment to be added</param>
            <param name="extension">Extended data related to the comment</param>
            <returns>A comment composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being added is empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.AddAsync``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Asynchronously adds a new comment with supporting metadata to form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the comment</typeparam>
            <param name="comment">Comment to be added</param>
            <param name="extension">Extended data related to the comment</param>
            <returns>A comment composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being added is empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Update(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Updates an existing comment.
            </summary>
            <param name="comment">Comment to be updated</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being updated is empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.UpdateAsync(EPiServer.Social.Comments.Core.Comment)">
            <summary>
            Asynchronously updates an existing comment.
            </summary>
            <param name="comment">Comment to be updated</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being updated is empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Update``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Updates an existing comment and its supporting metadata to
            form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the comment</typeparam>
            <param name="comment">Comment to be updated</param>
            <param name="extension">Extended data related to the comment</param>
            <returns>A comment composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being updated is empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.UpdateAsync``1(EPiServer.Social.Comments.Core.Comment,``0)">
            <summary>
            Asynchronously updates an existing comment and its supporting metadata to
            form a composite.
            </summary>
            <typeparam name="TExtension">Type applied as an extension of the comment</typeparam>
            <param name="comment">Comment to be updated</param>
            <param name="extension">Extended data related to the comment</param>
            <returns>A comment composed with the extended data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters passed in are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of the parameters passed in are invalid.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.InvalidCommentException">Thrown when the comment body being updated is empty.</exception>
            <exception cref="T:EPiServer.Social.Comments.Core.CommentDoesNotExistException">Thrown when the identified comment does not exist.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.Remove(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Deletes a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be deleted</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
        <member name="M:EPiServer.Social.Comments.CommentService.RemoveAsync(EPiServer.Social.Comments.Core.CommentId)">
            <summary>
            Asynchronously deletes a comment as identified by the specified ID.        
            </summary>
            <param name="id">ID of the item to be deleted</param>
            <returns>The identified Comment</returns>
            <exception cref="T:System.ArgumentException">Thrown when the comment id passed in is null or empty.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialException">Thrown when an error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialAuthenticationException">Thrown when an authentication error occurs while processing the request.</exception>
            <exception cref="T:EPiServer.Social.Common.MaximumDataSizeExceededException">Thrown when a Social object is submitted, which exceeds the size restrictions of the system.</exception>
            <exception cref="T:EPiServer.Social.Common.SocialCommunicationException">Thrown when errors occur communicating with the cloud services.</exception>
        </member>
    </members>
</doc>
