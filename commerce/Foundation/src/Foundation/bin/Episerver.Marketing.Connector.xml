<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Episerver.Marketing.Connector</name>
    </assembly>
    <members>
        <member name="M:Episerver.Marketing.Connector.Framework.Cookies.EncryptedCookieReader.#ctor(Episerver.Marketing.Common.Cookies.ICookieWriter)">
            <summary>
            Takes a writer of your construction, default is CookieWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.CookieData">
            <summary>
            CookieData object for a given connector
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.CookieData.DatasourceId">
            <summary>
            The ID of the datasource where the entity belongs.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.CookieData.EntityId">
            <summary>
            The Id of the entity.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.SubmissionTarget">
            <summary>
            Represents a submission target for connectors.
            Eg: Contact list in Silverpop, Subscriber list in Exact Target.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.SubmissionTarget.Id">
            <summary>
            Id of the submission target.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.SubmissionTarget.ConnectorDataSourceId">
            <summary>
            The datasource this submission target is associated with.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.SubmissionTarget.Name">
            <summary>
            Name of the submission target.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.GlobalSettings">
            <summary>
            Class containing the global settings for the Marketing connectors.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.Id">
            <summary>
            Store Identifier.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.EnableFormAutoFill">
            <summary>
            Flag indicating whether to enable auto-fill feature on forms.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.HideSubmissionError">
            <summary>
            Flag indicating whether to enable silent errors on unsuccessful form submissions.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.FormSubmissionFailureMessage">
            <summary>
            Friendly message to be displayed when form submission is unsuccessful.
            This is displayed only when <see cref="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.HideSubmissionError"/> is set to false.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.GlobalSettings.LastUpdated">
            <summary>
            Last updated Datetime.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.SubmitOnlyDataSource">
            <summary>
            Connector DataSource that only supports submitting data to it. These DataSources will be ignored for the purposes of AutoFill and Visitor Group features
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials">
            <summary>
            Credential object for a given connector
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials.ConnectorName">
            <summary>
            name of the connector to save the credentials for
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials.ConnectorId">
            <summary>
            The Id of the Connector
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials.ConnectorInstanceId">
            <summary>
            The instance id of the connector
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials.CredentialFields">
            <summary>
            All the information the connector needs to connect to the external system as well as any settings that need to be input by the user
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource">
            <summary>
            Represents a data source for connectors.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource.Id">
            <summary>
            Id of the datasource.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource.Name">
            <summary>
            Name of the datasource.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource.SubmissionTargets">
            <inheritdoc />
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.EntityProfile">
            <summary>
            Container for the information that a connector has for an Entity
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.EntityProfile.Id">
            <summary>
            Identifier for the entity
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.EntityProfile.Fields">
            <summary>
            All the fields and their data for the entity. Field name is the key to the dictionary and the connector field value is the value of the dictionary
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Data.Field">
            <summary>
            Field information retrieved from a data source (i.e. sql db column).
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.Field.Id">
            <summary>
            Field Id.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.Field.Name">
            <summary>
            Field Name.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.Field.DisplayName">
            <summary>
            Display Name.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Data.Field.IsReadOnly">
            <summary>
            Flag indicating if the field is read-only.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.DataClasses.SaveEntityCriteria">
            <summary>
            Represents the criteria for saving an entity.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.DataClasses.SaveEntityCriteria.Datasource">
            <summary>
            Datasource where the entity should be saved.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.DataClasses.SaveEntityCriteria.SubmissionTarget">
            <summary>
            SubmissionTarget where the entity should be saved.
            If this is not specified, entity will be saved in the 
            Datasource.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.ActiveConnectorEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.ActiveConnectorEventArgs.ActiveConnectors">
            <summary>
            All the Connectors that are configured and active.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.ConnectorEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.ConnectorEventArgs.Connector">
            <summary>
            Connector that was configured and now available for use.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.DataSourceFieldEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.DataSourceFieldEventArgs.Connector">
            <summary>
            Connector associated with the DataSources.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.DataSourceFieldEventArgs.DataSource">
            <summary>
            Connector DataSource.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.DataSourceFieldEventArgs.Fields">
            <summary>
            List of available Fields for a DataSource.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.DataSourceEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.DataSourceEventArgs.Connector">
            <summary>
            Connector associated with the DataSources.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.DataSourceEventArgs.DataSources">
            <summary>
            List of available Connector DataSources.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.EntityEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.EntityEventArgs.Connector">
            <summary>
            Connector associated with the DataSources.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.EntityEventArgs.DataSource">
            <summary>
            DataSource where the entity is stored/retrieved/updated.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.EntityEventArgs.EntityId">
            <summary>
            Unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.EntityEventArgs.EntityData">
            <summary>
            Dictionary containing the data of the entity.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.GlobalSettingsEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.GlobalSettingsEventArgs.Settings">
            <summary>
            Names and values of all the Global Settings for Connectors.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents">
            <summary>
            Defines all the events that the Marketing Connector Framework can produce.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.ConnectorAdded">
            <summary>
            Occurs after a connector has its credentials saved and is added to the Active Connector list.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.ConnectorRemoved">
            <summary>
            Occurs after a connectors' credentials are deleted rendering the connector unusable.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.GlobalSettingsChanged">
            <summary>
            Occurs after a global setting is changed.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.FetchedEntity">
            <summary>
            Occurs after an entity is retrieved from the connector.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.SubmittingEntity">
            <summary>
            Occurs before data is submitted for creating or updating an entity.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.SubmittedEntity">
            <summary>
            Occurs after an entity is created or updated.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.CachedConnectors">
            <summary>
            Occurs after the Active Connector Cache is created or updated.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.FetchedDataSources">
            <summary>
            Occurs after a connectors' DataSources are retrieved.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.IMarketingConnectorEvents.FetchedDataSourceFields">
            <summary>
            Occurs after the fields for a DataSource for a given connector are retrieved.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents">
            <summary>
            Contains all the events related to the Marketing Connector Framework that can be listened for.
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.ConnectorAddedEvent">
            <summary>
            ConnectorAddedEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.ConnectorRemovedEvent">
            <summary>
            ConnectorRemovedEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.GlobalSettingsChangedEvent">
            <summary>
            GlobalSettingsChangedEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedEntityEvent">
            <summary>
            FetchedEntityEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.SubmittingEntityEvent">
            <summary>
            SubmittingEntityEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.SubmittedEntityEvent">
            <summary>
            SubmittedEntityEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.CachedConnectorsEvent">
            <summary>
            CachedConnectorsEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedDataSourcesEvent">
            <summary>
            FetchedDataSourcesEvent
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedDataSourceFieldsEvent">
            <summary>
            FetchedDataSourceFieldsEvent
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.Instance">
            <summary>
            Instance used to fire events.
            </summary>
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.ConnectorAdded">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.ConnectorRemoved">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.GlobalSettingsChanged">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedEntity">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.SubmittingEntity">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.SubmittedEntity">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.CachedConnectors">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedDataSources">
            <inheritdoc />
        </member>
        <member name="E:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.FetchedDataSourceFields">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.ConnectorEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Connector details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.RemovedConnectorEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Connector details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.GlobalSettingsEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Global Settings details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.EntityEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Entity details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEventSync(System.String,Episerver.Marketing.Connector.Framework.Events.EntityEventArgs)">
            <summary>
            Fires off a synchronous event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Entity details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.ActiveConnectorEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">Active Connector details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.DataSourceEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">DataSource details pertaining to the event.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Events.MarketingConnectorEvents.RaiseMarketingConnectorEvent(System.String,Episerver.Marketing.Connector.Framework.Events.DataSourceFieldEventArgs)">
            <summary>
            Fires off an event based off the key passed in and containing the args passed in.
            </summary>
            <param name="key">Name of the event to fire.</param>
            <param name="eventArgs">DataField details pertaining to the event.</param>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Events.RemovedConnectorEventArgs">
            <summary>
            Used with Marketing Connector Manager IMarketing Connector events.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.RemovedConnectorEventArgs.ConnectorId">
            <summary>
            Id of the Connector that was removed.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Events.RemovedConnectorEventArgs.ConnectorInstanceId">
            <summary>
            InstanceId of the Connector that was removed.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper">
            <summary>
            Wrapper around the ISynchronizedObjectInstanceCache in episerver. This allows us to remove cached items from load balanced machines.
            See https://support.episerver.com/hc/en-us/articles/115004100443-Episerver-load-balancing-example-Configuring-events-over-WCF-with-TCP-IP
            and https://world.episerver.com/documentation/developer-guides/CMS/caching/Object-caching/
            
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.GetCachedValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.SetCacheValue(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.SetAbsoluteCacheValue(System.String,System.Object,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.GetCachedValue(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.GetCachedValue(System.String,System.Func{System.Object},System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.RemoveLocal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.RemoveRemote(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.GetValue(System.String,System.Func{System.Object},System.Runtime.Caching.CacheItemPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.GetValue(System.String,System.Func{System.Object},EPiServer.Framework.Cache.CacheEvictionPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.CacheHelper.SetValueWithPolicy(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.GetCachedValue(System.String)">
            <summary>
            Gets the value for the specified cacheKey
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.GetCachedValue(System.String,System.Func{System.Object})">
            <summary>
            Allows specifying a function to get the value if its not found in the cache
            </summary>
            <param name="key">the key</param>
            <param name="getFunction">the function to call if the value is not in the cache.</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.GetCachedValue(System.String,System.Func{System.Object},System.Int64)">
            <summary>
            Allows specifying a function to get the value if its not found in the cache.
            </summary>
            <param name="key">the key</param>
            <param name="getFunction">the function to call if the value is not in the cache.</param>
            <param name="minutes">optional minutes to use for absolute cache. default is to use an InfiniteAbsoluteExpiration </param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.SetCacheValue(System.String,System.Object)">
            <summary>
            Sets a cache value in the local cache
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.SetAbsoluteCacheValue(System.String,System.Object,System.Int64)">
            <summary>
            Sets a cache value in hte local cache with an expiration time of some number of minutes.
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="minutes"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.Remove(System.String)">
            <summary>
            Removes both local and remote
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.RemoveLocal(System.String)">
            <summary>
            Removes just local 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.RemoveRemote(System.String)">
            <summary>
            Removes just remote
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.GetValue(System.String,System.Func{System.Object},System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Gets a value from the cache, if provided will use the policy and the getFunction to add the value to the cache if it doesnt already exist. 
            If a getFunction is supplied, the get and insert into cache will be locked.
            </summary>
            <param name="key">The key of the value to retrieve</param>
            <param name="getFunction">the delegate to use to get the value if the value is not in the cache.</param>
            <param name="policy">The policy to use to get the value</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.GetValue(System.String,System.Func{System.Object},EPiServer.Framework.Cache.CacheEvictionPolicy)">
            <summary>
            Gets a value from the cache, if provided will use the policy and the getFunction to add the value to the cache if it doesnt already exist. 
            If a getFunction is supplied, the get and insert into cache will be locked.
            </summary>
            <param name="key">The key of the value to retrieve</param>
            <param name="getFunction">the delegate to use to get the value if the value is not in the cache.</param>
            <param name="policy">The policy to use to get the value</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ICacheHelper.SetValueWithPolicy(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Sets the cache value using the specified policy. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy"></param>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Helpers.ReflectionHelper">
            <summary>
            Helper to contain all the logic for interacting with .NET reflection
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ReflectionHelper.GetImplementations(System.Type)">
            <summary>
            Searches all installed assemblies for classes that implements the given Type. Filters out Interface and Abstract types.
            </summary>
            <param name="targetType">Type to search for</param>
            <returns>Collection of types that implement the targetType</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ReflectionHelper.GetInstances``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Activates all the types in the passed in collection into a list of T. If it cannot convert a type from the collection to type T it will be skipped.
            </summary>
            <typeparam name="T">Type to cast the activated instances to</typeparam>
            <param name="typeCollection">Collection of types to create instances from</param>
            <returns>A list of activated class instances of type T</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Helpers.ReflectionHelper.GetInstance``1(System.Type)">
            <summary>
            Activates an instance of the associate type and returns it as the specified type T
            </summary>
            <typeparam name="T">Return type of the object</typeparam>
            <param name="theType">The type of object to activate</param>
            <returns>a newly activate instance of the object type</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Serializers.IDataSerializer">
            <summary>
            IDataSerializer describes a component capable of serializing and deserializing objects
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Serializers.IDataSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified data to its byte representation
            </summary>
            <param name="data">Data to serialize</param>
            <returns>Serialized string representing the data</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Serializers.IDataSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes data from its byte representation to the specified type.
            </summary>
            <typeparam name="T">Type to which the string will be deserialized</typeparam>
            <param name="data">Data to deserialize</param>
            <returns>Data in its deserialized form</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Serializers.JsonDefaultSerializer">
            <summary>
            Performs default json serialization 
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Serializers.JsonDefaultSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes data from a JSON string to the specified type.
            </summary>
            <typeparam name="T">Type to which the string will be deserialized</typeparam>
            <param name="data">Data to deserialize</param>
            <returns>Data in its deserialized form</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Serializers.JsonDefaultSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified data to a JSON string.
            </summary>
            <param name="data">Data to serialize</param>
            <returns>Serialized string representing the data</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.MarketingConnectorInitialization">
            <summary>
            Contains methods which will be executed as a part of the EPiServer Framework initialization chain.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initialize this module.
            </summary>
            <param name="context">The Episerver initialization context</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorInitialization.Preload(System.String[])">
            <summary>
            Preloads for this module (not used).
            </summary>
            <param name="parameters">Parameters required to preload this module.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Uninitialize this module.
            </summary>
            <param name="context">The Episerver initialization context.</param>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.IMarketingConnector">
            <summary>
            Interface that defines an MAI connector.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.IMarketingConnector.Id">
            <summary>
            Unique identifier that represents this Connector
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.IMarketingConnector.InstanceId">
            <summary>
            Identifier for the connector instance. Used when there are multiple configurations for the same connector.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.IMarketingConnector.Name">
            <summary>
            Identifies the provider.
            <returns>Provider name.</returns> 
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.GetDataSources">
            <summary>
            Get a list of datasources available from this connector.
            For e.g. Leads, Prospects, Contacts.
            </summary>
            <returns>Returns a list of datasources available from this connector. 
            This list is displayed in the dropdown under the mapping tab in the forms UI.
            A datasource is the target where an entity is created upon the submission of the form.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.GetDataSourceFields(System.Int64)">
            <summary>
            Gets field names of a specified datasource.
            For e.g. Firstname, Lastname, Email.
            </summary>
            <param name="id">The datasource identifier.</param>
            <returns>Returns a list of fields available in this data source.
            This list is displayed in the drop down under the field mapping tab in the forms UI, 
            which allows for the mapping of a form field to a field in the datasource.
            </returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.CreateEntity(Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Saves an entity (Contact, Lead, Prospect etc) in the connector datasource.
            </summary>
            <param name="dataSource">The target datasource for the entity.</param>
            <param name="entityFields">Dictionary of the entity's attributes.</param>
            <returns>Unique identifier of the newly created/updated entity.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.CreateEntity(Episerver.Marketing.Connector.Framework.Data.SubmissionTarget,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Saves an entity (Contact, Lead, Prospect etc) in the connector datasource.
            </summary>
            <param name="submissionTarget">The SubmissionTarget for the entity.</param>
            <param name="entityFields">Dictionary of the entity's attributes.</param>
            <returns>Unique identifier of the newly created/updated entity.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.UpdateEntity(System.String,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates an entity (Contact, Lead, Prospect etc) in the connector datasource.
            </summary>
            <param name="entityId">The unique identifier of the entity to update</param>
            <param name="dataSource">The target datasource for the entity.</param>
            <param name="entityFields">Dictionary of the entity's attributes.</param>
            <returns>Unique identifier of the newly created/updated entity.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.UpdateEntity(System.String,Episerver.Marketing.Connector.Framework.Data.SubmissionTarget,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates an entity (Contact, Lead, Prospect etc) in the connector datasource.
            </summary>
            <param name="entityId">The unique identifier of the entity to update</param>
            <param name="submissionTarget">The SubmissionTarget for the entity.</param>
            <param name="entityFields">Dictionary of the entity's attributes.</param>
            <returns>Unique identifier of the newly created/updated entity.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnector.GetEntity(Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.String)">
            <summary>
            Returns the data the connector has for the specified entity
            </summary>
            <param name="dataSource">The datasource to retrieve the entity from.</param>
            <param name="entityId">identifier for the entity in the connector</param>
            <returns>The entity and all of its associated Fields and values</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager">
            <summary>
            Interface for interacting with the marketing connectors
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetConnectors">
            <summary>
            Returns the list of connector types available to the system. The connectors in this list may not be ready to be used to talk to their respective data sources
            </summary>
            <returns>The connectors installed in the site</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetConnector(System.Guid)">
            <summary>
            Returns an Uninitialized connector based on the id passed in
            </summary>
            <param name="connectorId">Connector name to match on</param>
            <returns>The instance of the Marketing Connector</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.CacheActiveConnectorData">
            <summary>
            Cache the datasources and fields of the configured connectors.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.SaveConnectorCredentials(Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials)">
            <summary>
            Saves the credentials
            </summary>
            <param name="credentials">Object to be saved</param>
            <returns>indicates if the credentials were successfully saved</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetConnectorCredentials(System.String,System.String)">
            <summary>
            Get the connector credentials
            </summary>
            <param name="connectorId">Connector id to look for</param>
            <param name="connectorInstanceId">Connector instance id to look for</param>
            <returns>The connector credentials stored</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.RemoveCredentials(System.String,System.String)">
            <summary>
            Remove the connector credentials from the store
            </summary>
            <param name="connectorId">Id of the connector you wish to delete the credentials for</param>
            <param name="connectorInstanceId">InstnanceId of the connector you wish to delete the credentials for</param>
            <returns>if the delete was successful or not</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetActiveConnectors">
            <summary>
            gets all instances of connectors that have saved credentials
            </summary>
            <returns>The list of connectors ready to be used</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetDataSources(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <summary>
            Returns the connector's datasources. It will first check to see if there is a cached list of the given connectors data sources before getting them from the connector
            </summary>
            <param name="connector">Connector to check</param>
            <returns>The list of valid connector data sources</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetDataSourceFields(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource)">
            <summary>
            Returns the fields for a connectors datasource. It will first check to see if there is a cached list of the given datasource fields before getting them from the connector
            </summary>
            <param name="connector">connector to check</param>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetSubmissionTargets(Episerver.Marketing.Connector.Framework.IMarketingConnector,System.Int64)">
            <summary>
            Returns the submission targets of a datasource. It will first check to see if there is a cached list
            of the given connector's submission targets before getting them from the connector
            </summary>
            <param name="connector">Connector to check</param>
            <param name="datasourceId">Id of the datasource you wish to fetch the lists from</param>
            <returns>The list of valid connector data sources</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetGlobalSettings">
            <summary>
            Retrieves the global settings stored in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetCurrentEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource)">
            <summary>
            Retrieves the current entity profile from the specified datasource and connector
            based on the entityId stored in the MAI cookie.
            </summary>
            <param name="connector">connector to check.</param>
            <param name="datasource">datasource to fetch the entity from.</param>
            <returns>The entity profile.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.GetEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.String)">
            <summary>
            Retrieves the entity profile specified by entityId from the specified datasource and connector.
            </summary>
            <param name="connector">connector to check.</param>
            <param name="datasource">datasource to fetch the entity from.</param>
            <param name="entityId">entity Id.</param>
            <returns>The entity profile.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.ClearCurrentEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.String)">
            <summary>
            Clears the entity profile from the session variable.
            </summary>
            <param name="connector">connector to check.</param>
            <param name="datasource">datasource where the entity belongs.</param>
            <param name="entityId">entity Id.</param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.SaveEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.DataClasses.SaveEntityCriteria,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Saves an entity in the connector datasource, clears the current entity
            from the session and upserts the MAI cookie for the current connector and datasource.
            </summary>
            <param name="connector">The target connector.</param>
            <param name="saveEntityCriteria">Criteria specifying if the entity should be saved in a datasource or submission target.</param>
            <param name="entityData">Dictionary of the entity's attributes.</param>
            <returns>The entityId</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.IMarketingConnectorManager.CacheConnectorData(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <summary>
            Inserts the datasources and fields of the specified connector into the cache.
            </summary>
            <param name="connector">The connector whose data is to be cached.</param>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.MarketingConnectorJob">
            <summary>
            This job fetches data (datasources and their fields) from the configured 
            marketing connectors.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorJob.Stop">
            <summary>
            Called when a user clicks on Stop for a manually started job, or when ASP.NET shuts down.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorJob.Execute">
            <summary>
            Called when a scheduled job executes
            </summary>
            <returns>A status message to be stored in the database log and visible from admin mode</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.MarketingConnectorManager">
            <summary>
            Methods for interacting with Marketing Connectors
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.#ctor">
            
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetConnectors">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetConnector(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.CacheActiveConnectorData">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.SaveConnectorCredentials(Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetConnectorCredentials(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.RemoveCredentials(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetActiveConnectors">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetDataSources(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetDataSourceFields(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetSubmissionTargets(Episerver.Marketing.Connector.Framework.IMarketingConnector,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetGlobalSettings">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetCurrentEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.ClearCurrentEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.Data.ConnectorDataSource,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.SaveEntity(Episerver.Marketing.Connector.Framework.IMarketingConnector,Episerver.Marketing.Connector.Framework.DataClasses.SaveEntityCriteria,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.CacheConnectorData(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetCredentialIdentifier(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <summary>
            Takes a Connector and generates a unique identifier
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetCredentialIdentifier(Episerver.Marketing.Connector.Framework.Data.ConnectorCredentialStoreData)">
            <summary>
            Takes a ConnectorCredentialStoreData and generates a unique identifier
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.MarketingConnectorManager.GetCredentialIdentifier(Episerver.Marketing.Connector.Framework.Data.ConnectorCredentials)">
            <summary>
            Takes a ConnectorCredentials and generates a unique identifier
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService">
            <summary>
            Provides access to the Dynamic data store 
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.#ctor">
            <summary>
            Encapsulates the Episerver dynamic data store into a service
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.DeleteData``1(System.String,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.GetAllData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.GetData``1(System.String,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.StoreData(System.String,EPiServer.Data.Dynamic.IDynamicData)">
            <inheritdoc/>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.DynamicDataStoreService.UpdateData``1(System.String,System.Guid,EPiServer.Data.Dynamic.IDynamicData)">
            <inheritdoc/>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Services.IDataStoreService">
            <summary>
            Defines an abstraction to get data from a datastore
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IDataStoreService.GetData``1(System.String,System.Guid)">
            <summary>
            Gets data instance from a specific store with a specific id
            </summary>
            <param name="storeName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IDataStoreService.GetAllData``1(System.String)">
            <summary>
            Gets all the data from a specific store
            </summary>
            <param name="storeName"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IDataStoreService.StoreData(System.String,EPiServer.Data.Dynamic.IDynamicData)">
            <summary>
            Stores data for a specific store
            </summary>
            <param name="storeName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IDataStoreService.UpdateData``1(System.String,System.Guid,EPiServer.Data.Dynamic.IDynamicData)">
            <summary>
            Updates existing store 
            </summary>
            <param name="storeName"></param>
            <param name="id"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IDataStoreService.DeleteData``1(System.String,System.Guid)">
            <summary>
            Deletes a specific item from the store 
            </summary>
            <param name="storeName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.Encryption.IEncryptionProvider.Encrypt(System.String)">
            <summary>
            Method to encrypt data.
            </summary>
            <param name="data">Data to be encrypted.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.Encryption.IEncryptionProvider.Decrypt(System.String)">
            <summary>
            Method to decrypt data.
            </summary>
            <param name="encryptedData">Data to be decrypted.</param>
            <returns>Decrypted value.</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Services.EncryptionService">
            <inheritdoc /> 
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.EncryptionService.Encrypt(System.String,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.EncryptionService.Decrypt(System.String,System.String)">
            <inheritdoc /> 
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Services.IEncryptionService">
            <summary>
            Service to encrypt data
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IEncryptionService.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the data passed to it
            </summary>
            <param name="id">identifier for the item you want to encrypt</param>
            <param name="data">serialized object that contains the data being encrypted</param>
            <returns>the encrypted representation of the serialized object</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.Services.IEncryptionService.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the data passed to it
            </summary>
            <param name="id">identifier for the tiem you want to decrypt</param>
            <param name="data">the encrypted data to be decrypted</param>
            <returns>a decrypted serialized object</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.Views.Admin.Settings">
            <summary>
            Used for the configuration of global settings for Marketing Connectors within the EPiServer Admin section.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.Log">
            <summary>
            Gets a new instance of the <see cref="T:EPiServer.Logging.ILogger"/> class
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.DataStoreService">
            <summary>
            Gets a new instance of the <see cref="T:Episerver.Marketing.Connector.Framework.Services.IDataStoreService"/> class
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.MCManager">
            <summary>
            Gets a new instance of the <see cref="T:Episerver.Marketing.Connector.Framework.Services.IDataStoreService"/> class
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.lblEnableFormsAutofill">
            <summary>
            lblEnableFormsAutofill control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.chkEnableFormsAutofill">
            <summary>
            chkEnableFormsAutofill control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.lblHideSubmissionError">
            <summary>
            lblHideSubmissionError control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.chkHideSubmissionError">
            <summary>
            chkHideSubmissionError control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.divFailureMessage">
            <summary>
            divFailureMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.lblFormSubmissionFailureMessage">
            <summary>
            lblFormSubmissionFailureMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.uxFormSubmissionFailureMessage">
            <summary>
            uxFormSubmissionFailureMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.statusMessage">
            <summary>
            statusMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Episerver.Marketing.Connector.Framework.Views.Admin.Settings.uxSave">
            <summary>
            uxSave control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorSettingsControl">
            <summary>
            Based class used by MAI connector controls that encapsulates common behavior.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorSettingsControl.ResetStatusMessages">
            <summary>
            Called by the MarketingConnectorWebFormBase to enable / disable / clear error message and status message strings. 
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorSettingsControl.EnableForm(System.Boolean)">
            <summary>
            Specific to each connector and their respective admin UI.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorSettingsControl.IsConnectorNameValid(System.String,System.Boolean@,System.String@)">
            <summary>
            Determines if the name of the connector is unique with respect to all other confgured connectors.
            </summary>
            <param name="currentName"></param>
            <param name="proposedName"></param>
            <param name="errorString"></param>
            <param name="isFormDataValid"></param>
            <returns></returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorWebFormBase`2">
            <summary>
            Base class used to encapsulate reusable web form base class behavior
            </summary>
            <typeparam name="TControl"></typeparam>
            <typeparam name="TConnector"></typeparam>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorWebFormBase`2.AddClick(System.Object,System.EventArgs)">
            <summary>
            Enables a new connector control by adding it to the controls collection as well as incrementing the 
            number of controls in session.  This is necessary to create the controls required for functionality on page_init.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.UI.MarketingConnectorWebFormBase`2.GetNewControl(Episerver.Marketing.Connector.Framework.IMarketingConnector,System.String)">
            <summary>
            Creates a new settings control to be added to the settings page.
            </summary>
            <param name="connector"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.SchemaUpdater.SchemaUpdaterBase.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.SchemaUpdates.ScriptExecutor)">
            <summary>
            Initializes a new instance of the <see cref="N:Episerver.Marketing.Connector.Framework.SchemaUpdater"/> class.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.Framework.SchemaUpdater.SchemaUpdaterBase.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Episerver.Marketing.Connector.VisitorGroups.ProfileController">
            <summary>
            A database controller used by the Marketing Automation Visitor Group criteria
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.ProfileController.GetConnectors">
            <summary>
            Gets the active connectors returned as a JSON object
            </summary>
            <returns>The active marketing connector names and id's in JSON format</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.ProfileController.GetDatabaseRecords(System.String)">
            <summary>
            Get the database list.
            </summary>
            <returns>The records as a JSON result</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.ProfileController.GetDatabaseColumnRecords(System.String,System.String)">
            <summary>
            Get a set of records from a specified database and return as JSON
            </summary>
            <param name="connectorId"></param>
            <param name="databaseId">The database ID</param>
            <returns>The records as a JSON result</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileCriteria">
            <summary>
            Implementation of a EPiServer.Personalization.VisitorGroups.CriterionBase
            which checks if a user has a specific profile value
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel">
            <summary>
            VisitorGroup model to use with Marketing Connectors to compare connector field values against an input value
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.ConnectorId">
            <summary>
            Connector 
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.DataSource">
            <summary>
            Gets or sets the database
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.Field">
            <summary>
            Gets or sets the column
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.Condition">
            <summary>
            Gets or sets the database compare condition
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.Value">
            <summary>
            Gets or sets the value to be used for comparisons
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.Profile.ProfileModel.Copy">
            <summary>
            Shallow copy the criterion
            </summary>
            <returns>Shallow copy of the criterion model</returns>
        </member>
        <member name="T:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition">
            <summary>
            Enum representing compare conditions for booleans
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.Equals">
            <summary>
            Equality comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.NotEqualTo">
            <summary>
            Non-Equality comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.BeginsWith">
            <summary>
            Begins with comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.EndsWith">
            <summary>
            Ends with comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.Contains">
            <summary>
            Contains comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.DoesNotContain">
            <summary>
            Does Not Contain comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.GreaterThan">
            <summary>
            Greater than comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.LessThan">
            <summary>
            Less than comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.GreaterThanOrEqualTo">
            <summary>
            Greater than or Equal to comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.LessThanOrEqualTo">
            <summary>
            Less than or Equal to comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.IsNull">
            <summary>
            Is null comparison
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition.IsNotNull">
            <summary>
            Is not null comparison
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.GetConnectors">
            <summary>
            Gets the active connectors from the Marketing Connector Framework
            </summary>
            <returns>the active connector list</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.MatchProfileCriteria(System.String,System.String,System.String,System.String,Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition)">
            <summary>
            Checks if the value passed in matches the visitor group criteria values
            </summary>
            <param name="ConnectorId">The Connector to match against</param>
            <param name="DatabaseId">The Connector DataSource to match against</param>
            <param name="Field">The DataSource Field to match against</param>
            <param name="Value">The saved visitor group value input by the CMS user</param>
            <param name="CompareCondition">the way in which the 2 values are compared</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.GetConnectorFields(System.String,System.String)">
            <summary>
            Gets the list of available fields from the connector's datasource
            </summary>
            <param name="connectorId">Connector that contains the DataSource</param>
            <param name="databaseId">DataSource for which to get the fields</param>
            <returns>The Fields associated to the Connector and DataSource combination</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.GetConnectorFromId(System.String)">
            <summary>
            Returns a specific Marketing Connector based on the connector id and instance id
            </summary>
            <param name="ConnectorId">the internal identifier for the connector instance</param>
            <returns>the specific connector instance</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.GetConnectorIdenitifer(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <summary>
            Returns our identifier for a connector instance (connector id plus instance id combination)
            </summary>
            <param name="connector">The connector instance to generate the Id for</param>
            <returns>the idenifier string for the connector instance</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.IVGRepository.GetDataSources(Episerver.Marketing.Connector.Framework.IMarketingConnector)">
            <summary>
            Retrieves the visitor group compaitible datasources from a connector. Filters out any DataSources that cannot return Entity information to the framework
            </summary>
            <param name="connector">The connector to get the DataSources from</param>
            <returns>The list of visitor group compatible DataSources</returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.VGRepository.CompareData(System.Collections.Generic.KeyValuePair{System.String,System.Object},Episerver.Marketing.Connector.VisitorGroups.Profile.DatabaseCompareCondition,System.String)">
            <summary>
            Compare string as the same with database compare condition
            </summary>
            <param name="column">The column</param>
            <param name="databaseCompareCondition">The condition</param>
            <param name="Value">Visitor Group Model's Value</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.VGRepository.IsNumeric(System.Object)">
            <summary>
            Check whether a given expression is a numeric value.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Connector.VisitorGroups.VGRepository.IsDateTime(System.Object)">
            <summary>
             Check whether a given expression is a DateTime value.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Episerver.Marketing.Common.Helpers.CookieHelper">
            <summary>
            Implementation of ICookieHelper.
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Common.Helpers.CookieHelper.CookieConnectorPrefix">
            <summary>
            Suffix for the cookie name populated by the current connector.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.CookieHelper.#ctor">
            <summary>
            Class for dealing with the MAI tracking cookie
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.CookieHelper.UpsertTrackingCookie(System.String,System.String,System.Collections.Generic.List{Episerver.Marketing.Connector.Framework.Data.CookieData})">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.CookieHelper.GetTrackingCookie(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.CookieHelper.RemoveTrackingCookie(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Episerver.Marketing.Common.Helpers.ICookieHelper">
            <summary>
            Contains methods to get and upsert cookie data for connectors.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.ICookieHelper.UpsertTrackingCookie(System.String,System.String,System.Collections.Generic.List{Episerver.Marketing.Connector.Framework.Data.CookieData})">
            <summary>
            Upserts the cookie data in the tracking cookie for a specific connector.
            </summary>
            <param name="connectorId">The connector Id.</param>
            <param name="connectorInstanceId">The connector instance id</param>
            <param name="cookieData">Value to be stored on the cookie.</param>
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.ICookieHelper.GetTrackingCookie(System.String,System.String)">
            <summary>
            Retrieves the value stored in the tracking cookie for a specific connector,
            and returns it in the form of a list of CookieData objects.
            </summary>
            <param name="connectorId">The connector Id.</param>
            <param name="connectorInstanceId">the connector instance id</param>
            <returns>List of CookieData objects.</returns>
        </member>
        <member name="M:Episerver.Marketing.Common.Helpers.ICookieHelper.RemoveTrackingCookie(System.String,System.String,System.String)">
            <summary>
            Removes the specified tracking cookie entry from the CookieData list. If the list is empty, it then removes the cookie. 
            </summary>
            <param name="connectorId"></param>
            <param name="connectorInstanceId"></param>
            <param name="dataSource"></param>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.CacheBroadcastInfo">
            <summary>
            Information about a cache broadcast request
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheBroadcastInfo.BroadcastRequestedBy">
            <summary>
            Gets or sets server that broadcast the request
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheBroadcastInfo.BroadcastRequestedAt">
            <summary>
            Gets or sets DateTime of broadcast request
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.CacheContentResponse">
            <summary>
            Response containing details of cache items in this local server
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContentResponse.Server">
            <summary>
            Gets or sets server name of responder
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContentResponse.Created">
            <summary>
            Gets or sets DateTime of response
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContentResponse.Received">
            <summary>
            Gets or sets DateTime that response was received (this is set by the receiver, not the responder)
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContentResponse.Keys">
            <summary>
            Gets or sets all local cache keys from this responder
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.CacheContents">
            <summary>
            Storage class for cache contents broadcast from servers
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContents.BroadcastRequest">
            <summary>
            Gets or sets information about the last received broadcast request
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContents.CurrentServer">
            <summary>
            Gets or sets a string that gives a unique key to the current server.
            This key will indicate whether this server is running in a web context or not.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheContents.BroadcastSentAt">
            <summary>
            Gets or sets DateTime of last broadcast from this server.
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.Events.CacheEventType">
            <summary>
            Contains constants that are used when triggering EPiServer events
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Framework.Caching.Events.CacheEventType.DumpCache">
            <summary>
            Constant for the dump cache event
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Framework.Caching.Events.CacheEventType.UpdateCacheKey">
            <summary>
            Constant for the update cache key event
            </summary>
        </member>
        <member name="F:Episerver.Marketing.Framework.Caching.Events.CacheEventType.GetCacheKeys">
            <summary>
            Constant for the get cache keys event
            </summary>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.CacheService">
            <summary>
            Default cache service of <see cref="T:Episerver.Marketing.Framework.Caching.ICacheService"/> for caching content and synchronize cache keys accross sites (load balancing scenario).
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.Insert(System.String,System.Object,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.Insert(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.GetOrCreate``1(System.String,System.Func{``0},System.Double)">
            <inheritdoc />
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheService.CacheKeys">
            <inheritdoc />
        </member>
        <member name="F:Episerver.Marketing.Framework.Caching.CacheService.KEY_CACHECONTENTS">
            <summary>
            Internal use cachekey
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheService.CacheContents">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.Dirty">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.Dirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.RefreshCacheContents">
            <inheritdoc />
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.CacheService.ServerIdentity">
            <summary>
            Gets a string with this server name (also shows if it is hosted in a web context)
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.RemoveLocal(System.String)">
            <summary>
            Dirties a cache key in the local cache only
            </summary>
            <param name="key">The key of the cache item to be dirtied</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.RemoveLocal">
            <summary>
            dirty all cached objects
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.DumpCacheHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Remove local cache
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.UpdateCacheKeyHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            An EPiServer event handler for dumping a specific cache key in the local cache
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">Event arguments - set the parameter property to a string key to be dirtied</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.GetCacheKeysHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            An EPiServer event handler that receives a cache content broadcast
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">Event arguments - set the parameter property to an XML string containing the serialized <see cref="T:Episerver.Marketing.Framework.Caching.CacheBroadcastInfo"/> or <see cref="T:Episerver.Marketing.Framework.Caching.CacheContentResponse"/></param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.BuildCacheKey(System.String)">
            <summary>
            Build an inner key for caching item
            </summary>
            <param name="cacheKey">An outer string for building key</param>
            <returns></returns>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.StoreKey(System.String)">
            <summary>
            Insert key into list then update keys cache so that other servers can see it
            </summary>
            <param name="key">A new cache key</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.CacheService.RemoveKey(System.String)">
            <summary>
            Remove key out of list then update keys cache
            </summary>
            <param name="key">An existing cache key</param>
        </member>
        <member name="T:Episerver.Marketing.Framework.Caching.ICacheService">
            <summary>
            This interface is used by MAI.Core for caching content.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.GetOrCreate``1(System.String,System.Func{``0},System.Double)">
            <summary>
            Try to get from Cache with <paramref name="key"/>, if cache missed, utilise the <paramref name="resultFactory"/> to get new result (and cache it) before returning.
            <remarks>null result returned by <paramref name="resultFactory"/> will not be cached</remarks>
            </summary>
            <typeparam name="T">Type of delegate function result</typeparam>
            <param name="key">The cache key to use</param>
            <param name="resultFactory">The delegate function</param>
            <param name="absoluteCacheMinutes">The absolute cache minutes.</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.Insert(System.String,System.Object,System.Double)">
            <summary>
            Insert an object to cache
            </summary>
            <param name="key">The cache key to use</param>
            <param name="value">The object insert to cache</param>
            <param name="absoluteCacheMinutes">The absolute cache minutes.</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.Insert(System.String,System.Object)">
            <summary>
            Insert an object to cache
            </summary>
            <param name="key">The cache key to use</param>
            <param name="value">The object insert to cache</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.Get``1(System.String)">
            <summary>
            Get cached object from cache
            </summary>
            <typeparam name="T">Type of cached object</typeparam>
            <param name="key">The cache key to use</param>
            <returns></returns>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.ICacheService.CacheKeys">
            <summary>
            INTERNAL USE ONLY. Return a list of cache keys which is managed by this CacheService.
            <remarks>Expose this just for using in Setting page</remarks>
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.ICacheService.CacheContents">
            <summary>
            Works with <see cref="P:Episerver.Marketing.Framework.Caching.ICacheService.CacheKeys"/> for showing cache keys on each server
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.Dirty">
            <summary>
            Dirty all cache items that this service control. Dirty cache event is sent over the EPiServer events system, which mean all other servers/sites will receive and dirty itself.
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.Dirty(System.String)">
            <summary>
            Dirty the specific cache item, and send to all other servers/sites via the EPiServer events system
            </summary>
            <param name="cacheKey">The key of the cache item to be dirtied</param>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.RefreshCacheContents">
            <summary>
            Refresh the Cache Contents of this server by broadcasting an update message. Any implementation of this interface is responsible for synchronizing this with other server.
            </summary>
        </member>
        <member name="P:Episerver.Marketing.Framework.Caching.ICacheService.ServerIdentity">
            <summary>
            Identity of this server/site running this instance of CacheService
            </summary>
        </member>
        <member name="M:Episerver.Marketing.Framework.Caching.ICacheService.RemoveLocal(System.String)">
            <summary>
            Removes a cached item with the given key.
            </summary>
            <param name="cacheKey">Key of item to remove from the cache.</param>
        </member>
    </members>
</doc>
